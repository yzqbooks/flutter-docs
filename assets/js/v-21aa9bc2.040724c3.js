"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[1784],{7751:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-21aa9bc2","path":"/chapter15/network.html","title":"15.5 网络请求封装","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"15.5.1 网络接口缓存","slug":"_15-5-1-网络接口缓存","link":"#_15-5-1-网络接口缓存","children":[]},{"level":2,"title":"15.5.2 封装网络请求","slug":"_15-5-2-封装网络请求","link":"#_15-5-2-封装网络请求","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.78,"words":1735},"filePathRelative":"chapter15/network.md","localizedDate":"2022年6月6日","excerpt":""}')},43858:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const p=[(0,t.uE)('<h1 id="_15-5-网络请求封装" tabindex="-1"><a class="header-anchor" href="#_15-5-网络请求封装" aria-hidden="true">#</a> 15.5 网络请求封装</h1><p>本节我们会基于前面介绍过的dio网络库封装APP中用到的网络请求接口，并同时应用一个简单的缓存策略。下面我们先介绍一下网络接口缓存原理，然后再封装APP的业务请求接口。</p><h2 id="_15-5-1-网络接口缓存" tabindex="-1"><a class="header-anchor" href="#_15-5-1-网络接口缓存" aria-hidden="true">#</a> 15.5.1 网络接口缓存</h2><p>由于在国内访问Github服务器速度较慢，所以我们应用一些简单的缓存策略：将请求的url作为key，对请求的返回值在一个指定时间段类进行缓存，另外设置一个最大缓存数，当超过最大缓存数后移除最早的一条缓存。但是也得提供一种针对特定接口或请求决定是否启用缓存的机制，这种机制可以指定哪些接口或那次请求不应用缓存，这种机制是很有必要的，比如登录接口就不应该缓存，又比如用户在下拉刷新时就不应该再应用缓存。在实现缓存之前我们先定义保存缓存信息的<code>CacheObject</code>类：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CacheObject</span> <span class="token punctuation">{</span>\n  <span class="token class-name">CacheObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> timeStamp <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">;</span>\n  <span class="token class-name">Response</span> response<span class="token punctuation">;</span>\n  int timeStamp<span class="token punctuation">;</span> <span class="token comment">// 缓存创建时间</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span>hashCode <span class="token operator">==</span> other<span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//将请求uri作为缓存的key</span>\n  <span class="token metadata function">@override</span>\n  int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>realUri<span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们需要实现具体的缓存策略，由于我们使用的是dio package，所以我们可以直接通过拦截器来实现缓存策略：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:collection&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:dio/dio.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;../index.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">CacheObject</span> <span class="token punctuation">{</span>\n  <span class="token class-name">CacheObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> timeStamp <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">;</span>\n  <span class="token class-name">Response</span> response<span class="token punctuation">;</span>\n  int timeStamp<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span>hashCode <span class="token operator">==</span> other<span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  int <span class="token keyword">get</span> hashCode <span class="token operator">=</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>realUri<span class="token punctuation">.</span>hashCode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">NetCache</span> <span class="token keyword">extends</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 为确保迭代器顺序和对象插入时间一致顺序一致，我们使用LinkedHashMap</span>\n  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CacheObject</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token class-name">RequestOptions</span> options<span class="token punctuation">,</span> <span class="token class-name">RequestInterceptorHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">.</span>cache<span class="token operator">!</span><span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// refresh标记是否是&quot;下拉刷新&quot;</span>\n    bool refresh <span class="token operator">=</span> options<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;refresh&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token comment">//如果是下拉刷新，先删除相关缓存</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;list&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//若是列表，则只要url中包含当前path的缓存全部删除（简单实现，并不精准）</span>\n        cache<span class="token punctuation">.</span><span class="token function">removeWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> key<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果不是列表，则只删除uri相同的缓存</span>\n        <span class="token function">delete</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;noCache&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span>\n        options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;get&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">String</span> key <span class="token operator">=</span> options<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;cacheKey&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> options<span class="token punctuation">.</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> ob <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>ob <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//若缓存未过期，则返回缓存内容</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>millisecondsSinceEpoch <span class="token operator">-</span> ob<span class="token punctuation">.</span>timeStamp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">&lt;</span>\n            <span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">.</span>cache<span class="token operator">!</span><span class="token punctuation">.</span>maxAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">//若已过期则删除缓存，继续向服务器请求</span>\n          cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">,</span> <span class="token class-name">ResponseInterceptorHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果启用缓存，将返回结果保存到缓存</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">.</span>cache<span class="token operator">!</span><span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">_saveCache</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">_saveCache</span><span class="token punctuation">(</span><span class="token class-name">Response</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">RequestOptions</span> options <span class="token operator">=</span> object<span class="token punctuation">.</span>requestOptions<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;noCache&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span>\n        options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;get&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果缓存数量超过最大数量限制，则先移除最早的一条记录</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">.</span>cache<span class="token operator">!</span><span class="token punctuation">.</span>maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>keys<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token class-name">String</span> key <span class="token operator">=</span> options<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;cacheKey&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> options<span class="token punctuation">.</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">CacheObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于代码的解释都在注释中了，在此需要说明的是dio包的<code>option.extra</code>是专门用于扩展请求参数的，我们通过定义了“refresh”和“noCache”两个参数实现了“针对特定接口或请求决定是否启用缓存的机制”，这两个参数含义如下：</p><table><thead><tr><th>参数名</th><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>refresh</td><td>bool</td><td>如果为true，则本次请求不使用缓存，但新的请求结果依然会被缓存</td></tr><tr><td>noCache</td><td>bool</td><td>本次请求禁用缓存，请求结果也不会被缓存。</td></tr></tbody></table><h2 id="_15-5-2-封装网络请求" tabindex="-1"><a class="header-anchor" href="#_15-5-2-封装网络请求" aria-hidden="true">#</a> 15.5.2 封装网络请求</h2><p>一个完整的APP，可能会涉及很多网络请求，为了便于管理、收敛请求入口，工程上最好的作法就是将所有网络请求放到同一个源码文件中。由于我们的接口都是请求的Github 开发平台提供的API，所以我们定义一个Git类，专门用于Github API接口调用。另外，在调试过程中，我们通常需要一些工具来查看网络请求、响应报文，使用网络代理工具来调试网络数据问题是主流方式。配置代理需要在应用中指定代理服务器的地址和端口，另外Github API是HTTPS协议，所以在配置完代理后还应该禁用证书校验，这些配置我们在Git类初始化时执行（<code>init()方法</code>）。下面是Git类的源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:async&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:dio/adapter.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:dio/dio.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;../index.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token string-literal"><span class="token string">&#39;package:dio/dio.dart&#39;</span></span> <span class="token keyword">show</span> <span class="token class-name">DioError</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Git</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在网络请求过程中可能会需要使用当前的context信息，比如在请求失败时</span>\n  <span class="token comment">// 打开一个新路由，而打开新路由需要context信息。</span>\n  <span class="token class-name">Git</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _options <span class="token operator">=</span> <span class="token class-name">Options</span><span class="token punctuation">(</span>extra<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;context&quot;</span></span><span class="token punctuation">:</span> context<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">BuildContext</span><span class="token operator">?</span> context<span class="token punctuation">;</span>\n  late <span class="token class-name">Options</span> _options<span class="token punctuation">;</span>\n  <span class="token keyword">static</span> <span class="token class-name">Dio</span> dio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token class-name">BaseOptions</span><span class="token punctuation">(</span>\n    baseUrl<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;https://api.github.com/&#39;</span></span><span class="token punctuation">,</span>\n    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>acceptHeader<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;application/vnd.github.squirrel-girl-preview,&quot;</span></span>\n          <span class="token string-literal"><span class="token string">&quot;application/vnd.github.symmetra-preview+json&quot;</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 添加缓存插件</span>\n    dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Global</span><span class="token punctuation">.</span>netCache<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 设置用户token（可能为null，代表未登录）</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>authorizationHeader<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n\n    <span class="token comment">// 在调试模式下需要抓包调试，所以我们使用代理，并禁用HTTPS证书校验</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Global</span><span class="token punctuation">.</span>isRelease<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">(</span>dio<span class="token punctuation">.</span>httpClientAdapter <span class="token operator">as</span> <span class="token class-name">DefaultHttpClientAdapter</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onHttpClientCreate <span class="token operator">=</span>\n          <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// client.findProxy = (uri) {</span>\n        <span class="token comment">//   return &#39;PROXY 192.168.50.154:8888&#39;;</span>\n        <span class="token comment">// };</span>\n        <span class="token comment">//代理工具会提供一个抓包的自签名证书，会通不过证书校验，所以我们禁用证书校验</span>\n        client<span class="token punctuation">.</span>badCertificateCallback <span class="token operator">=</span>\n            <span class="token punctuation">(</span><span class="token class-name">X509Certificate</span> cert<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> int port<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 登录接口，登录成功后返回用户信息</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> login<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> basic <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Basic &#39;</span></span> <span class="token operator">+</span> base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">login</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">pwd</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>\n      <span class="token string-literal"><span class="token string">&quot;/user&quot;</span></span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> _options<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>authorizationHeader<span class="token punctuation">:</span> basic\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string-literal"><span class="token string">&quot;noCache&quot;</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//本接口禁用缓存</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//登录成功后更新公共头（authorization），此后的所有请求都会带上用户身份信息</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>authorizationHeader<span class="token punctuation">]</span> <span class="token operator">=</span> basic<span class="token punctuation">;</span>\n    <span class="token comment">//清空所有缓存</span>\n    <span class="token class-name">Global</span><span class="token punctuation">.</span>netCache<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//更新profile中的token信息</span>\n    <span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">.</span>token <span class="token operator">=</span> basic<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//获取用户项目列表</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Repo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRepos</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> queryParameters<span class="token punctuation">,</span> <span class="token comment">//query参数，用于接收分页信息</span>\n    refresh <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 列表下拉刷新，需要删除缓存（拦截器中会读取这些信息）</span>\n      _options<span class="token punctuation">.</span>extra<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;refresh&quot;</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;list&quot;</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      <span class="token string-literal"><span class="token string">&quot;user/repos&quot;</span></span><span class="token punctuation">,</span>\n      queryParameters<span class="token punctuation">:</span> queryParameters<span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> _options<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> r<span class="token punctuation">.</span>data<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Repo</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们在<code>init()</code>方法中，我们判断了是否是调试环境，然后做了一些针对调试环境的网络配置（设置代理和禁用证书校验）。而<code>Git.init()</code>方法是应用启动时被调用的（<code>Global.init()</code>方法中会调用<code>Git.init()</code>）。</p><p>另外需要注意，我们所有的网络请求是通过同一个<code>dio</code>实例（静态变量）发出的，在创建该<code>dio</code>实例时我们将Github API的基地址和API支持的Header进行了全局配置，这样所有通过该<code>dio</code>实例发出的请求都会默认使用者些配置。</p><p>在本实例中，我们只用到了登录接口和获取用户项目的接口，所以在<code>Git</code>类中只定义了<code>login(…)</code>和<code>getRepos(…)</code>方法，如果读者要在本实例的基础上扩充功能，读者可以将其它的接口请求方法添加到<code>Git</code>类中，这样便实现了网络请求接口在代码层面的集中管理和维护。</p>',15)],e={},o=(0,a(18580).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);