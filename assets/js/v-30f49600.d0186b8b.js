"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[8604],{24708:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-30f49600","path":"/chapter15/globals.html","title":"15.4 全局变量及共享状态","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"15.4.1 全局变量-Global类","slug":"_15-4-1-全局变量-global类","link":"#_15-4-1-全局变量-global类","children":[]},{"level":2,"title":"15.4.2 共享状态","slug":"_15-4-2-共享状态","link":"#_15-4-2-共享状态","children":[{"level":3,"title":"用户状态","slug":"用户状态","link":"#用户状态","children":[]},{"level":3,"title":"APP主题状态","slug":"app主题状态","link":"#app主题状态","children":[]},{"level":3,"title":"APP语言状态","slug":"app语言状态","link":"#app语言状态","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":4.19,"words":1256},"filePathRelative":"chapter15/globals.md","localizedDate":"2022年6月6日","excerpt":""}')},30880:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6808);const p=[(0,e.uE)('<h1 id="_15-4-全局变量及共享状态" tabindex="-1"><a class="header-anchor" href="#_15-4-全局变量及共享状态" aria-hidden="true">#</a> 15.4 全局变量及共享状态</h1><p>应用程序中通常会包含一些贯穿APP生命周期的变量信息，这些信息在APP大多数地方可能都会被用到，比如当前用户信息、Local信息等。在Flutter中我们把需要全局共享的信息分为两类：全局变量和共享状态。全局变量就是单纯指会贯穿整个APP生命周期的变量，用于单纯的保存一些信息，或者封装一些全局工具和方法的对象。而共享状态则是指哪些需要跨组件或跨路由共享的信息，这些信息通常也是全局变量，而共享状态和全局变量的不同在于前者发生改变时需要通知所有使用该状态的组件，而后者不需要。为此，我们将全局变量和共享状态分开单独管理。</p><h2 id="_15-4-1-全局变量-global类" tabindex="-1"><a class="header-anchor" href="#_15-4-1-全局变量-global类" aria-hidden="true">#</a> 15.4.1 全局变量-Global类</h2><p>我们在“lib/common”目录下创建一个<code>Global</code>类，它主要管理APP的全局变量，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 提供五套可选主题色</span>\n<span class="token keyword">const</span> _themes <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaterialColor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n  <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>\n  <span class="token class-name">Colors</span><span class="token punctuation">.</span>cyan<span class="token punctuation">,</span>\n  <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span>\n  <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span>\n  <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Global</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> late <span class="token class-name">SharedPreferences</span> _prefs<span class="token punctuation">;</span>\n  <span class="token keyword">static</span> <span class="token class-name">Profile</span> profile <span class="token operator">=</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 网络缓存对象</span>\n  <span class="token keyword">static</span> <span class="token class-name">NetCache</span> netCache <span class="token operator">=</span> <span class="token class-name">NetCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 可选的主题列表</span>\n  <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaterialColor</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> themes <span class="token operator">=</span><span class="token operator">&gt;</span> _themes<span class="token punctuation">;</span>\n\n  <span class="token comment">// 是否为release版</span>\n  <span class="token keyword">static</span> bool <span class="token keyword">get</span> isRelease <span class="token operator">=</span><span class="token operator">&gt;</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;dart.vm.product&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//初始化全局信息，会在APP启动时执行</span>\n  <span class="token keyword">static</span> <span class="token class-name">Future</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    _prefs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">SharedPreferences</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> _profile <span class="token operator">=</span> _prefs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;profile&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_profile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        profile <span class="token operator">=</span> <span class="token class-name">Profile</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>_profile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n      <span class="token comment">// 默认主题索引为0，代表蓝色</span>\n      profile<span class="token operator">=</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>theme<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 如果没有缓存策略，设置默认缓存策略</span>\n    profile<span class="token punctuation">.</span>cache <span class="token operator">=</span> profile<span class="token punctuation">.</span>cache <span class="token operator">?</span><span class="token operator">?</span> <span class="token class-name">CacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>maxAge <span class="token operator">=</span> <span class="token number">3600</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>maxCount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//初始化网络请求相关配置</span>\n    <span class="token class-name">Git</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 持久化Profile信息</span>\n  <span class="token keyword">static</span> <span class="token function">saveProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n      _prefs<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;profile&quot;</span></span><span class="token punctuation">,</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Global类的各个字段的意义都有注释，在此不再赘述，需要注意的是<code>init()</code>需要在App启动时就要执行，所以应用的<code>main</code>方法如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Global</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在此，一定要确保<code>Global.init()</code>方法不能抛出异常，否则 <code>runApp(MyApp())</code>根本执行不到。</p><h2 id="_15-4-2-共享状态" tabindex="-1"><a class="header-anchor" href="#_15-4-2-共享状态" aria-hidden="true">#</a> 15.4.2 共享状态</h2><p>有了全局变量，我们还需要考虑如何跨组件共享状态。当然，如果我们将要共享的状态全部用全局变量替代也是可以的，但是这在Flutter开发中并不是一个好主意，因为组件的状态是和UI相关，而在状态改变时我们会期望依赖该状态的UI组件会自动更新，如果使用全局变量，那么我们必须得去手动处理状态变动通知、接收机制以及变量和组件依赖关系。因此，本实例中，我们使用前面介绍过的Provider包来实现跨组件状态共享，因此我们需要定义相关的Provider。在本实例中，需要共享的状态有登录用户信息、APP主题信息、APP语言信息。由于这些信息改变后都要立即通知其它依赖的该信息的Widget更新，所以我们应该使用<code>ChangeNotifierProvider</code>，另外，这些信息改变后都是需要更新Profile信息并进行持久化的。综上所述，我们可以定义一个<code>ProfileChangeNotifier</code>基类，然后让需要共享的Model继承自该类即可，<code>ProfileChangeNotifier</code>定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ProfileChangeNotifier</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Profile</span> <span class="token keyword">get</span> _profile <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Global</span><span class="token punctuation">.</span>profile<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Global</span><span class="token punctuation">.</span><span class="token function">saveProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存Profile变更</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通知依赖的Widget更新</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户状态" tabindex="-1"><a class="header-anchor" href="#用户状态" aria-hidden="true">#</a> 用户状态</h3><p>用户状态在登录状态发生变化时更新、通知其依赖项，我们定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token keyword">extends</span> <span class="token class-name">ProfileChangeNotifier</span> <span class="token punctuation">{</span>\n  <span class="token class-name">User</span> <span class="token keyword">get</span> user <span class="token operator">=</span><span class="token operator">&gt;</span> _profile<span class="token punctuation">.</span>user<span class="token punctuation">;</span>\n\n  <span class="token comment">// APP是否登录(如果有用户信息，则证明登录过)</span>\n  bool <span class="token keyword">get</span> isLogin <span class="token operator">=</span><span class="token operator">&gt;</span> user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//用户信息发生变化，更新用户信息并通知依赖它的子孙Widgets更新</span>\n  <span class="token keyword">set</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">?</span><span class="token punctuation">.</span>login <span class="token operator">!=</span> _profile<span class="token punctuation">.</span>user<span class="token operator">?</span><span class="token punctuation">.</span>login<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _profile<span class="token punctuation">.</span>lastLogin <span class="token operator">=</span> _profile<span class="token punctuation">.</span>user<span class="token operator">?</span><span class="token punctuation">.</span>login<span class="token punctuation">;</span>\n      _profile<span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>\n      <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="app主题状态" tabindex="-1"><a class="header-anchor" href="#app主题状态" aria-hidden="true">#</a> APP主题状态</h3><p>主题状态在用户更换APP主题时更新、通知其依赖项，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ThemeModel</span> <span class="token keyword">extends</span> <span class="token class-name">ProfileChangeNotifier</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取当前主题，如果为设置主题，则默认使用蓝色主题</span>\n  <span class="token class-name">ColorSwatch</span> <span class="token keyword">get</span> theme <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Global</span><span class="token punctuation">.</span>themes\n      <span class="token punctuation">.</span><span class="token function">firstWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> e<span class="token punctuation">.</span>value <span class="token operator">==</span> _profile<span class="token punctuation">.</span>theme<span class="token punctuation">,</span> orElse<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 主题改变后，通知其依赖项，新主题会立即生效</span>\n  <span class="token keyword">set</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token class-name">ColorSwatch</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">!=</span> theme<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _profile<span class="token punctuation">.</span>theme <span class="token operator">=</span> color<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="app语言状态" tabindex="-1"><a class="header-anchor" href="#app语言状态" aria-hidden="true">#</a> APP语言状态</h3><p>当APP语言选为跟随系统（Auto）时，在系通语言改变时，APP语言会更新；当用户在APP中选定了具体语言时（美国英语或中文简体），则APP便会一直使用用户选定的语言，不会再随系统语言而变。语言状态类定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">LocaleModel</span> <span class="token keyword">extends</span> <span class="token class-name">ProfileChangeNotifier</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取当前用户的APP语言配置Locale类，如果为null，则语言跟随系统语言</span>\n  <span class="token class-name">Locale</span> <span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_profile<span class="token punctuation">.</span>locale <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> t <span class="token operator">=</span> _profile<span class="token punctuation">.</span>locale<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 获取当前Locale的字符串表示</span>\n  <span class="token class-name">String</span> <span class="token keyword">get</span> locale <span class="token operator">=</span><span class="token operator">&gt;</span> _profile<span class="token punctuation">.</span>locale<span class="token punctuation">;</span>\n\n  <span class="token comment">// 用户改变APP语言后，通知依赖项更新，新语言会立即生效</span>\n  <span class="token keyword">set</span> <span class="token function">locale</span><span class="token punctuation">(</span><span class="token class-name">String</span> locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>locale <span class="token operator">!=</span> _profile<span class="token punctuation">.</span>locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _profile<span class="token punctuation">.</span>locale <span class="token operator">=</span> locale<span class="token punctuation">;</span>\n      <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',20)],t={},o=(0,a(18580).Z)(t,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);