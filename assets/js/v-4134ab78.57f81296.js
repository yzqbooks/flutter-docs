"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[5176],{50745:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s=JSON.parse('{"key":"v-4134ab78","path":"/chapter2/flutter_app_debug.html","title":"2.7 调试Flutter应用","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"日志与断点","slug":"日志与断点","link":"#日志与断点","children":[{"level":3,"title":"debugger() 声明","slug":"debugger-声明","link":"#debugger-声明","children":[]},{"level":3,"title":"print、debugPrint、flutter logs","slug":"print、debugprint、flutter-logs","link":"#print、debugprint、flutter-logs","children":[]},{"level":3,"title":"调试模式断言","slug":"调试模式断言","link":"#调试模式断言","children":[]},{"level":3,"title":"断点","slug":"断点","link":"#断点","children":[]}]},{"level":2,"title":"调试应用程序层","slug":"调试应用程序层","link":"#调试应用程序层","children":[{"level":3,"title":"语义","slug":"语义","link":"#语义","children":[]},{"level":3,"title":"调度","slug":"调度","link":"#调度","children":[]},{"level":3,"title":"可视化调试","slug":"可视化调试","link":"#可视化调试","children":[]},{"level":3,"title":"调试动画","slug":"调试动画","link":"#调试动画","children":[]},{"level":3,"title":"调试性能问题","slug":"调试性能问题","link":"#调试性能问题","children":[]},{"level":3,"title":"统计应用启动时间","slug":"统计应用启动时间","link":"#统计应用启动时间","children":[]},{"level":3,"title":"跟踪Dart代码性能","slug":"跟踪dart代码性能","link":"#跟踪dart代码性能","children":[]}]},{"level":2,"title":"DevTools","slug":"devtools","link":"#devtools","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":10.86,"words":3259},"filePathRelative":"chapter2/flutter_app_debug.md","localizedDate":"2022年6月6日","excerpt":""}')},84519:(n,e,a)=>{a.r(e),a.d(e,{default:()=>wn});var s=a(6808);const t=a.p+"assets/img/2-19.c5513619.png",l=a.p+"assets/img/2-20.1056155c.png",p=(0,s.uE)('<h1 id="_2-7-调试flutter应用" tabindex="-1"><a class="header-anchor" href="#_2-7-调试flutter应用" aria-hidden="true">#</a> 2.7 调试Flutter应用</h1><p>有各种各样的工具和功能来帮助调试Flutter应用程序。</p><h2 id="日志与断点" tabindex="-1"><a class="header-anchor" href="#日志与断点" aria-hidden="true">#</a> 日志与断点</h2><h3 id="debugger-声明" tabindex="-1"><a class="header-anchor" href="#debugger-声明" aria-hidden="true">#</a> <code>debugger()</code> 声明</h3><p>当使用Dart Observatory（或另一个Dart调试器，例如IntelliJ IDE中的调试器）时，可以使用该<code>debugger()</code>语句插入编程式断点。要使用这个，你必须添加<code>import &#39;dart:developer&#39;;</code>到相关文件顶部。</p><p><code>debugger()</code>语句采用一个可选<code>when</code>参数，我们可以指定该参数仅在特定条件为真时中断，如下所示：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">someFunction</span><span class="token punctuation">(</span>double offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">debugger</span><span class="token punctuation">(</span>when<span class="token punctuation">:</span> offset <span class="token operator">&gt;</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="print、debugprint、flutter-logs" tabindex="-1"><a class="header-anchor" href="#print、debugprint、flutter-logs" aria-hidden="true">#</a> <code>print</code>、<code>debugPrint</code>、<code>flutter logs</code></h3><p>Dart <code>print()</code>功能将输出到系统控制台，我们可以使用<code>flutter logs</code>来查看它（基本上是一个包装<code>adb logcat</code>）。</p>',9),o=(0,s._)("code",null,"foundation",-1),i={href:"https://docs.flutter.io/flutter/foundation/debugPrint.html",target:"_blank",rel:"noopener noreferrer"},r=(0,s._)("code",null,"debugPrint()",-1),u=(0,s.uE)('<p>Flutter框架中的许多类都有<code>toString</code>实现。按照惯例，这些输出通常包括对象的<code>runtimeType</code>单行输出，通常在表单中ClassName(more information about this instance…)。 树中使用的一些类也具有<code>toStringDeep</code>，从该点返回整个子树的多行描述。已一些具有详细信息<code>toString</code>的类会实现一个<code>toStringShort</code>，它只返回对象的类型或其他非常简短的（一个或两个单词）描述。</p><h3 id="调试模式断言" tabindex="-1"><a class="header-anchor" href="#调试模式断言" aria-hidden="true">#</a> 调试模式断言</h3><p>在Flutter应用调试过程中，Dart <code>assert</code>语句被启用，并且 Flutter 框架使用它来执行许多运行时检查来验证是否违反一些不可变的规则。当一个某个规则被违反时，就会在控制台打印错误日志，并带上一些上下文信息来帮助追踪问题的根源。</p><p>要关闭调试模式并使用发布模式，请使用<code>flutter run --release</code>运行我们的应用程序。 这也关闭了Observatory调试器。一个中间模式可以关闭除Observatory之外所有调试辅助工具的，称为“profile mode”，用<code>--profile</code>替代<code>--release</code>即可。</p><h3 id="断点" tabindex="-1"><a class="header-anchor" href="#断点" aria-hidden="true">#</a> 断点</h3><p>开发过程中，断点是最实用的调试工具之一，我们以 Android Studio 为例，如图2-19：</p><p><img src="'+t+'" alt="2-19"></p><p>我们在 93 行打了一个断点，一旦代码执行到这一行就会暂停，这时我们可以看到当前上下文所有变量的值，然后可以选择一步一步的执行代码。关于如何通过 IDE 来打断点，网上教程很多，读者可以自行搜索。</p><h2 id="调试应用程序层" tabindex="-1"><a class="header-anchor" href="#调试应用程序层" aria-hidden="true">#</a> 调试应用程序层</h2><p>Flutter框架的每一层都提供了将其当前状态或事件转储(dump)到控制台（使用<code>debugPrint</code>）的功能。</p><h4 id="widget-树" tabindex="-1"><a class="header-anchor" href="#widget-树" aria-hidden="true">#</a> Widget 树</h4>',11),c={href:"https://docs.flutter.io/flutter/widgets/debugDumpApp.html",target:"_blank",rel:"noopener noreferrer"},d=(0,s._)("code",null,"debugDumpApp()",-1),k=(0,s._)("code",null,"build()",-1),m=(0,s._)("code",null,"build()",-1),b=(0,s._)("code",null,"runApp()",-1),v=(0,s.uE)('<p>如, 这个应用程序:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">runApp</span><span class="token punctuation">(</span>\n    <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>\n      home<span class="token punctuation">:</span> <span class="token class-name">AppHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">AppHome</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Material</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">debugDumpApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Dump App&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>…会输出这样的内容（精确的细节会根据框架的版本、设备的大小等等而变化）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>I/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>: WidgetsFlutterBinding - CHECKED MODE\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>: RenderObjectToWidgetAdapter<span class="token operator">&lt;</span>RenderBox<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span>GlobalObjectKey RenderView<span class="token punctuation">(</span><span class="token number">497039273</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> renderObject: RenderView<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>: └MaterialApp<span class="token punctuation">(</span>state: _MaterialAppState<span class="token punctuation">(</span><span class="token number">1009803148</span><span class="token punctuation">))</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  └ScrollConfiguration<span class="token punctuation">(</span><span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:   └AnimatedTheme<span class="token punctuation">(</span>duration: 200ms<span class="token punctuation">;</span> state: _AnimatedThemeState<span class="token punctuation">(</span><span class="token number">543295893</span><span class="token punctuation">;</span> ticker inactive<span class="token punctuation">;</span> ThemeDataTween<span class="token punctuation">(</span>ThemeData<span class="token punctuation">(</span>Brightness.light Color<span class="token punctuation">(</span>0xff2196f3<span class="token punctuation">)</span> etc<span class="token punctuation">..</span>.<span class="token punctuation">)</span> → null<span class="token punctuation">))</span><span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    └Theme<span class="token punctuation">(</span>ThemeData<span class="token punctuation">(</span>Brightness.light Color<span class="token punctuation">(</span>0xff2196f3<span class="token punctuation">)</span> etc<span class="token punctuation">..</span>.<span class="token punctuation">))</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:     └WidgetsApp<span class="token punctuation">(</span><span class="token punctuation">[</span>GlobalObjectKey _MaterialAppState<span class="token punctuation">(</span><span class="token number">1009803148</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> state: _WidgetsAppState<span class="token punctuation">(</span><span class="token number">552902158</span><span class="token punctuation">))</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:      └CheckedModeBanner<span class="token punctuation">(</span><span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:       └Banner<span class="token punctuation">(</span><span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:        └CustomPaint<span class="token punctuation">(</span>renderObject: RenderCustomPaint<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:         └DefaultTextStyle<span class="token punctuation">(</span>inherit: <span class="token boolean">true</span><span class="token punctuation">;</span> color: Color<span class="token punctuation">(</span>0xd0ff0000<span class="token punctuation">)</span><span class="token punctuation">;</span> family: <span class="token string">&quot;monospace&quot;</span><span class="token punctuation">;</span> size: <span class="token number">48.0</span><span class="token punctuation">;</span> weight: <span class="token number">900</span><span class="token punctuation">;</span> decoration: double Color<span class="token punctuation">(</span>0xffffff00<span class="token punctuation">)</span> TextDecoration.underline<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:          └MediaQuery<span class="token punctuation">(</span>MediaQueryData<span class="token punctuation">(</span>size: Size<span class="token punctuation">(</span><span class="token number">411.4</span>, <span class="token number">683.4</span><span class="token punctuation">)</span>, devicePixelRatio: <span class="token number">2.625</span>, textScaleFactor: <span class="token number">1.0</span>, padding: EdgeInsets<span class="token punctuation">(</span><span class="token number">0.0</span>, <span class="token number">24.0</span>, <span class="token number">0.0</span>, <span class="token number">0.0</span><span class="token punctuation">))</span><span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:           └LocaleQuery<span class="token punctuation">(</span>null<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:            └Title<span class="token punctuation">(</span>color: Color<span class="token punctuation">(</span>0xff2196f3<span class="token punctuation">))</span>\n<span class="token punctuation">..</span>. <span class="token comment">#省略剩余内容</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),h=(0,s._)("code",null,"toStringDeepwidget",-1),g=(0,s._)("code",null,"build()",-1),f={href:"https://docs.flutter.io/flutter/material/InkFeature-class.html",target:"_blank",rel:"noopener noreferrer"},_=(0,s._)("code",null,"InkFeature",-1),U=(0,s._)("p",null,[(0,s.Uk)("当按钮从被按下变为被释放时debugDumpApp()被调用，TextButton对象同时调用"),(0,s._)("code",null,"setState()"),(0,s.Uk)('，并将自己标记为"dirty"。 这就是为什么如果你看转储，你会看到特定的对象标记为“dirty”。我们还可以查看已注册了哪些手势监听器; 在这种情况下，一个单一的GestureDetector被列出，并且监听“tap”手势（“tap”是'),(0,s._)("code",null,"TapGestureDetector"),(0,s.Uk)("的"),(0,s._)("code",null,"toStringShort"),(0,s.Uk)("函数输出的）")],-1),y={href:"https://docs.flutter.io/flutter/widgets/Widget/debugFillProperties.html",target:"_blank",rel:"noopener noreferrer"},I=(0,s._)("code",null,"debugFillProperties()",-1),x={href:"https://docs.flutter.io/flutter/foundation/DiagnosticsProperty-class.html",target:"_blank",rel:"noopener noreferrer"},S=(0,s._)("code",null,"toString",-1),D=(0,s._)("h4",{id:"渲染树",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#渲染树","aria-hidden":"true"},"#"),(0,s.Uk)(" 渲染树")],-1),T=(0,s._)("code",null,"debugDumpRenderTree()",-1),w=(0,s._)("code",null,"debugDumpApp()",-1),P={href:"https://docs.flutter.io/flutter/scheduler/SchedulerBinding/addPersistentFrameCallback.html",target:"_blank",rel:"noopener noreferrer"},F=(0,s.uE)('<p>要调用<code>debugDumpRenderTree()</code>，我们需要添加<code>import&#39;package:flutter/rendering.dart&#39;;</code>到我们的源文件。</p><p>上面这个小例子的输出结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>I/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>: RenderView\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  │ debug mode enabled - android\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  │ window size: Size<span class="token punctuation">(</span><span class="token number">1080.0</span>, <span class="token number">1794.0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>in physical pixels<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  │ device pixel ratio: <span class="token number">2.625</span> <span class="token punctuation">(</span>physical pixels per logical pixel<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  │ configuration: Size<span class="token punctuation">(</span><span class="token number">411.4</span>, <span class="token number">683.4</span><span class="token punctuation">)</span> at <span class="token number">2</span>.625x <span class="token punctuation">(</span>in logical pixels<span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  │\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:  └─child: RenderCustomPaint\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │ creator: CustomPaint ← Banner ← CheckedModeBanner ←\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │   WidgetsApp-<span class="token punctuation">[</span>GlobalObjectKey _MaterialAppState<span class="token punctuation">(</span><span class="token number">1009803148</span><span class="token punctuation">)</span><span class="token punctuation">]</span> ←\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │   Theme ← AnimatedTheme ← ScrollConfiguration ← MaterialApp ←\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │   <span class="token punctuation">[</span>root<span class="token punctuation">]</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │ parentData: <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │ constraints: BoxConstraints<span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token number">411.4</span>, <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token number">683.4</span><span class="token punctuation">)</span>\nI/flutter <span class="token punctuation">(</span> <span class="token number">6559</span><span class="token punctuation">)</span>:    │ size: Size<span class="token punctuation">(</span><span class="token number">411.4</span>, <span class="token number">683.4</span><span class="token punctuation">)</span>\n<span class="token punctuation">..</span>. <span class="token comment"># 省略</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是根<code>RenderObject</code>对象的<code>toStringDeep</code>函数的输出。</p><p>当调试布局问题时，关键要看的是<code>size</code>和<code>constraints</code>字段。约束沿着树向下传递，尺寸向上传递。</p>',5),W={href:"https://docs.flutter.io/flutter/rendering/Layer/debugFillProperties.html",target:"_blank",rel:"noopener noreferrer"},A=(0,s._)("code",null,"debugFillProperties()",-1),B={href:"https://docs.flutter.io/flutter/foundation/DiagnosticsProperty-class.html",target:"_blank",rel:"noopener noreferrer"},R=(0,s._)("h4",{id:"layer树",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#layer树","aria-hidden":"true"},"#"),(0,s.Uk)(" Layer树")],-1),E={href:"https://docs.flutter.io/flutter/rendering/debugDumpLayerTree.html",target:"_blank",rel:"noopener noreferrer"},C=(0,s._)("code",null,"debugDumpLayerTree()",-1),M=(0,s.uE)('<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter : TransformLayer\nI/flutter :  │ creator: [root]\nI/flutter :  │ offset: Offset(0.0, 0.0)\nI/flutter :  │ transform:\nI/flutter :  │   [0] 3.5,0.0,0.0,0.0\nI/flutter :  │   [1] 0.0,3.5,0.0,0.0\nI/flutter :  │   [2] 0.0,0.0,1.0,0.0\nI/flutter :  │   [3] 0.0,0.0,0.0,1.0\nI/flutter :  │\nI/flutter :  ├─child 1: OffsetLayer\nI/flutter :  │ │ creator: RepaintBoundary ← _FocusScope ← Semantics ← Focus-[GlobalObjectKey MaterialPageRoute(560156430)] ← _ModalScope-[GlobalKey 328026813] ← _OverlayEntry-[GlobalKey 388965355] ← Stack ← Overlay-[GlobalKey 625702218] ← Navigator-[GlobalObjectKey _MaterialAppState(859106034)] ← Title ← ⋯\nI/flutter :  │ │ offset: Offset(0.0, 0.0)\nI/flutter :  │ │\nI/flutter :  │ └─child 1: PictureLayer\nI/flutter :  │\nI/flutter :  └─child 2: PictureLayer\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是根<code>Layer</code>的<code>toStringDeep</code>输出的。</p><p>根部的变换是应用设备像素比的变换; 在这种情况下，每个逻辑像素代表3.5个设备像素。</p><p><code>RepaintBoundary</code> widget在渲染树的层中创建了一个<code>RenderRepaintBoundary</code>。这用于减少需要重绘的需求量。</p><h3 id="语义" tabindex="-1"><a class="header-anchor" href="#语义" aria-hidden="true">#</a> 语义</h3>',5),L={href:"https://docs.flutter.io/flutter/rendering/debugDumpSemanticsTree.html",target:"_blank",rel:"noopener noreferrer"},O=(0,s._)("code",null,"debugDumpSemanticsTree()",-1),q=(0,s._)("code",null,"SemanticsDebugger",-1),z=(0,s.uE)('<p>对于上面的例子，它会输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter : SemanticsNode(0; Rect.fromLTRB(0.0, 0.0, 411.4, 683.4))\nI/flutter :  ├SemanticsNode(1; Rect.fromLTRB(0.0, 0.0, 411.4, 683.4))\nI/flutter :  │ └SemanticsNode(2; Rect.fromLTRB(0.0, 0.0, 411.4, 683.4); canBeTapped)\nI/flutter :  └SemanticsNode(3; Rect.fromLTRB(0.0, 0.0, 411.4, 683.4))\nI/flutter :    └SemanticsNode(4; Rect.fromLTRB(0.0, 0.0, 82.0, 36.0); canBeTapped; &quot;Dump App&quot;)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调度" tabindex="-1"><a class="header-anchor" href="#调度" aria-hidden="true">#</a> 调度</h3>',3),j={href:"https://docs.flutter.io/flutter/scheduler/debugPrintBeginFrameBanner.html",target:"_blank",rel:"noopener noreferrer"},N=(0,s._)("code",null,"debugPrintBeginFrameBanner",-1),G={href:"https://docs.flutter.io/flutter/scheduler/debugPrintEndFrameBanner.html",target:"_blank",rel:"noopener noreferrer"},K=(0,s._)("code",null,"debugPrintEndFrameBanner",-1),H=(0,s.uE)('<p>例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter : ▄▄▄▄▄▄▄▄ Frame 12         30s 437.086ms ▄▄▄▄▄▄▄▄\nI/flutter : Debug print: Am I performing this work more than once per frame?\nI/flutter : Debug print: Am I performing this work more than once per frame?\nI/flutter : ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),Q={href:"https://docs.flutter.io/flutter/scheduler/debugPrintScheduleFrameStacks.html",target:"_blank",rel:"noopener noreferrer"},V=(0,s._)("code",null,"debugPrintScheduleFrameStacks",-1),J=(0,s.uE)('<h3 id="可视化调试" tabindex="-1"><a class="header-anchor" href="#可视化调试" aria-hidden="true">#</a> 可视化调试</h3><p>我们也可以通过设置<code>debugPaintSizeEnabled</code>为<code>true</code>以可视方式调试布局问题。 这是来自<code>rendering</code>库的布尔值。它可以在任何时候启用，并在为true时影响绘制。 设置它的最简单方法是在<code>void main()</code>的顶部设置。</p><p>当它被启用时，所有的盒子都会得到一个明亮的深青色边框，padding（来自widget如Padding）显示为浅蓝色，子widget周围有一个深蓝色框， 对齐方式（来自widget如Center和Align）显示为黄色箭头. 空白（如没有任何子节点的Container）以灰色显示。</p>',3),Z={href:"https://docs.flutter.io/flutter/rendering/debugPaintBaselinesEnabled.html",target:"_blank",rel:"noopener noreferrer"},$=(0,s._)("code",null,"debugPaintBaselinesEnabled",-1),X={href:"https://docs.flutter.io/flutter/rendering/debugPaintPointersEnabled.html",target:"_blank",rel:"noopener noreferrer"},Y=(0,s._)("code",null,"debugPaintPointersEnabled",-1),nn=(0,s._)("code",null,"RepaintBoundary",-1),en={href:"https://docs.flutter.io/flutter/rendering/debugPaintLayerBordersEnabled.html",target:"_blank",rel:"noopener noreferrer"},an=(0,s._)("code",null,"debugPaintLayerBordersEnabled",-1),sn={href:"https://docs.flutter.io/flutter/rendering/debugRepaintRainbowEnabled.html",target:"_blank",rel:"noopener noreferrer"},tn=(0,s._)("code",null,"debugRepaintRainbowEnabled",-1),ln=(0,s._)("p",null,[(0,s.Uk)("所有这些标志只能在调试模式下工作。通常，Flutter框架中以“"),(0,s._)("code",null,"debug..."),(0,s.Uk)("” 开头的任何内容都只能在调试模式下工作。")],-1),pn=(0,s._)("h3",{id:"调试动画",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#调试动画","aria-hidden":"true"},"#"),(0,s.Uk)(" 调试动画")],-1),on={href:"https://docs.flutter.io/flutter/scheduler/timeDilation.html",target:"_blank",rel:"noopener noreferrer"},rn=(0,s._)("code",null,"timeDilation",-1),un=(0,s._)("h3",{id:"调试性能问题",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#调试性能问题","aria-hidden":"true"},"#"),(0,s.Uk)(" 调试性能问题")],-1),cn={href:"https://docs.flutter.io/flutter/rendering/debugPrintMarkNeedsLayoutStacks.html",target:"_blank",rel:"noopener noreferrer"},dn=(0,s._)("code",null,"debugPrintMarkNeedsLayoutStacks",-1),kn={href:"https://docs.flutter.io/flutter/rendering/debugPrintMarkNeedsPaintStacks.html",target:"_blank",rel:"noopener noreferrer"},mn=(0,s._)("code",null,"debugPrintMarkNeedsPaintStacks",-1),bn=(0,s._)("code",null,"services",-1),vn=(0,s._)("code",null,"debugPrintStack()",-1),hn=(0,s.uE)('<h3 id="统计应用启动时间" tabindex="-1"><a class="header-anchor" href="#统计应用启动时间" aria-hidden="true">#</a> 统计应用启动时间</h3><p>要收集有关Flutter应用程序启动所需时间的详细信息，可以在运行<code>flutter run</code>时使用<code>trace-startup</code>和<code>profile</code>选项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ flutter run --trace-startup <span class="token parameter variable">--profile</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>跟踪输出保存为<code>start_up_info.json</code>，在Flutter工程目录在build目录下。输出列出了从应用程序启动到这些跟踪事件（以微秒捕获）所用的时间：</p><ul><li>进入Flutter引擎时.</li><li>展示应用第一帧时.</li><li>初始化Flutter框架时.</li><li>完成Flutter框架初始化时.</li></ul><p>如 :</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;engineEnterTimestampMicros&quot;</span><span class="token operator">:</span> <span class="token number">96025565262</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;timeToFirstFrameMicros&quot;</span><span class="token operator">:</span> <span class="token number">2171978</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;timeToFrameworkInitMicros&quot;</span><span class="token operator">:</span> <span class="token number">514585</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;timeAfterFrameworkInitMicros&quot;</span><span class="token operator">:</span> <span class="token number">1657393</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跟踪dart代码性能" tabindex="-1"><a class="header-anchor" href="#跟踪dart代码性能" aria-hidden="true">#</a> 跟踪Dart代码性能</h3>',8),gn={href:"https://developer.android.com/studio/profile/systrace.html",target:"_blank",rel:"noopener noreferrer"},fn=(0,s._)("code",null,"dart:developer",-1),_n={href:"https://api.dartlang.org/stable/dart-developer/Timeline-class.html",target:"_blank",rel:"noopener noreferrer"},Un=(0,s.uE)('<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Timeline</span><span class="token punctuation">.</span><span class="token function">startSync</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;interesting function&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// iWonderHowLongThisTakes();</span>\n<span class="token class-name">Timeline</span><span class="token punctuation">.</span><span class="token function">finishSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开你应用程序的Observatory timeline页面，在“Recorded Streams”中选择‘Dart’复选框，并执行你想测量的功能。</p>',2),yn={href:"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool",target:"_blank",rel:"noopener noreferrer"},In=(0,s._)("p",null,[(0,s.Uk)("请确保运行"),(0,s._)("code",null,"flutter run"),(0,s.Uk)("时带有"),(0,s._)("code",null,"--profile"),(0,s.Uk)("标志，以确保运行时性能特征与我们的最终产品差异最小。")],-1),xn=(0,s._)("h2",{id:"devtools",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#devtools","aria-hidden":"true"},"#"),(0,s.Uk)(" DevTools")],-1),Sn=(0,s._)("p",null,"Flutter DevTools 是 Flutter 可视化调试工具，如图2-20。它将各种调试工具和能力集成在一起，并提供可视化调试界面，它的功能很强大，掌握它会对我们开发和优化 Flutter 应用有很大帮助。由于 Flutter DevTools 功能很多，短篇幅是讲不完的，本书不做专门介绍，Flutter 官网对 DevTools 有详细的介绍，读者可以去官网查看相关教程。",-1),Dn=(0,s._)("p",null,[(0,s._)("img",{src:l,alt:"2-20"})],-1),Tn={},wn=(0,a(18580).Z)(Tn,[["render",function(n,e){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[p,(0,s._)("p",null,[(0,s.Uk)("如果你一次输出太多，那么Android有时会丢弃一些日志行。为了避免这种情况，我们可以使用Flutter的"),o,(0,s.Uk)("库中的"),(0,s._)("a",i,[r,(0,s.Wm)(a)]),(0,s.Uk)("。 这是一个封装print，它将输出限制在一个级别，避免被Android内核丢弃。")]),u,(0,s._)("p",null,[(0,s.Uk)("要转储Widgets树的状态，请调用"),(0,s._)("a",c,[d,(0,s.Wm)(a)]),(0,s.Uk)("。 只要应用程序已经构建了至少一次（即在调用"),k,(0,s.Uk)("之后的任何时间），我们可以在应用程序未处于构建阶段（即，不在"),m,(0,s.Uk)("方法内调用 ）的任何时间调用此方法（在调用"),b,(0,s.Uk)("之后）。")]),v,(0,s._)("p",null,[(0,s.Uk)("这是一个“扁平化”的树，显示了通过各种构建函数投影的所有widget（如果你在widget树的根中调用"),h,(0,s.Uk)("，这是你获得的树）。 你会看到很多在你的应用源代码中没有出现的widget，因为它们是被框架中widget的"),g,(0,s.Uk)("函数插入的。例如，"),(0,s._)("a",f,[_,(0,s.Wm)(a)]),(0,s.Uk)("是Material widget的一个实现细节 。")]),U,(0,s._)("p",null,[(0,s.Uk)("如果我们编写自己的widget，则可以通过覆盖"),(0,s._)("a",y,[I,(0,s.Wm)(a)]),(0,s.Uk)("来添加信息。 将"),(0,s._)("a",x,[(0,s.Uk)("DiagnosticsProperty"),(0,s.Wm)(a)]),(0,s.Uk)("对象作为方法参数，并调用父类方法。 该函数是该"),S,(0,s.Uk)("方法用来填充小部件描述信息的。")]),D,(0,s._)("p",null,[(0,s.Uk)("如果我们尝试调试布局问题，那么Widget树可能不够详细。在这种情况下，我们可以通过调用"),T,(0,s.Uk)("转储渲染树。 正如"),w,(0,s.Uk)("，除布局或绘制阶段外，我们可以随时调用此函数。作为一般规则，从"),(0,s._)("a",P,[(0,s.Uk)("frame 回调"),(0,s.Wm)(a)]),(0,s.Uk)(" 或事件处理器中调用它是最佳解决方案。")]),F,(0,s._)("p",null,[(0,s.Uk)("如果我们编写自己的渲染对象，则可以通过覆盖"),(0,s._)("a",W,[A,(0,s.Wm)(a)]),(0,s.Uk)("将信息添加到转储。 将"),(0,s._)("a",B,[(0,s.Uk)("DiagnosticsProperty"),(0,s.Wm)(a)]),(0,s.Uk)("对象作为方法的参数，并调用父类方法。")]),R,(0,s._)("p",null,[(0,s.Uk)("读者可以理解为渲染树是可以分层的，而最终绘制需要将不同的层合成起来，而Layer则是绘制时需要合成的层，如果我们尝试调试合成问题，则可以使用"),(0,s._)("a",E,[C,(0,s.Wm)(a)]),(0,s.Uk)("。对于上面的例子，它会输出：")]),M,(0,s._)("p",null,[(0,s.Uk)("我们还可以调用"),(0,s._)("a",L,[O,(0,s.Wm)(a)]),(0,s.Uk)("获取语义树（呈现给系统可访问性API的树）的转储。 要使用此功能，必须首先启用辅助功能，例如启用系统辅助工具或"),q,(0,s.Uk)(" （下面讨论）。")]),z,(0,s._)("p",null,[(0,s.Uk)("要找出相对于帧的开始/结束事件发生的位置，可以切换"),(0,s._)("a",j,[N,(0,s.Wm)(a)]),(0,s.Uk)("和"),(0,s._)("a",G,[K,(0,s.Wm)(a)]),(0,s.Uk)("布尔值以将帧的开始和结束打印到控制台。")]),H,(0,s._)("p",null,[(0,s._)("a",Q,[V,(0,s.Wm)(a)]),(0,s.Uk)("还可以用来打印导致当前帧被调度的调用堆栈。")]),J,(0,s._)("p",null,[(0,s._)("a",Z,[$,(0,s.Wm)(a)]),(0,s.Uk)("做了类似的事情，但对于具有基线的对象，文字基线以绿色显示，表意(ideographic)基线以橙色显示。")]),(0,s._)("p",null,[(0,s._)("a",X,[Y,(0,s.Wm)(a)]),(0,s.Uk)("标志打开一个特殊模式，任何正在点击的对象都会以深青色突出显示。 这可以帮助我们确定某个对象是否以某种不正确的方式进行hit测试（Flutter检测点击的位置是否有能响应用户操作的widget）,例如，如果它实际上超出了其父项的范围，首先不会考虑通过hit测试。")]),(0,s._)("p",null,[(0,s.Uk)("如果我们尝试调试合成图层，例如以确定是否以及在何处添加"),nn,(0,s.Uk)(" widget，则可以使用"),(0,s._)("a",en,[an,(0,s.Wm)(a)]),(0,s.Uk)(" 标志， 该标志用橙色或轮廓线标出每个层的边界，或者使用"),(0,s._)("a",sn,[tn,(0,s.Wm)(a)]),(0,s.Uk)("标志， 只要他们重绘时，这会使该层被一组旋转色所覆盖。")]),ln,pn,(0,s._)("p",null,[(0,s.Uk)("调试动画最简单的方法是减慢它们的速度。为此，请将"),(0,s._)("a",on,[rn,(0,s.Wm)(a)]),(0,s.Uk)("变量（在scheduler库中）设置为大于1.0的数字，例如50.0。 最好在应用程序启动时只设置一次。如果我们在运行中更改它，尤其是在动画运行时将其值改小，则在观察时可能会出现倒退，这可能会导致断言命中，并且这通常会干扰我们的开发工作。")]),un,(0,s._)("p",null,[(0,s.Uk)("要了解我们的应用程序导致重新布局或重新绘制的原因，我们可以分别设置"),(0,s._)("a",cn,[dn,(0,s.Wm)(a)]),(0,s.Uk)("和 "),(0,s._)("a",kn,[mn,(0,s.Wm)(a)]),(0,s.Uk)("标志。 每当渲染盒被要求重新布局和重新绘制时，这些都会将堆栈跟踪记录到控制台。如果这种方法对我们有用，我们可以使用"),bn,(0,s.Uk)("库中的"),vn,(0,s.Uk)("方法按需打印堆栈痕迹。")]),hn,(0,s._)("p",null,[(0,s.Uk)("要执行自定义性能跟踪和测量Dart任意代码段的wall/CPU时间（类似于在Android上使用"),(0,s._)("a",gn,[(0,s.Uk)("systrace"),(0,s.Wm)(a)]),(0,s.Uk)("）。 使用"),fn,(0,s.Uk)("的"),(0,s._)("a",_n,[(0,s.Uk)("Timeline"),(0,s.Wm)(a)]),(0,s.Uk)("工具来包含你想测试的代码块，例如：")]),Un,(0,s._)("p",null,[(0,s.Uk)("刷新页面将在Chrome的"),(0,s._)("a",yn,[(0,s.Uk)("跟踪工具"),(0,s.Wm)(a)]),(0,s.Uk)("中显示应用按时间顺序排列的timeline记录。")]),In,xn,Sn,Dn])}]])},18580:(n,e)=>{e.Z=(n,e)=>{const a=n.__vccOpts||n;for(const[n,s]of e)a[n]=s;return a}}}]);