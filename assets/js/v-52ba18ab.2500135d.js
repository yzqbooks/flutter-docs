"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[7151],{45065:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-52ba18ab","path":"/chapter9/animation_structure.html","title":"9.2 动画基本结构及状态监听","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"9.2.1 动画基本结构","slug":"_9-2-1-动画基本结构","link":"#_9-2-1-动画基本结构","children":[{"level":3,"title":"基础版本","slug":"基础版本","link":"#基础版本","children":[]},{"level":3,"title":"使用AnimatedWidget简化","slug":"使用animatedwidget简化","link":"#使用animatedwidget简化","children":[]},{"level":3,"title":"用AnimatedBuilder重构","slug":"用animatedbuilder重构","link":"#用animatedbuilder重构","children":[]}]},{"level":2,"title":"9.2.2 动画状态监听","slug":"_9-2-2-动画状态监听","link":"#_9-2-2-动画状态监听","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.04,"words":1513},"filePathRelative":"chapter9/animation_structure.md","localizedDate":"2022年6月6日","excerpt":""}')},78868:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const e=a.p+"assets/img/9-1.d0f666ad.gif",p=[(0,t.uE)('<h1 id="_9-2-动画基本结构及状态监听" tabindex="-1"><a class="header-anchor" href="#_9-2-动画基本结构及状态监听" aria-hidden="true">#</a> 9.2 动画基本结构及状态监听</h1><h2 id="_9-2-1-动画基本结构" tabindex="-1"><a class="header-anchor" href="#_9-2-1-动画基本结构" aria-hidden="true">#</a> 9.2.1 动画基本结构</h2><p>在Flutter中我们可以通过多种方式来实现动画，下面通过一个图片逐渐放大示例的不同实现来演示Flutter中动画的不同实现方式的区别。</p><h3 id="基础版本" tabindex="-1"><a class="header-anchor" href="#基础版本" aria-hidden="true">#</a> 基础版本</h3><p>下面我们演示一下最基础的动画实现方式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ScaleAnimationRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">ScaleAnimationRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token metadata function">@override</span>\n  _ScaleAnimationRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_ScaleAnimationRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//需要继承TickerProvider，如果有多个AnimationController，则应该使用TickerProviderStateMixin。</span>\n<span class="token keyword">class</span> _ScaleAnimationRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScaleAnimationRoute</span><span class="token punctuation">&gt;</span></span>\n    <span class="token keyword">with</span> <span class="token class-name">SingleTickerProviderStateMixin</span> <span class="token punctuation">{</span>\n  late <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">;</span>\n  late <span class="token class-name">AnimationController</span> controller<span class="token punctuation">;</span>\n  \n  <span class="token metadata function">@override</span>\n  <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n      duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//匀速</span>\n    <span class="token comment">//图片宽高从0变到300</span>\n    animation <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">300.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//启动动画(正向执行)</span>\n    controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>\n        <span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token metadata function">@override</span>\n  <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//路由销毁时需要释放动画资源</span>\n    controller<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中<code>addListener()</code>函数调用了<code>setState()</code>，所以每次动画生成一个新的数字时，当前帧被标记为脏(dirty)，这会导致widget的<code>build()</code>方法再次被调用，而在<code>build()</code>中，改变Image的宽高，因为它的高度和宽度现在使用的是<code>animation.value</code> ，所以就会逐渐放大。值得注意的是动画完成时要释放控制器(调用<code>dispose()</code>方法)以防止内存泄漏。</p><p>上面的例子中并没有指定Curve，所以放大的过程是线性的（匀速），下面我们指定一个Curve，来实现一个类似于弹簧效果的动画过程，我们只需要将<code>initState</code>中的代码改为下面这样即可：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n        duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//使用弹性曲线</span>\n    animation<span class="token operator">=</span><span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> controller<span class="token punctuation">,</span> curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>bounceIn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//图片宽高从0变到300</span>\n    animation <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">300.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//启动动画</span>\n    controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图9-1所示：</p><p><img src="'+e+'" alt="图9-1"></p><h3 id="使用animatedwidget简化" tabindex="-1"><a class="header-anchor" href="#使用animatedwidget简化" aria-hidden="true">#</a> 使用AnimatedWidget简化</h3><p>细心的读者可能已经发现上面示例中通过<code>addListener()</code>和<code>setState()</code> 来更新UI这一步其实是通用的，如果每个动画中都加这么一句是比较繁琐的。<code>AnimatedWidget</code>类封装了调用<code>setState()</code>的细节，并允许我们将 widget 分离出来，重构后的代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">AnimatedImage</span> <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">AnimatedImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> listenable<span class="token punctuation">:</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> animation <span class="token operator">=</span> listenable <span class="token operator">as</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span>  <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>\n        <span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ScaleAnimationRoute1</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">ScaleAnimationRoute1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _ScaleAnimationRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">_ScaleAnimationRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _ScaleAnimationRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScaleAnimationRoute1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token keyword">with</span> <span class="token class-name">SingleTickerProviderStateMixin</span> <span class="token punctuation">{</span>\n  late <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">;</span>\n  late <span class="token class-name">AnimationController</span> controller<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    controller <span class="token operator">=</span>  <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n        duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//图片宽高从0变到300</span>\n    animation <span class="token operator">=</span>  <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">300.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//启动动画</span>\n    controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">AnimatedImage</span><span class="token punctuation">(</span>\n      animation<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//路由销毁时需要释放动画资源</span>\n    controller<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用animatedbuilder重构" tabindex="-1"><a class="header-anchor" href="#用animatedbuilder重构" aria-hidden="true">#</a> 用AnimatedBuilder重构</h3><p>用AnimatedWidget 可以从动画中分离出 widget，而动画的渲染过程（即设置宽高）仍然在AnimatedWidget 中，假设如果我们再添加一个 widget 透明度变化的动画，那么我们需要再实现一个AnimatedWidget，这样不是很优雅，如果我们能把渲染过程也抽象出来，那就会好很多，而AnimatedBuilder正是将渲染逻辑分离出来, 上面的 build 方法中的代码可以改为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//return AnimatedImage(animation: animation,);</span>\n    <span class="token keyword">return</span> <span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>\n      animation<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> ctx<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span>  <span class="token class-name">Center</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n            height<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n            width<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中有一个迷惑的问题是，<code>child</code>看起来像被指定了两次。但实际发生的事情是：将外部引用<code>child</code>传递给<code>AnimatedBuilder</code>后，<code>AnimatedBuilder</code>再将其传递给匿名构造器， 然后将该对象用作其子对象。最终的结果是<code>AnimatedBuilder</code>返回的对象插入到 widget 树中。</p><p>也许你会说这和我们刚开始的示例差不了多少，其实它会带来三个好处：</p><ol><li><p>不用显式的去添加帧监听器，然后再调用<code>setState()</code> 了，这个好处和<code>AnimatedWidget</code>是一样的。</p></li><li><p>更好的性能：因为动画每一帧需要构建的 widget 的范围缩小了，如果没有<code>builder</code>，<code>setState()</code>将会在父组件上下文中调用，这将会导致父组件的<code>build</code>方法重新调用；而有了<code>builder</code>之后，只会导致动画widget自身的<code>build</code>重新调用，避免不必要的rebuild。</p></li><li><p>通过<code>AnimatedBuilder</code>可以封装常见的过渡效果来复用动画。下面我们通过封装一个<code>GrowTransition</code>来说明，它可以对子widget实现放大动画：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">GrowTransition</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">GrowTransition</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>\n        animation<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n            height<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n            width<span class="token punctuation">:</span> animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，最初的示例就可以改为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">GrowTransition</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;images/avatar.png&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    animation<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Flutter中正是通过这种方式封装了很多动画，如：FadeTransition、ScaleTransition、SizeTransition等，很多时候都可以复用这些预置的过渡类。</strong></p></li></ol><h2 id="_9-2-2-动画状态监听" tabindex="-1"><a class="header-anchor" href="#_9-2-2-动画状态监听" aria-hidden="true">#</a> 9.2.2 动画状态监听</h2><p>上面说过，我们可以通过<code>Animation</code>的<code>addStatusListener()</code>方法来添加动画状态改变监听器。Flutter中，有四种动画状态，在<code>AnimationStatus</code>枚举类中定义，下面我们逐个说明：</p><table><thead><tr><th>枚举值</th><th>含义</th></tr></thead><tbody><tr><td><code>dismissed</code></td><td>动画在起始点停止</td></tr><tr><td><code>forward</code></td><td>动画正在正向执行</td></tr><tr><td><code>reverse</code></td><td>动画正在反向执行</td></tr><tr><td><code>completed</code></td><td>动画在终点停止</td></tr></tbody></table><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><p>我们将上面图片放大的示例改为先放大再缩小再放大……这样的循环动画。要实现这种效果，我们只需要监听动画状态的改变即可，即：在动画正向执行结束时反转动画，在动画反向执行结束时再正向执行动画。代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n      duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n      vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//图片宽高从0变到300</span>\n    animation <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">300.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    animation<span class="token punctuation">.</span><span class="token function">addStatusListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>completed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//动画执行结束时反向执行动画</span>\n        controller<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>dismissed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//动画恢复到初始状态时执行动画（正向）</span>\n        controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//启动动画（正向）</span>\n    controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',26)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);