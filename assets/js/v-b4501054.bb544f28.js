"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[9540],{30231:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-b4501054","path":"/chapter11/download_with_chunks.html","title":"11.4 实例：Http分块下载","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"思考","slug":"思考","link":"#思考","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.32,"words":1595},"filePathRelative":"chapter11/download_with_chunks.md","localizedDate":"2022年6月6日","excerpt":""}')},81028:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const p=[(0,t.uE)('<h1 id="_11-4-实例-http分块下载" tabindex="-1"><a class="header-anchor" href="#_11-4-实例-http分块下载" aria-hidden="true">#</a> 11.4 实例：Http分块下载</h1><p>本节将通过一个“Http分块下载”的示例演示一下dio的具体用法。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>Http协议定义了分块传输的响应header字段，但具体是否支持取决于Server的实现，我们可以指定请求头的&quot;range&quot;字段来验证服务器是否支持分块传输。例如，我们可以利用curl命令来验证：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bogon:~ duwen$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Range: bytes=0-10&quot;</span> http://download.dcloud.net.cn/HBuilder.9.0.2.macosx_64.dmg <span class="token parameter variable">-v</span>\n<span class="token comment"># 请求头</span>\n<span class="token operator">&gt;</span> GET /HBuilder.9.0.2.macosx_64.dmg HTTP/1.1\n<span class="token operator">&gt;</span> Host: download.dcloud.net.cn\n<span class="token operator">&gt;</span> User-Agent: curl/7.54.0\n<span class="token operator">&gt;</span> Accept: */*\n<span class="token operator">&gt;</span> Range: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">0</span>-10\n<span class="token comment"># 响应头</span>\n<span class="token operator">&lt;</span> HTTP/1.1 <span class="token number">206</span> Partial Content\n<span class="token operator">&lt;</span> Content-Type: application/octet-stream\n<span class="token operator">&lt;</span> Content-Length: <span class="token number">11</span>\n<span class="token operator">&lt;</span> Connection: keep-alive\n<span class="token operator">&lt;</span> Date: Thu, <span class="token number">21</span> Feb <span class="token number">2019</span> 06:25:15 GMT\n<span class="token operator">&lt;</span> Content-Range: bytes <span class="token number">0</span>-10/233295878\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在请求头中添加&quot;Range: bytes=0-10&quot;的作用是，告诉服务器本次请求我们只想获取文件0-10(包括10，共11字节)这块内容。如果服务器支持分块传输，则响应状态码为206，表示“部分内容”，并且同时响应头中包含“Content-Range”字段，如果不支持则不会包含。我们看看上面“Content-Range”的内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Range: bytes 0-10/233295878\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>0-10表示本次返回的区块，233295878代表文件的总长度，单位都是byte, 也就是该文件大概233M多一点。</p><p>基于此，我们可以设计一个简单的多线程的文件分块下载器，实现的思路是：</p><ol><li>先检测是否支持分块传输，如果不支持，则直接下载；若支持，则将剩余内容分块下载。</li><li>各个分块下载时保存到各自临时文件，等到所有分块下载完后合并临时文件。</li><li>删除临时文件。</li></ol><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>下面是整体的流程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 通过第一个分块请求检测服务器是否支持分块传输  </span>\n<span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">downloadChunk</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstChunkSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">206</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果支持</span>\n    <span class="token comment">//解析文件总长度，进而算出剩余长度</span>\n    total <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>\n        response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>contentRangeHeader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int reserved <span class="token operator">=</span> total <span class="token operator">-</span>\n        int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>contentLengthHeader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//文件的总块数(包括第一块)</span>\n    int chunk <span class="token operator">=</span> <span class="token punctuation">(</span>reserved <span class="token operator">/</span> firstChunkSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        int chunkSize <span class="token operator">=</span> firstChunkSize<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">&gt;</span> maxChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            chunk <span class="token operator">=</span> maxChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            chunkSize <span class="token operator">=</span> <span class="token punctuation">(</span>reserved <span class="token operator">/</span> maxChunk<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">var</span> futures <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxChunk<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            int start <span class="token operator">=</span> firstChunkSize <span class="token operator">+</span> i <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>\n            <span class="token comment">//分块下载剩余文件  </span>\n            futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">downloadChunk</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//等待所有分块全部下载完成</span>\n        <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//合并文件文件  </span>\n    <span class="token keyword">await</span> <span class="token function">mergeTempFiles</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们使用dio的<code>download</code> API 实现<code>downloadChunk</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//start 代表当前块的起始位置，end代表结束位置</span>\n<span class="token comment">//no 代表当前是第几块</span>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">&gt;</span></span> <span class="token function">downloadChunk</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> no<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  progress<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//progress记录每一块已接收数据的长度</span>\n  <span class="token operator">--</span>end<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> dio<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>\n    url<span class="token punctuation">,</span>\n    savePath <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;temp</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">no</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token comment">//临时文件按照块的序号命名，方便最后合并</span>\n    onReceiveProgress<span class="token punctuation">:</span> <span class="token function">createCallback</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 创建进度回调，后面实现</span>\n    options<span class="token punctuation">:</span> <span class="token class-name">Options</span><span class="token punctuation">(</span>\n      headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;range&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;bytes=</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">start</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">end</span></span><span class="token string">&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//指定请求的内容区间</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来实现<code>mergeTempFiles</code>:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span> <span class="token function">mergeTempFiles</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>savePath <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;temp0&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">IOSink</span> ioSink<span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span>mode<span class="token punctuation">:</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>writeOnlyAppend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//合并临时文件  </span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunk<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">File</span> _f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>savePath <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;temp</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> ioSink<span class="token punctuation">.</span><span class="token function">addStream</span><span class="token punctuation">(</span>_f<span class="token punctuation">.</span><span class="token function">openRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> _f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除临时文件</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">await</span> ioSink<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> f<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>savePath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//合并后的文件重命名为真正的名称</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们看一下完整实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// Downloading by spiting as file in chunks</span>\n<span class="token class-name">Future</span> <span class="token function">downloadWithChunks</span><span class="token punctuation">(</span>\n  url<span class="token punctuation">,</span>\n  savePath<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token class-name">ProgressCallback</span> onReceiveProgress<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> firstChunkSize <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> maxChunk <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n  int total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> dio <span class="token operator">=</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> progress <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token function">createCallback</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>int received<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      progress<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> received<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>onReceiveProgress <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> total <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">onReceiveProgress</span><span class="token punctuation">(</span>progress<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">&gt;</span></span> <span class="token function">downloadChunk</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> no<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    progress<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">--</span>end<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> dio<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>\n      url<span class="token punctuation">,</span>\n      savePath <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;temp</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">no</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>\n      onReceiveProgress<span class="token punctuation">:</span> <span class="token function">createCallback</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token class-name">Options</span><span class="token punctuation">(</span>\n        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;range&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;bytes=</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">start</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">end</span></span><span class="token string">&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Future</span> <span class="token function">mergeTempFiles</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>savePath <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;temp0&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IOSink</span> ioSink<span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span>mode<span class="token punctuation">:</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>writeOnlyAppend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunk<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">File</span> _f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>savePath <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;temp</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">await</span> ioSink<span class="token punctuation">.</span><span class="token function">addStream</span><span class="token punctuation">(</span>_f<span class="token punctuation">.</span><span class="token function">openRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">await</span> _f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">await</span> ioSink<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> f<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>savePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">downloadChunk</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstChunkSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">206</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    total <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>\n        response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>contentRangeHeader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int reserved <span class="token operator">=</span> total <span class="token operator">-</span>\n        int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>contentLengthHeader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int chunk <span class="token operator">=</span> <span class="token punctuation">(</span>reserved <span class="token operator">/</span> firstChunkSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      int chunkSize <span class="token operator">=</span> firstChunkSize<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">&gt;</span> maxChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chunk <span class="token operator">=</span> maxChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        chunkSize <span class="token operator">=</span> <span class="token punctuation">(</span>reserved <span class="token operator">/</span> maxChunk<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> futures <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxChunk<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        int start <span class="token operator">=</span> firstChunkSize <span class="token operator">+</span> i <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>\n        futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">downloadChunk</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">await</span> <span class="token function">mergeTempFiles</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以进行分块下载了：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;http://download.dcloud.net.cn/HBuilder.9.0.2.macosx_64.dmg&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> savePath <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;./example/HBuilder.9.0.2.macosx_64.dmg&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">downloadWithChunks</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> savePath<span class="token punctuation">,</span> onReceiveProgress<span class="token punctuation">:</span> <span class="token punctuation">(</span>received<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression"><span class="token punctuation">(</span>received <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">%&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><ol><li><p>分块下载真的能提高下载速度吗？</p><p>其实下载速度的主要瓶颈是取决于网络速度和服务器的出口速度，如果是同一个数据源，分块下载的意义并不大，因为服务器是同一个，出口速度确定的，主要取决于网速，而上面的例子正式同源分块下载，读者可以自己对比一下分块和不分块的的下载速度。如果有多个下载源，并且每个下载源的出口带宽都是有限制的，这时分块下载可能会更快一下，之所以说“可能”，是由于这并不是一定的，比如有三个源，三个源的出口带宽都为1G/s，而我们设备所连网络的峰值假设只有800M/s，那么瓶颈就在我们的网络。即使我们设备的带宽大于任意一个源，下载速度依然不一定就比单源单线下载快，试想一下，假设有两个源A和B，速度A源是B源的3倍，如果采用分块下载，两个源各下载一半的话，读者可以算一下所需的下载时间，然后再算一下只从A源下载所需的时间，看看哪个更快。</p><p>分块下载的最终速度受设备所在网络带宽、源出口速度、每个块大小、以及分块的数量等诸多因素影响，实际过程中很难保证速度最优。在实际开发中，读者可可以先测试对比后再决定是否使用。</p></li><li><p>分块下载有什么实际的用处吗？</p><p>分块下载还有一个比较使用的场景是断点续传，可以将文件分为若干个块，然后维护一个下载状态文件用以记录每一个块的状态，这样即使在网络中断后，也可以恢复中断前的状态，具体实现读者可以自己尝试一下，还是有一些细节需要特别注意的，比如分块大小多少合适？下载到一半的块如何处理？要不要维护一个任务队列？</p></li></ol>',23)],e={},o=(0,a(18580).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);