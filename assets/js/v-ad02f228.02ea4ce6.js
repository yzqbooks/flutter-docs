"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[706],{38513:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-ad02f228","path":"/chapter2/thread_model_and_error_report.html","title":"2.8 Flutter异常捕获","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"2.8.1 Dart单线程模型","slug":"_2-8-1-dart单线程模型","link":"#_2-8-1-dart单线程模型","children":[]},{"level":2,"title":"2.8.2 Flutter异常捕获","slug":"_2-8-2-flutter异常捕获","link":"#_2-8-2-flutter异常捕获","children":[{"level":3,"title":"Flutter框架异常捕获","slug":"flutter框架异常捕获","link":"#flutter框架异常捕获","children":[]},{"level":3,"title":"其它异常捕获与日志收集","slug":"其它异常捕获与日志收集","link":"#其它异常捕获与日志收集","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.91,"words":1774},"filePathRelative":"chapter2/thread_model_and_error_report.md","localizedDate":"2022年6月6日","excerpt":""}')},64772:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const p=a.p+"assets/img/2-21.1d6c428f.png",e=[(0,t.uE)('<h1 id="_2-8-flutter异常捕获" tabindex="-1"><a class="header-anchor" href="#_2-8-flutter异常捕获" aria-hidden="true">#</a> 2.8 Flutter异常捕获</h1><p>在介绍Flutter异常捕获之前必须先了解一下Dart单线程模型，只有了解了Dart的代码执行流程，我们才能知道该在什么地方去捕获异常。</p><h2 id="_2-8-1-dart单线程模型" tabindex="-1"><a class="header-anchor" href="#_2-8-1-dart单线程模型" aria-hidden="true">#</a> 2.8.1 Dart单线程模型</h2><p>在 Java 和 Objective-C（以下简称“OC”）中，如果程序发生异常且没有被捕获，那么程序将会终止，但是这在Dart或JavaScript中则不会！究其原因，这和它们的运行机制有关系。Java 和 OC 都是多线程模型的编程语言，任意一个线程触发异常且该异常未被捕获时，就会导致整个进程退出。但 Dart 和 JavaScript 不会，它们都是单线程模型，运行机制很相似(但有区别)，下面我们通过Dart官方提供的一张图（2-21）来看看 Dart 大致运行原理：</p><p><img src="'+p+'" alt="图2-21"></p><p>Dart 在单线程中是以消息循环机制来运行的，其中包含两个任务队列，一个是“微任务队列” <strong>microtask queue</strong>，另一个叫做“事件队列” <strong>event queue</strong>。从图中可以发现，微任务队列的执行优先级高于事件队列。</p><p>现在我们来介绍一下Dart线程运行过程，如上图中所示，入口函数 main() 执行完后，消息循环机制便启动了。首先会按照先进先出的顺序逐个执行微任务队列中的任务，事件任务执行完毕后程序便会退出，但是，在事件任务执行的过程中也可以插入新的微任务和事件任务，在这种情况下，整个线程的执行过程便是一直在循环，不会退出，而Flutter中，主线程的执行过程正是如此，永不终止。</p><p>在Dart中，所有的外部事件任务都在事件队列中，如IO、计时器、点击、以及绘制事件等，而微任务通常来源于Dart内部，并且微任务非常少，之所以如此，是因为微任务队列优先级高，如果微任务太多，执行时间总和就越久，事件队列任务的延迟也就越久，对于GUI应用来说最直观的表现就是比较卡，所以必须得保证微任务队列不会太长。值得注意的是，我们可以通过<code>Future.microtask(…)</code>方法向微任务队列插入一个任务。</p><p>在事件循环中，当某个任务发生异常并没有被捕获时，程序并不会退出，而直接导致的结果是<strong>当前任务</strong>的后续代码就不会被执行了，也就是说一个任务中的异常是不会影响其它任务执行的。</p><h2 id="_2-8-2-flutter异常捕获" tabindex="-1"><a class="header-anchor" href="#_2-8-2-flutter异常捕获" aria-hidden="true">#</a> 2.8.2 Flutter异常捕获</h2><p>Dart中可以通过<code>try/catch/finally</code>来捕获代码块异常，这个和其它编程语言类似，如果读者不清楚，可以查看Dart语言文档，不再赘述，下面我们看看Flutter中的异常捕获。</p><h3 id="flutter框架异常捕获" tabindex="-1"><a class="header-anchor" href="#flutter框架异常捕获" aria-hidden="true">#</a> Flutter框架异常捕获</h3><p>Flutter 框架为我们在很多关键的方法进行了异常捕获。这里举一个例子，当我们布局发生越界或不合规范时，Flutter就会自动弹出一个错误界面，这是因为Flutter已经在执行build方法时添加了异常捕获，最终的源码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">performRebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">//执行build方法  </span>\n    built <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 有异常时则弹出错误提示  </span>\n    built <span class="token operator">=</span> <span class="token class-name">ErrorWidget</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token function">_debugReportException</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;building </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token keyword">this</span></span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>      \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在发生异常时，Flutter默认的处理方式是弹一个ErrorWidget，但如果我们想自己捕获异常并上报到报警平台的话应该怎么做？我们进入<code>_debugReportException()</code>方法看看：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FlutterErrorDetails</span> <span class="token function">_debugReportException</span><span class="token punctuation">(</span>\n  <span class="token class-name">String</span> context<span class="token punctuation">,</span>\n  <span class="token keyword">dynamic</span> exception<span class="token punctuation">,</span>\n  <span class="token class-name">StackTrace</span> stack<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token class-name">InformationCollector</span> informationCollector\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//构建错误详情对象  </span>\n  <span class="token keyword">final</span> <span class="token class-name">FlutterErrorDetails</span> details <span class="token operator">=</span> <span class="token class-name">FlutterErrorDetails</span><span class="token punctuation">(</span>\n    exception<span class="token punctuation">:</span> exception<span class="token punctuation">,</span>\n    stack<span class="token punctuation">:</span> stack<span class="token punctuation">,</span>\n    <span class="token keyword">library</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;widgets library&#39;</span></span><span class="token punctuation">,</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    informationCollector<span class="token punctuation">:</span> informationCollector<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//报告错误 </span>\n  <span class="token class-name">FlutterError</span><span class="token punctuation">.</span><span class="token function">reportError</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> details<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，错误是通过<code>FlutterError.reportError</code>方法上报的，继续跟踪：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reportError</span><span class="token punctuation">(</span><span class="token class-name">FlutterErrorDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>onError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token function">onError</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用了onError回调</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现<code>onError</code>是<code>FlutterError</code>的一个静态属性，它有一个默认的处理方法 <code>dumpErrorToConsole</code>，到这里就清晰了，如果我们想自己上报异常，只需要提供一个自定义的错误处理回调即可，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">FlutterError</span><span class="token punctuation">.</span>onError <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FlutterErrorDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">reportError</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以处理那些Flutter为我们捕获的异常了，接下来我们看看如何捕获其它异常。</p><h3 id="其它异常捕获与日志收集" tabindex="-1"><a class="header-anchor" href="#其它异常捕获与日志收集" aria-hidden="true">#</a> 其它异常捕获与日志收集</h3><p>在Flutter中，还有一些Flutter没有为我们捕获的异常，如调用空对象方法异常、Future中的异常。在Dart中，异常分两类：同步异常和异步异常，同步异常可以通过<code>try/catch</code>捕获，而异步异常则比较麻烦，如下面的代码是捕获不了<code>Future</code>的异常的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;xxx&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dart中有一个<code>runZoned(...)</code> 方法，可以给执行对象指定一个Zone。Zone表示一个代码执行的环境范围，为了方便理解，读者可以将Zone类比为一个代码执行沙箱，不同沙箱的之间是隔离的，沙箱可以捕获、拦截或修改一些代码行为，如Zone中可以捕获日志输出、Timer创建、微任务调度的行为，同时Zone也可以捕获所有未处理的异常。下面我们看看<code>runZoned(...)</code>方法定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">R</span> runZoned<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span> zoneValues<span class="token punctuation">,</span> \n    <span class="token class-name">ZoneSpecification</span> zoneSpecification<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>zoneValues</code>: Zone 的私有数据，可以通过实例<code>zone[key]</code>获取，可以理解为每个“沙箱”的私有数据。</p></li><li><p><code>zoneSpecification</code>：Zone的一些配置，可以自定义一些代码行为，比如拦截日志输出和错误等，举个例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">runZoned</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  zoneSpecification<span class="token punctuation">:</span> <span class="token class-name">ZoneSpecification</span><span class="token punctuation">(</span>\n    <span class="token comment">// 拦截print 蜀西湖</span>\n    print<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Zone</span> self<span class="token punctuation">,</span> <span class="token class-name">ZoneDelegate</span> parent<span class="token punctuation">,</span> <span class="token class-name">Zone</span> zone<span class="token punctuation">,</span> <span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      parent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Interceptor: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">line</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 拦截未处理的异步错误</span>\n    handleUncaughtError<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Zone</span> self<span class="token punctuation">,</span> <span class="token class-name">ZoneDelegate</span> parent<span class="token punctuation">,</span> <span class="token class-name">Zone</span> zone<span class="token punctuation">,</span>\n                          <span class="token class-name">Object</span> error<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      parent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">stackTrace</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，我们 APP 中所有调用<code>print</code>方法输出日志的行为都会被拦截，通过这种方式，我们也可以在应用中记录日志，等到应用触发未捕获的异常时，将异常信息和日志统一上报。</p><p>另外我们还拦截了未被捕获的异步错误，这样一来，结合上面的 <code>FlutterError.onError</code> 我们就可以捕获我们Flutter应用错误了并进行上报了！</p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>我们最终的异常捕获和上报代码大致如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">collectLog</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//收集日志</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">reportErrorAndLog</span><span class="token punctuation">(</span><span class="token class-name">FlutterErrorDetails</span> details<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//上报错误和日志逻辑</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">FlutterErrorDetails</span> <span class="token function">makeDetails</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stack<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 构建错误信息</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> onError <span class="token operator">=</span> <span class="token class-name">FlutterError</span><span class="token punctuation">.</span>onError<span class="token punctuation">;</span> <span class="token comment">//先将 onerror 保存起来</span>\n  <span class="token class-name">FlutterError</span><span class="token punctuation">.</span>onError <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FlutterErrorDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    onError<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用默认的onError</span>\n    <span class="token function">reportErrorAndLog</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//上报</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function">runZoned</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  zoneSpecification<span class="token punctuation">:</span> <span class="token class-name">ZoneSpecification</span><span class="token punctuation">(</span>\n    <span class="token comment">// 拦截print</span>\n    print<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Zone</span> self<span class="token punctuation">,</span> <span class="token class-name">ZoneDelegate</span> parent<span class="token punctuation">,</span> <span class="token class-name">Zone</span> zone<span class="token punctuation">,</span> <span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">collectLog</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      parent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Interceptor: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">line</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 拦截未处理的异步错误</span>\n    handleUncaughtError<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Zone</span> self<span class="token punctuation">,</span> <span class="token class-name">ZoneDelegate</span> parent<span class="token punctuation">,</span> <span class="token class-name">Zone</span> zone<span class="token punctuation">,</span>\n                          <span class="token class-name">Object</span> error<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">reportErrorAndLog</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      parent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">stackTrace</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',30)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);