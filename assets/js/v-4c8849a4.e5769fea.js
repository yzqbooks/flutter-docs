"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[1768],{49265:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-4c8849a4","path":"/chapter7/inherited_widget.html","title":"7.2 数据共享（InheritedWidget）","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"didChangeDependencies","slug":"didchangedependencies","link":"#didchangedependencies","children":[]},{"level":3,"title":"深入了解InheritedWidget","slug":"深入了解inheritedwidget","link":"#深入了解inheritedwidget","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.27,"words":1880},"filePathRelative":"chapter7/inherited_widget.md","localizedDate":"2022年6月6日","excerpt":""}')},25737:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6808);const t=a.p+"assets/img/7-1.9e788610.png",p=[(0,e.uE)('<h1 id="_7-2-数据共享-inheritedwidget" tabindex="-1"><a class="header-anchor" href="#_7-2-数据共享-inheritedwidget" aria-hidden="true">#</a> 7.2 数据共享（InheritedWidget）</h1><p><code>InheritedWidget </code>是 Flutter 中非常重要的一个功能型组件，它提供了一种在 widget 树中从上到下共享数据的方式，比如我们在应用的根 widget 中通过<code>InheritedWidget</code>共享了一个数据，那么我们便可以在任意子widget 中来获取该共享的数据！这个特性在一些需要在整个 widget 树中共享数据的场景中非常方便！如Flutter SDK中正是通过 InheritedWidget 来共享应用主题（<code>Theme</code>）和 Locale (当前语言环境)信息的。</p><blockquote><p><code>InheritedWidget</code>和 React 中的 context 功能类似，和逐级传递数据相比，它们能实现组件跨级传递数据。<code>InheritedWidget</code>的在 widget 树中数据传递方向是从上到下的，这和通知<code>Notification</code>（将在下一章中介绍）的传递方向正好相反。</p></blockquote><h3 id="didchangedependencies" tabindex="-1"><a class="header-anchor" href="#didchangedependencies" aria-hidden="true">#</a> didChangeDependencies</h3><p>在之前介绍<code>StatefulWidget</code>时，我们提到<code>State</code>对象有一个<code>didChangeDependencies</code>回调，它会在“依赖”发生变化时被Flutter 框架调用。而这个“依赖”指的就是子 widget 是否使用了父 widget 中<code>InheritedWidget</code>的数据！如果使用了，则代表子 widget 有依赖；如果没有使用则代表没有依赖。这种机制可以使子组件在所依赖的<code>InheritedWidget</code>变化时来更新自身！比如当主题、locale(语言)等发生变化时，依赖其的子 widget 的<code>didChangeDependencies</code>方法将会被调用。</p><p>下面我们看一下之前“计数器”示例应用程序的<code>InheritedWidget</code>版本。需要说明的是，本示例主要是为了演示<code>InheritedWidget</code>的功能特性，并不是计数器的推荐实现方式。</p><p>首先，我们通过继承<code>InheritedWidget</code>，将当前计数器点击次数保存在<code>ShareDataWidget</code>的<code>data</code>属性中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ShareDataWidget</span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">ShareDataWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> int data<span class="token punctuation">;</span> <span class="token comment">//需要在子树中共享的数据，保存点击次数</span>\n\n  <span class="token comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span>\n  <span class="token keyword">static</span> <span class="token class-name">ShareDataWidget</span><span class="token operator">?</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShareDataWidget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//该回调决定当data发生变化时，是否通知子树中依赖data的Widget重新build</span>\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">updateShouldNotify</span><span class="token punctuation">(</span><span class="token class-name">ShareDataWidget</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> old<span class="token punctuation">.</span>data <span class="token operator">!=</span> data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们实现一个子组件<code> _TestWidget</code>，在其<code>build</code>方法中引用<code>ShareDataWidget</code>中的数据。同时，在其<code>didChangeDependencies()</code> 回调中打印日志：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _TestWidget <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  __TestWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">__TestWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> __TestWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span>_TestWidget<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//使用InheritedWidget中的共享数据</span>\n    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">ShareDataWidget</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//父或祖先widget中的InheritedWidget改变(updateShouldNotify返回true)时会被调用。</span>\n    <span class="token comment">//如果build中没有依赖InheritedWidget，则此回调不会被调用。</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dependencies change&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们创建一个按钮，每点击一次，就将<code>ShareDataWidget</code>的值自增：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">InheritedWidgetTestRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _InheritedWidgetTestRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_InheritedWidgetTestRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _InheritedWidgetTestRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedWidgetTestRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  int count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>  <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">ShareDataWidget</span><span class="token punctuation">(</span> <span class="token comment">//使用ShareDataWidget</span>\n        data<span class="token punctuation">:</span> count<span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n          mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token function">_TestWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//子widget中依赖ShareDataWidget</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Increment&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token comment">//每点击一次，将count自增，然后重新build,ShareDataWidget的data将被更新  </span>\n              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后界面如图7-1所示：</p><p><img src="'+t+'" alt="图7-1"></p><p>每点击一次按钮，计数器就会自增，控制台就会打印一句日志：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter ( 8513): Dependencies change\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可见依赖发生变化后，其<code>didChangeDependencies()</code>会被调用。但是读者要注意，<strong>如果_TestWidget的build方法中没有使用ShareDataWidget的数据，那么它的<code>didChangeDependencies()</code>将不会被调用，因为它并没有依赖ShareDataWidget</strong>。例如，我们将<code>__TestWidgetState</code>代码改为下面这样，<code>didChangeDependencies()</code>将不会被调用:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> __TestWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span>_TestWidget<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用InheritedWidget中的共享数据</span>\n    <span class="token comment">// return Text(ShareDataWidget.of(context)!.data.toString());</span>\n     <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;text&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// build方法中没有依赖InheritedWidget，此回调不会被调用。</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dependencies change&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，我们将<code>build()</code>方法中依赖<code>ShareDataWidget</code>的代码注释掉了，然后返回一个固定<code>Text</code>，这样一来，当点击Increment按钮后，<code>ShareDataWidget</code>的<code>data</code>虽然发生变化，但由于<code>__TestWidgetState</code>并未依赖<code>ShareDataWidget</code>，所以<code>__TestWidgetState</code>的<code>didChangeDependencies</code>方法不会被调用。其实，这个机制很好理解，因为在数据发生变化时只对使用该数据的Widget更新是合理并且性能友好的。</p><blockquote><p>思考题：Flutter 框架是怎么知道子 widget 有没有依赖父级 InheritedWidget 的？</p></blockquote><h4 id="应该在didchangedependencies-中做什么" tabindex="-1"><a class="header-anchor" href="#应该在didchangedependencies-中做什么" aria-hidden="true">#</a> 应该在didChangeDependencies()中做什么？</h4><p>一般来说，子 widget 很少会重写此方法，因为在依赖改变后 Flutter 框架也都会调用<code>build()</code>方法重新构建组件树。但是，如果你需要在依赖改变后执行一些昂贵的操作，比如网络请求，这时最好的方式就是在此方法中执行，这样可以避免每次<code>build()</code>都执行这些昂贵操作。</p><h3 id="深入了解inheritedwidget" tabindex="-1"><a class="header-anchor" href="#深入了解inheritedwidget" aria-hidden="true">#</a> 深入了解InheritedWidget</h3><p>现在来思考一下，如果我们只想在<code>__TestWidgetState</code>中引用<code>ShareDataWidget</code>数据，但却不希望在<code>ShareDataWidget</code>发生变化时调用<code>__TestWidgetState</code>的<code>didChangeDependencies()</code>方法应该怎么办？其实答案很简单，我们只需要将<code>ShareDataWidget.of()</code>的实现改一下即可：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span>\n<span class="token keyword">static</span> <span class="token class-name">ShareDataWidget</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//return context.dependOnInheritedWidgetOfExactType&lt;ShareDataWidget&gt;();</span>\n  <span class="token keyword">return</span> context<span class="token punctuation">.</span>getElementForInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShareDataWidget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>widget<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>唯一的改动就是获取<code>ShareDataWidget</code>对象的方式，把<code>dependOnInheritedWidgetOfExactType()</code>方法换成了<code>context.getElementForInheritedWidgetOfExactType&lt;ShareDataWidget&gt;().widget</code>，那么他们到底有什么区别呢，我们看一下这两个方法的源码（实现代码在<code>Element</code>类中，<code>Context</code>和<code>Element</code>的关系我们将在后面专门介绍）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">InheritedElement</span> getElementForInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> <span class="token class-name">InheritedElement</span> ancestor <span class="token operator">=</span> _inheritedWidgets <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> _inheritedWidgets<span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> ancestor<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token metadata function">@override</span>\n<span class="token class-name">InheritedWidget</span> <span class="token function">dependOnInheritedWidgetOfExactType</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Object</span> aspect <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugCheckStateIsActiveForAncestorLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">InheritedElement</span> ancestor <span class="token operator">=</span> _inheritedWidgets <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> _inheritedWidgets<span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">//多出的部分</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ancestor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">dependOnInheritedElement</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">,</span> aspect<span class="token punctuation">:</span> aspect<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  _hadUnsatisfiedDependencies <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>dependOnInheritedWidgetOfExactType()</code> 比 <code>getElementForInheritedWidgetOfExactType()</code>多调了<code>dependOnInheritedElement</code>方法，<code>dependOnInheritedElement</code>源码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>\n  <span class="token class-name">InheritedWidget</span> <span class="token function">dependOnInheritedElement</span><span class="token punctuation">(</span><span class="token class-name">InheritedElement</span> ancestor<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token class-name">Object</span> aspect <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>ancestor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    _dependencies <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedElement</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    _dependencies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ancestor<span class="token punctuation">.</span><span class="token function">updateDependencies</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> aspect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ancestor<span class="token punctuation">.</span>widget<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>dependOnInheritedElement</code>方法中主要是注册了依赖关系！看到这里也就清晰了，<strong>调用<code>dependOnInheritedWidgetOfExactType()</code> 和 <code>getElementForInheritedWidgetOfExactType()</code>的区别就是前者会注册依赖关系，而后者不会</strong>，所以在调用<code>dependOnInheritedWidgetOfExactType()</code>时，<code>InheritedWidget</code>和依赖它的子孙组件关系便完成了注册，之后当<code>InheritedWidget</code>发生变化时，就会更新依赖它的子孙组件，也就是会调这些子孙组件的<code>didChangeDependencies()</code>方法和<code>build()</code>方法。而当调用的是 <code>getElementForInheritedWidgetOfExactType()</code>时，由于没有注册依赖关系，所以之后当<code>InheritedWidget</code>发生变化时，就不会更新相应的子孙Widget。</p><p>注意，如果将上面示例中<code>ShareDataWidget.of()</code>方法实现改成调用<code>getElementForInheritedWidgetOfExactType()</code>，运行示例后，点击&quot;Increment&quot;按钮，会发现<code>__TestWidgetState </code>的<code>didChangeDependencies()</code>方法确实不会再被调用，但是其<code>build()</code>仍然会被调用！造成这个的原因其实是，点击&quot;Increment&quot;按钮后，会调用<code>_InheritedWidgetTestRouteState</code>的<code>setState()</code>方法，此时会重新构建整个页面，由于示例中，<code>__TestWidget</code> 并没有任何缓存，所以它也都会被重新构建，所以也会调用<code>build()</code>方法。</p><p>那么，现在就带来了一个问题：实际上，我们只想更新子树中依赖了<code>ShareDataWidget</code>的组件，而现在只要调用<code>_InheritedWidgetTestRouteState</code>的<code>setState()</code>方法，所有子节点都会被重新build，这很没必要，那么有什么办法可以避免呢？答案是缓存！一个简单的做法就是通过封装一个<code>StatefulWidget</code>，将子Widget树缓存起来，具体做法下一节我们将通过实现一个<code>Provider</code> Widget 来演示如何缓存，以及如何利用<code>InheritedWidget</code> 来实现 Flutter 全局状态共享。</p>',32)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);