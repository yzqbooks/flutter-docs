"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[7851],{33830:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-a80e7ee6","path":"/chapter11/websocket.html","title":"11.5 使用WebSockets","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":3,"title":"1. 连接到WebSocket服务器","slug":"_1-连接到websocket服务器","link":"#_1-连接到websocket服务器","children":[]},{"level":3,"title":"2. 监听来自服务器的消息","slug":"_2-监听来自服务器的消息","link":"#_2-监听来自服务器的消息","children":[]},{"level":3,"title":"3. 将数据发送到服务器","slug":"_3-将数据发送到服务器","link":"#_3-将数据发送到服务器","children":[]},{"level":3,"title":"4. 关闭WebSocket连接","slug":"_4-关闭websocket连接","link":"#_4-关闭websocket连接","children":[]},{"level":3,"title":"完整的例子","slug":"完整的例子","link":"#完整的例子","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":4.54,"words":1361},"filePathRelative":"chapter11/websocket.md","localizedDate":"2022年6月6日","excerpt":""}')},98674:(n,s,a)=>{a.r(s),a.d(s,{default:()=>I});var t=a(6808);const e=(0,t._)("h1",{id:"_11-5-使用websockets",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_11-5-使用websockets","aria-hidden":"true"},"#"),(0,t.Uk)(" 11.5 使用WebSockets")],-1),p=(0,t._)("p",null,"Http协议是无状态的，只能由客户端主动发起，服务端再被动响应，服务端无法向客户端主动推送内容，并且一旦服务器响应结束，链接就会断开(见注解部分)，所以无法进行实时通信。WebSocket协议正是为解决客户端与服务端实时通信而产生的技术，现在已经被主流浏览器支持，所以对于Web开发者来说应该比较熟悉了，Flutter也提供了专门的包来支持WebSocket协议。",-1),c=(0,t._)("blockquote",null,[(0,t._)("p",null,"注意：Http协议中虽然可以通过keep-alive机制使服务器在响应结束后链接会保持一段时间，但最终还是会断开，keep-alive机制主要是用于避免在同一台服务器请求多个资源时频繁创建链接，它本质上是支持链接复用的技术，而并非用于实时通信，读者需要知道这两者的区别。")],-1),o=(0,t._)("p",null,"WebSocket协议本质上是一个基于tcp的协议，它是先通过HTTP协议发起一条特殊的http请求进行握手后，如果服务端支持WebSocket协议，则会进行协议升级。WebSocket会使用http协议握手后创建的tcp链接，和http协议不同的是，WebSocket的tcp链接是个长链接（不会断开），所以服务端与客户端就可以通过此TCP连接进行实时通信。有关WebSocket协议细节，读者可以看RFC文档，下面我们重点看看Flutter中如何使用WebSocket。",-1),l={href:"http://www.websocket.org/echo.html",target:"_blank",rel:"noopener noreferrer"},i=(0,t._)("h3",{id:"步骤",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#步骤","aria-hidden":"true"},"#"),(0,t.Uk)(" 步骤")],-1),u=(0,t._)("ol",null,[(0,t._)("li",null,"连接到WebSocket服务器。"),(0,t._)("li",null,"监听来自服务器的消息。"),(0,t._)("li",null,"将数据发送到服务器。"),(0,t._)("li",null,"关闭WebSocket连接。")],-1),k=(0,t._)("h3",{id:"_1-连接到websocket服务器",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_1-连接到websocket服务器","aria-hidden":"true"},"#"),(0,t.Uk)(" 1. 连接到WebSocket服务器")],-1),r={href:"https://pub.dartlang.org/packages/web_socket_channel",target:"_blank",rel:"noopener noreferrer"},d=(0,t._)("code",null,"WebSocketChannel",-1),v=(0,t.uE)('<p>在Flutter中，我们可以创建一个<code>WebSocketChannel</code>连接到一台服务器：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> channel <span class="token operator">=</span> <span class="token class-name">IOWebSocketChannel</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;ws://echo.websocket.org&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-监听来自服务器的消息" tabindex="-1"><a class="header-anchor" href="#_2-监听来自服务器的消息" aria-hidden="true">#</a> 2. 监听来自服务器的消息</h3><p>现在我们建立了连接，我们可以监听来自服务器的消息，在我们发送消息给测试服务器之后，它会返回相同的消息。</p>',4),m={href:"https://docs.flutter.io/flutter/widgets/StreamBuilder-class.html",target:"_blank",rel:"noopener noreferrer"},b=(0,t._)("code",null,"StreamBuilder",-1),h=(0,t.uE)('<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">StreamBuilder</span><span class="token punctuation">(</span>\n  stream<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>\n  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasData <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4>',2),g=(0,t._)("code",null,"WebSocketChannel",-1),_=(0,t._)("code",null,"Stream",-1),S=(0,t._)("code",null,"Stream",-1),f=(0,t._)("code",null,"dart:async",-1),w=(0,t._)("code",null,"Future",-1),W=(0,t._)("code",null,"Stream",-1),x={href:"https://docs.flutter.io/flutter/widgets/StreamBuilder-class.html",target:"_blank",rel:"noopener noreferrer"},y=(0,t._)("code",null,"StreamBuilder",-1),U=(0,t._)("code",null,"Stream",-1),C=(0,t.uE)('<h3 id="_3-将数据发送到服务器" tabindex="-1"><a class="header-anchor" href="#_3-将数据发送到服务器" aria-hidden="true">#</a> 3. 将数据发送到服务器</h3><p>为了将数据发送到服务器，我们会<code>add</code>消息给<code>WebSocketChannel</code>提供的sink。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1" aria-hidden="true">#</a> 工作原理</h4>',4),B=(0,t._)("code",null,"WebSocketChannel",-1),T={href:"https://docs.flutter.io/flutter/dart-async/StreamSink-class.html",target:"_blank",rel:"noopener noreferrer"},q=(0,t._)("code",null,"StreamSink",-1),E=(0,t.uE)('<p><code>StreamSink</code>类提供了给数据源同步或异步添加事件的一般方法。</p><h3 id="_4-关闭websocket连接" tabindex="-1"><a class="header-anchor" href="#_4-关闭websocket连接" aria-hidden="true">#</a> 4. 关闭WebSocket连接</h3><p>在我们使用<code>WebSocket</code>后，要关闭连接：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="完整的例子" tabindex="-1"><a class="header-anchor" href="#完整的例子" aria-hidden="true">#</a> 完整的例子</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:web_socket_channel/io.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">WebSocketRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _WebSocketRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_WebSocketRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _WebSocketRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">TextEditingController</span> _controller <span class="token operator">=</span> <span class="token class-name">TextEditingController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">IOWebSocketChannel</span> channel<span class="token punctuation">;</span>\n  <span class="token class-name">String</span> _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>\n\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//创建websocket连接</span>\n    channel <span class="token operator">=</span> <span class="token class-name">IOWebSocketChannel</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;ws://echo.websocket.org&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>\n      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;WebSocket(内容回显)&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      body<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n          crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">Form</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">TextFormField</span><span class="token punctuation">(</span>\n                controller<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span>\n                decoration<span class="token punctuation">:</span> <span class="token class-name">InputDecoration</span><span class="token punctuation">(</span>labelText<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Send a message&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">StreamBuilder</span><span class="token punctuation">(</span>\n              stream<span class="token punctuation">:</span> channel<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>\n              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//网络不通会走到这</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;网络不通...&quot;</span></span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;echo: &quot;</span></span><span class="token operator">+</span>snapshot<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n                  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>_text<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      floatingActionButton<span class="token punctuation">:</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span>\n        onPressed<span class="token punctuation">:</span> _sendMessage<span class="token punctuation">,</span>\n        tooltip<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Send message&#39;</span></span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>send<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_controller<span class="token punctuation">.</span>text<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>_controller<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子比较简单，不再赘述。我们现在思考一个问题，假如我们想通过WebSocket传输二进制数据应该怎么做（比如要从服务器接收一张图片）？我们发现<code>StreamBuilder</code>和<code>Stream</code>都没有指定接收类型的参数，并且在创建WebSocket链接时也没有相应的配置，貌似没有什么办法……其实很简单，要接收二进制数据仍然使用<code>StreamBuilder</code>，因为WebSocket中所有发送的数据使用帧的形式发送，而帧是有固定格式，每一个帧的数据类型都可以通过Opcode字段指定，它可以指定当前帧是文本类型还是二进制类型（还有其它类型），所以客户端在收到帧时就已经知道了其数据类型，所以flutter完全可以在收到数据后解析出正确的类型，所以就无需开发者去关心，当服务器传输的数据是指定为二进制时，<code>StreamBuilder</code>的<code>snapshot.data</code>的类型就是<code>List&lt;int&gt;</code>，是文本时，则为<code>String</code>。</p>',7),F={},I=(0,a(18580).Z)(F,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,p,c,o,(0,t._)("p",null,[(0,t.Uk)("在接下来例子中，我们将连接到由"),(0,t._)("a",l,[(0,t.Uk)("websocket.org提供的测试服务器"),(0,t.Wm)(a)]),(0,t.Uk)("。服务器将简单地返回我们发送给它的相同消息！")]),i,u,k,(0,t._)("p",null,[(0,t._)("a",r,[(0,t.Uk)("web_socket_channel"),(0,t.Wm)(a)]),(0,t.Uk)(" package 提供了我们需要连接到WebSocket服务器的工具。该package提供了一个"),d,(0,t.Uk)("允许我们既可以监听来自服务器的消息，又可以将消息发送到服务器的方法。")]),v,(0,t._)("p",null,[(0,t.Uk)("我们如何收取消息并显示它们？在这个例子中，我们将使用一个"),(0,t._)("a",m,[b,(0,t.Wm)(a)]),(0,t.Uk)(" 来监听新消息， 并用一个Text来显示它们。")]),h,(0,t._)("p",null,[g,(0,t.Uk)("提供了一个来自服务器的消息"),_,(0,t.Uk)(" 。该"),S,(0,t.Uk)("类是"),f,(0,t.Uk)("包中的一个基础类。它提供了一种方法来监听来自数据源的异步事件。与"),w,(0,t.Uk)("返回单个异步响应不同，"),W,(0,t.Uk)("类可以随着时间推移传递很多事件。该"),(0,t._)("a",x,[y,(0,t.Wm)(a)]),(0,t.Uk)(" 组件将连接到一个"),U,(0,t.Uk)("， 并在每次收到消息时通知Flutter重新构建界面。")]),C,(0,t._)("p",null,[B,(0,t.Uk)("提供了一个"),(0,t._)("a",T,[q,(0,t.Wm)(a)]),(0,t.Uk)("，它将消息发给服务器。")]),E])}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);