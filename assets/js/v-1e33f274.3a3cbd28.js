"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[2246],{6393:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-1e33f274","path":"/chapter9/animated_switcher.html","title":"9.6 动画切换组件（AnimatedSwitcher）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"9.6.1 AnimatedSwitcher","slug":"_9-6-1-animatedswitcher","link":"#_9-6-1-animatedswitcher","children":[{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"AnimatedSwitcher实现原理","slug":"animatedswitcher实现原理","link":"#animatedswitcher实现原理","children":[]}]},{"level":2,"title":"9.6.2 AnimatedSwitcher高级用法","slug":"_9-6-2-animatedswitcher高级用法","link":"#_9-6-2-animatedswitcher高级用法","children":[]},{"level":2,"title":"SlideTransitionX","slug":"slidetransitionx","link":"#slidetransitionx","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":7.71,"words":2314},"filePathRelative":"chapter9/animated_switcher.md","localizedDate":"2022年6月6日","excerpt":""}')},19097:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6808);const e=a.p+"assets/img/9-4.810eaa85.gif",p=a.p+"assets/img/9-5.dff51938.png",c=a.p+"assets/img/9-6.18b4d458.gif",o=[(0,t.uE)('<h1 id="_9-6-动画切换组件-animatedswitcher" tabindex="-1"><a class="header-anchor" href="#_9-6-动画切换组件-animatedswitcher" aria-hidden="true">#</a> 9.6 动画切换组件（AnimatedSwitcher）</h1><p>实际开发中，我们经常会遇到切换UI元素的场景，比如Tab切换、路由切换。为了增强用户体验，通常在切换时都会指定一个动画，以使切换过程显得平滑。Flutter SDK组件库中已经提供了一些常用的切换组件，如<code>PageView</code>、<code>TabView</code>等，但是，这些组件并不能覆盖全部的需求场景，为此，Flutter SDK中提供了一个<code>AnimatedSwitcher</code>组件，它定义了一种通用的UI切换抽象。</p><h2 id="_9-6-1-animatedswitcher" tabindex="-1"><a class="header-anchor" href="#_9-6-1-animatedswitcher" aria-hidden="true">#</a> 9.6.1 AnimatedSwitcher</h2><p><code>AnimatedSwitcher</code> 可以同时对其新、旧子元素添加显示、隐藏动画。也就是说在<code>AnimatedSwitcher</code>的子元素发生变化时，会对其旧元素和新元素做动画，我们先看看<code>AnimatedSwitcher</code> 的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  required <span class="token keyword">this</span><span class="token punctuation">.</span>duration<span class="token punctuation">,</span> <span class="token comment">// 新child显示动画时长</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>reverseDuration<span class="token punctuation">,</span><span class="token comment">// 旧child隐藏的动画时长</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>switchInCurve <span class="token operator">=</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>linear<span class="token punctuation">,</span> <span class="token comment">// 新child显示的动画曲线</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>switchOutCurve <span class="token operator">=</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>linear<span class="token punctuation">,</span><span class="token comment">// 旧child隐藏的动画曲线</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>transitionBuilder <span class="token operator">=</span> <span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">.</span>defaultTransitionBuilder<span class="token punctuation">,</span> <span class="token comment">// 动画构建器</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>layoutBuilder <span class="token operator">=</span> <span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">.</span>defaultLayoutBuilder<span class="token punctuation">,</span> <span class="token comment">//布局构建器</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code>AnimatedSwitcher</code>的 child 发生变化时（类型或 Key 不同），旧 child 会执行隐藏动画，新 child 会执行执行显示动画。究竟执行何种动画效果则由<code>transitionBuilder </code>参数决定，该参数接受一个<code>AnimatedSwitcherTransitionBuilder </code>类型的 builder，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">AnimatedSwitcherTransitionBuilder</span> <span class="token operator">=</span>\n  <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该<code>builder</code>在<code>AnimatedSwitcher</code>的child切换时会分别对新、旧child绑定动画：</p><ol><li>对旧child，绑定的动画会反向执行（reverse）</li><li>对新child，绑定的动画会正向指向（forward）</li></ol><p>这样一下，便实现了对新、旧child的动画绑定。<code>AnimatedSwitcher</code>的默认值是<code>AnimatedSwitcher.defaultTransitionBuilder</code> ：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">defaultTransitionBuilder</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>\n    opacity<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，返回了<code>FadeTransition</code>对象，也就是说默认情况，<code>AnimatedSwitcher</code>会对新旧child执行“渐隐”和“渐显”动画。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><p>下面我们看一个列子：实现一个计数器，然后在每一次自增的过程中，旧数字执行缩小动画隐藏，新数字执行放大动画显示，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">AnimatedSwitcherCounterRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> <span class="token class-name">AnimatedSwitcherCounterRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token metadata function">@override</span>\n   _AnimatedSwitcherCounterRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_AnimatedSwitcherCounterRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n\n <span class="token keyword">class</span> _AnimatedSwitcherCounterRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnimatedSwitcherCounterRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n   int _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n   <span class="token metadata function">@override</span>\n   <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n       child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n         mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n         children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n           <span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">(</span>\n             duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n             transitionBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n               <span class="token comment">//执行缩放动画</span>\n               <span class="token keyword">return</span> <span class="token class-name">ScaleTransition</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> child<span class="token punctuation">,</span> scale<span class="token punctuation">:</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token punctuation">}</span><span class="token punctuation">,</span>\n             child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n               <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_count</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span>\n               <span class="token comment">//显示指定key，不同的key会被认为是不同的Text，这样才能执行动画</span>\n               key<span class="token punctuation">:</span> <span class="token class-name">ValueKey</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_count<span class="token punctuation">)</span><span class="token punctuation">,</span>\n               style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>headline4<span class="token punctuation">,</span>\n             <span class="token punctuation">)</span><span class="token punctuation">,</span>\n           <span class="token punctuation">)</span><span class="token punctuation">,</span>\n           <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n             child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;+1&#39;</span></span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n             onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n               <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                 _count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token punctuation">}</span><span class="token punctuation">,</span>\n           <span class="token punctuation">)</span><span class="token punctuation">,</span>\n         <span class="token punctuation">]</span><span class="token punctuation">,</span>\n       <span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行示例代码，当点击“+1”按钮时，原先的数字会逐渐缩小直至隐藏，而新数字会逐渐放大，如图9-4所示：</p><p><img src="'+e+'" alt="图9-4"></p><p>上图是第一次点击“+1”按钮后，“0”正在逐渐缩小，而“1”逐渐放大。</p><blockquote><p>注意：AnimatedSwitcher的新旧child，如果类型相同，则Key必须不相等。</p></blockquote><h3 id="animatedswitcher实现原理" tabindex="-1"><a class="header-anchor" href="#animatedswitcher实现原理" aria-hidden="true">#</a> AnimatedSwitcher实现原理</h3><p>实际上，<code>AnimatedSwitcher</code>的实现原理是比较简单的，我们根据<code>AnimatedSwitcher</code>的使用方式也可以猜个大概。要想实现新旧 child 切换动画，只需要明确两个问题：</p><ol><li>动画执行的时机是什么时候？</li><li>如何对新旧child执行动画？</li></ol><p>从<code>AnimatedSwitcher</code>的使用方式我们可以看到：当child发生变化时（子 widget 的 key 或类型<strong>不</strong>同时则认为发生变化），则重新会重新执行<code>build</code>，然后动画开始执行。</p><p>我们可以通过继承 StatefulWidget 来实现<code>AnimatedSwitcher</code>，具体做法是在<code>didUpdateWidget</code> 回调中判断其新旧 child 是否发生变化，如果发生变化，则对旧 child 执行反向退场（reverse）动画，对新child执行正向（forward）入场动画即可。下面是<code>AnimatedSwitcher</code>实现的部分核心伪代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> _widget<span class="token punctuation">;</span> \n<span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">AnimatedSwitcher</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 检查新旧child是否发生变化(key和类型同时相等则返回true，认为没变化)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Widget</span><span class="token punctuation">.</span><span class="token function">canUpdate</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>child<span class="token punctuation">,</span> oldWidget<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// child没变化，...</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">//child发生了变化，构建一个Stack来分别给新旧child执行动画</span>\n   _widget<span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n      children<span class="token punctuation">:</span><span class="token punctuation">[</span>\n        <span class="token comment">//旧child应用FadeTransition</span>\n        <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>\n         opacity<span class="token punctuation">:</span> _controllerOldAnimation<span class="token punctuation">,</span>\n         child <span class="token punctuation">:</span> oldWidget<span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">//新child应用FadeTransition</span>\n        <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>\n         opacity<span class="token punctuation">:</span> _controllerNewAnimation<span class="token punctuation">,</span>\n         child <span class="token punctuation">:</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 给旧child执行反向退场动画</span>\n    _controllerOldAnimation<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//给新child执行正向入场动画</span>\n    _controllerNewAnimation<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//build方法</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _widget<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面伪代码展示了<code>AnimatedSwitcher</code>实现的核心逻辑，当然<code>AnimatedSwitcher</code>真正的实现比这个复杂，它可以自定义进退场过渡动画以及执行动画时的布局等。在此，我们删繁就简，通过伪代码形式让读者能够清楚看到主要的实现思路，具体的实现读者可以参考<code>AnimatedSwitcher</code>源码。</p><p>另外，Flutter SDK中还提供了一个<code>AnimatedCrossFade</code>组件，它也可以切换两个子元素，切换过程执行渐隐渐显的动画，和<code>AnimatedSwitcher</code>不同的是<code>AnimatedCrossFade</code>是针对两个子元素，而<code>AnimatedSwitcher</code>是在一个子元素的新旧值之间切换。<code>AnimatedCrossFade</code>实现原理也比较简单，和<code>AnimatedSwitcher</code>类似，因此不再赘述，读者有兴趣可以查看其源码。</p><h2 id="_9-6-2-animatedswitcher高级用法" tabindex="-1"><a class="header-anchor" href="#_9-6-2-animatedswitcher高级用法" aria-hidden="true">#</a> 9.6.2 AnimatedSwitcher高级用法</h2><p>假设现在我们想实现一个类似路由平移切换的动画：旧页面屏幕中向左侧平移退出，新页面从屏幕右侧平移进入。如果要用AnimatedSwitcher的话，我们很快就会发现一个问题：做不到！我们可能会写出下面的代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">(</span>\n  duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  transitionBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Offset</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n     <span class="token keyword">return</span> <span class="token class-name">SlideTransition</span><span class="token punctuation">(</span>\n       child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n       position<span class="token punctuation">:</span> tween<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码有什么问题呢？我们前面说过在<code>AnimatedSwitcher</code>的 child 切换时会对新child执行正向动画（forward），而对旧child执行反向动画（reverse），所以真正的效果便是：新 child 确实从屏幕右侧平移进入了，但旧child却会从屏幕<strong>右侧</strong>（而不是左侧）退出。其实也很容易理解，因为在没有特殊处理的情况下，同一个动画的正向和逆向正好是相反（对称）的。</p><p>那么问题来了，难道就不能使用<code>AnimatedSwitcher</code>了？答案当然是否定的！仔细想想这个问题，究其原因，就是因为同一个<code>Animation</code>正向（forward）和反向（reverse）是对称的。所以如果我们可以打破这种对称性，那么便可以实现这个功能了，下面我们来封装一个<code>MySlideTransition</code>，它与<code>SlideTransition</code>唯一的不同就是对动画的反向执行进行了定制（从左边滑出隐藏），代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MySlideTransition</span> <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">MySlideTransition</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Offset</span><span class="token punctuation">&gt;</span></span> position<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>transformHitTests <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> listenable<span class="token punctuation">:</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> bool transformHitTests<span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span> child<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> position <span class="token operator">=</span> listenable <span class="token operator">as</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Offset</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n    <span class="token class-name">Offset</span> offset <span class="token operator">=</span> position<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      offset <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span>offset<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> offset<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token class-name">FractionalTranslation</span><span class="token punctuation">(</span>\n      translation<span class="token punctuation">:</span> offset<span class="token punctuation">,</span>\n      transformHitTests<span class="token punctuation">:</span> transformHitTests<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用时，将<code>SlideTransition</code>替换成<code>MySlideTransition </code>即可：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">(</span>\n  duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  transitionBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tween<span class="token operator">=</span><span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Offset</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n     <span class="token keyword">return</span> <span class="token class-name">MySlideTransition</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n      position<span class="token punctuation">:</span> tween<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，我截取动画执行过程中的一帧，如图9-5所示：</p><p><img src="'+p+'" alt="图9-5"></p><p>上图中“0”从左侧滑出，而“1”从右侧滑入。可以看到，我们通过这种巧妙的方式实现了类似路由进场切换的动画，实际上Flutter路由切换也正是通过<code>AnimatedSwitcher</code>来实现的。</p><h2 id="slidetransitionx" tabindex="-1"><a class="header-anchor" href="#slidetransitionx" aria-hidden="true">#</a> SlideTransitionX</h2><p>上面的示例我们实现了“左出右入”的动画，那如果要实现“左入右出”、“上入下出”或者 “下入上出”怎么办？当然，我们可以分别修改上面的代码，但是这样每种动画都得单独定义一个“Transition”，这很麻烦。本节将封装一个通用的<code>SlideTransitionX</code> 来实现这种“出入动画”，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SlideTransitionX</span> <span class="token keyword">extends</span> <span class="token class-name">AnimatedWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">SlideTransitionX</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> position<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>transformHitTests <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> listenable<span class="token punctuation">:</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>up<span class="token punctuation">:</span>\n        _tween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>right<span class="token punctuation">:</span>\n        _tween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">:</span>\n        _tween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>\n        _tween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">final</span> bool transformHitTests<span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span> child<span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">AxisDirection</span> direction<span class="token punctuation">;</span>\n\n  late <span class="token keyword">final</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Offset</span><span class="token punctuation">&gt;</span></span> _tween<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> position <span class="token operator">=</span> listenable <span class="token operator">as</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n    <span class="token class-name">Offset</span> offset <span class="token operator">=</span> _tween<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">switch</span> <span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>up<span class="token punctuation">:</span>\n          offset <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>offset<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> <span class="token operator">-</span>offset<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>right<span class="token punctuation">:</span>\n          offset <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span>offset<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> offset<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">:</span>\n          offset <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>offset<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> <span class="token operator">-</span>offset<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>\n          offset <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span>offset<span class="token punctuation">.</span>dx<span class="token punctuation">,</span> offset<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token class-name">FractionalTranslation</span><span class="token punctuation">(</span>\n      translation<span class="token punctuation">:</span> offset<span class="token punctuation">,</span>\n      transformHitTests<span class="token punctuation">:</span> transformHitTests<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在如果我们想实现各种“滑动出入动画”便非常容易，只需给<code>direction </code>传递不同的方向值即可，比如要实现“上入下出”，则：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AnimatedSwitcher</span><span class="token punctuation">(</span>\n  duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  transitionBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tween<span class="token operator">=</span><span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Offset</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n     <span class="token keyword">return</span> <span class="token class-name">SlideTransitionX</span><span class="token punctuation">(</span>\n       child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n       direction<span class="token punctuation">:</span> <span class="token class-name">AxisDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">,</span> <span class="token comment">//上入下出</span>\n       position<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略其余代码</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后如图9-6所示：</p><p><img src="'+c+'" alt="图9-6"></p><p>上图中“0”从底部滑出，而“1”从顶部滑入。读者可以尝试给<code>SlideTransitionX</code>的<code>direction</code>取不同的值来查看运行效果。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节我们学习了<code>AnimatedSwitcher</code>的详细用法，同时也介绍了打破<code>AnimatedSwitcher</code>动画对称性的方法。我们可以发现：在需要切换新旧UI元素的场景，<code>AnimatedSwitcher</code>将十分实用。</p>',48)],i={},l=(0,a(18580).Z)(i,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);