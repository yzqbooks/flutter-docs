"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[1762],{18591:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-a12e1f9e","path":"/chapter10/watermark.html","title":"10.8 水印实例: 文本绘制与离屏渲染","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"10.8.1 水印组件WaterMark","slug":"_10-8-1-水印组件watermark","link":"#_10-8-1-水印组件watermark","children":[{"level":3,"title":"离屏绘制","slug":"离屏绘制","link":"#离屏绘制","children":[]}]},{"level":2,"title":"10.8.2 单元水印画笔","slug":"_10-8-2-单元水印画笔","link":"#_10-8-2-单元水印画笔","children":[]},{"level":2,"title":"10.8.3 文本水印画笔","slug":"_10-8-3-文本水印画笔","link":"#_10-8-3-文本水印画笔","children":[{"level":3,"title":"绘制文本","slug":"绘制文本","link":"#绘制文本","children":[]},{"level":3,"title":"应用旋转和 padding","slug":"应用旋转和-padding","link":"#应用旋转和-padding","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"10.8.4 单元水印画笔—交错文本水印","slug":"_10-8-4-单元水印画笔—交错文本水印","link":"#_10-8-4-单元水印画笔—交错文本水印","children":[{"level":3,"title":"测试","slug":"测试-1","link":"#测试-1","children":[]}]},{"level":2,"title":"10.8.5 对水印应用偏移","slug":"_10-8-5-对水印应用偏移","link":"#_10-8-5-对水印应用偏移","children":[{"level":3,"title":"方案一：使用可滚动组件来应用偏移","slug":"方案一-使用可滚动组件来应用偏移","link":"#方案一-使用可滚动组件来应用偏移","children":[]},{"level":3,"title":"方案二：使用 FittedBox 来应用偏移","slug":"方案二-使用-fittedbox-来应用偏移","link":"#方案二-使用-fittedbox-来应用偏移","children":[]},{"level":3,"title":"方案三：使用 OverflowBox 来应用偏移","slug":"方案三-使用-overflowbox-来应用偏移","link":"#方案三-使用-overflowbox-来应用偏移","children":[]}]},{"level":2,"title":"10.8.6 总结","slug":"_10-8-6-总结","link":"#_10-8-6-总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":19.39,"words":5818},"filePathRelative":"chapter10/watermark.md","localizedDate":"2022年6月6日","excerpt":""}')},1399:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(6808);const p=a.p+"assets/img/10-9.fd123bc3.png",e=a.p+"assets/img/10-10.860cbd4c.png",c=a.p+"assets/img/10-11.4d95468d.png",o=a.p+"assets/img/10-12.5977d248.png",i=a.p+"assets/img/10-13.621c0799.png",l=a.p+"assets/img/10-14.730a642b.png",u=a.p+"assets/img/10-15.2116805c.png",k=a.p+"assets/img/10-16.b2a33e81.png",r=[(0,t.uE)('<h1 id="_10-8-水印实例-文本绘制与离屏渲染" tabindex="-1"><a class="header-anchor" href="#_10-8-水印实例-文本绘制与离屏渲染" aria-hidden="true">#</a> 10.8 水印实例: 文本绘制与离屏渲染</h1><p>本节将通过实现一个水印组件来介绍一下如何绘制文本以及如何进行离屏渲染。</p><p>在实际场景中，大多数情况下水印是要铺满整个屏幕的，如果不需要铺满屏幕，通常直接用组件组合即可实现，本节我们主要讨论的是需要铺满屏幕的水印。</p><h2 id="_10-8-1-水印组件watermark" tabindex="-1"><a class="header-anchor" href="#_10-8-1-水印组件watermark" aria-hidden="true">#</a> 10.8.1 水印组件WaterMark</h2><p>我们可以通过绘制一个“单元水印”，然后让它在整个水印组件的背景中重复即可实现我们期望的功能，因此我们可以直接使用 DecoratedBox ，它拥有背景图重复功能。重复的问题解决后，那么主要的问题便是如何绘制单元水印，为了灵活好扩展，我们定义一个水印画笔接口，这样一来我们可以预置一些常用的画笔实现来满足大多数场景，同时如果开发者有自定义需求的话也可以通过自定义画笔来实现。</p><p>下面是水印组件 WaterMark 的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">WaterMark</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">WaterMark</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>repeat <span class="token operator">=</span> <span class="token class-name">ImageRepeat</span><span class="token punctuation">.</span>repeat<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>painter<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">/// 单元水印画笔</span>\n  <span class="token keyword">final</span> <span class="token class-name">WaterMarkPainter</span> painter<span class="token punctuation">;</span>\n\n  <span class="token comment">/// 单元水印的重复方式</span>\n  <span class="token keyword">final</span> <span class="token class-name">ImageRepeat</span> repeat<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterMark</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_WaterMarkState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面看一下 State 实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _WaterMarkState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterMark</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  late <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemoryImage</span><span class="token punctuation">&gt;</span></span> _memoryImageFuture<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 缓存的是promise</span>\n    _memoryImageFuture <span class="token operator">=</span> <span class="token function">_getWaterMarkImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span> <span class="token comment">// 水印尽可能大</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">FutureBuilder</span><span class="token punctuation">(</span>\n        future<span class="token punctuation">:</span> _memoryImageFuture<span class="token punctuation">,</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState <span class="token operator">!=</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 如果单元水印还没有绘制好先返回一个空的Container</span>\n            <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 如果单元水印已经绘制好，则渲染水印</span>\n            <span class="token keyword">return</span> <span class="token class-name">DecoratedBox</span><span class="token punctuation">(</span>\n              decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>\n                image<span class="token punctuation">:</span> <span class="token class-name">DecorationImage</span><span class="token punctuation">(</span>\n                  image<span class="token punctuation">:</span> snapshot<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token comment">// 背景图，即我们绘制的单元水印图片</span>\n                  repeat<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>repeat<span class="token punctuation">,</span> <span class="token comment">// 指定重复方式</span>\n                  alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topLeft<span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">WaterMark</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//待实现</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 离屏绘制单元水印并将绘制结果转为图片缓存起来</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemoryImage</span><span class="token punctuation">&gt;</span></span> <span class="token function">_getWaterMarkImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//待实现</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 待实现</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过 DecoratedBox 来实现背景图重复，同时我们在组件初始化时开始进行离屏绘制单元水印，并将结果缓存在 MemoryImage 中，因为离屏绘制是一个异步任务，所以直接缓存 Future 即可。这里需要注意，当组件重新build时，如果画笔配置发生变化，则我们需要重新绘制单元水印并缓存新的绘制结果：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">WaterMark</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token comment">// 如果画笔发生了变化（类型或者配置）则重新绘制水印</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>painter<span class="token punctuation">.</span>runtimeType <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>painter<span class="token punctuation">.</span>runtimeType <span class="token operator">||</span>\n        widget<span class="token punctuation">.</span>painter<span class="token punctuation">.</span><span class="token function">shouldRepaint</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">.</span>painter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//先释放之前的缓存</span>\n      _memoryImageFuture<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> value<span class="token punctuation">.</span><span class="token function">evict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//重新绘制并缓存</span>\n      _memoryImageFuture <span class="token operator">=</span> <span class="token function">_getWaterMarkImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在重新绘制单元水印之前要先将旧单元水印的缓存清理掉，清理缓存可以通过调用 MemoryImage 的 evict 方法。同时，当组件卸载时，我们也要释放缓存：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//释放图片缓存</span>\n    _memoryImageFuture<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> value<span class="token punctuation">.</span><span class="token function">evict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就需要重新绘制单元水印了，调用 <code>_getWaterMarkImage() </code> 方法即可，该方法的功能是离屏绘制单元水印并将绘制结果转为图片缓存起来，下面我们看一下它的实现。</p><h3 id="离屏绘制" tabindex="-1"><a class="header-anchor" href="#离屏绘制" aria-hidden="true">#</a> 离屏绘制</h3><p>离屏绘制的代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 离屏绘制单元水印并将绘制结果保存为图片缓存起来</span>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemoryImage</span><span class="token punctuation">&gt;</span></span> <span class="token function">_getWaterMarkImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个 Canvas 进行离屏绘制，细节和原理请查看本书后面关于Flutter绘制原理相关章节</span>\n  <span class="token keyword">final</span> recorder <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>PictureRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> canvas <span class="token operator">=</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>recorder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 绘制单元水印并获取其大小</span>\n  <span class="token keyword">final</span> <span class="token class-name">Size</span> size <span class="token operator">=</span> widget<span class="token punctuation">.</span>painter<span class="token punctuation">.</span><span class="token function">paintUnit</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> picture <span class="token operator">=</span> recorder<span class="token punctuation">.</span><span class="token function">endRecording</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//将单元水印导为图片并缓存起来</span>\n  <span class="token keyword">final</span> img <span class="token operator">=</span> <span class="token keyword">await</span> picture<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>width<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">.</span>height<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> byteData <span class="token operator">=</span> <span class="token keyword">await</span> img<span class="token punctuation">.</span><span class="token function">toByteData</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>ImageByteFormat</span><span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> pngBytes <span class="token operator">=</span> byteData<span class="token operator">!</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">asUint8List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token class-name">MemoryImage</span><span class="token punctuation">(</span>pngBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过手动创建了一个 Canvas 和一个 PictureRecorder 来实现离屏绘制，PictureRecorder 的功能先简单介绍一下，我们会在本书后面绘制原理相关章节详细介绍，简单来说：调用 Canvas API 后，实际上产生的是一系列绘制指令，这些绘制指令执行后才能获取绘制结果，而PictureRecorder 就是一个绘制指令记录器，它可以记录一段时间内所有绘制指令，我们可以通过调用 <code>recorder.endRecording()</code> 方法来获取记录的绘制指令，该方法返回一个 Picture 对象，它是绘制指令的载体，它有一个 toImage 方法，调用后会执行绘制指令获得绘制的像素结果（ui.Image 对象），之后我们就可以将像素结果转为 png 格式的数据并缓存在MemoryImage 中。</p><h2 id="_10-8-2-单元水印画笔" tabindex="-1"><a class="header-anchor" href="#_10-8-2-单元水印画笔" aria-hidden="true">#</a> 10.8.2 单元水印画笔</h2><p>现在我们看一下如何绘制单元水印，我们先看一下水印画笔接口的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 定义水印画笔</span>\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WaterMarkPainter</span> <span class="token punctuation">{</span>\n  <span class="token comment">/// 绘制&quot;单元水印&quot;，完整的水印是由单元水印重复平铺组成,返回值为&quot;单元水印&quot;占用空间的大小。</span>\n  <span class="token comment">/// [devicePixelRatio]: 因为最终要将绘制内容保存为图片，所以在绘制时需要根据屏幕的</span>\n  <span class="token comment">/// DPR来放大，以防止失真</span>\n  <span class="token class-name">Size</span> <span class="token function">paintUnit</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> double devicePixelRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">/// 是否需要重绘</span>\n  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">WaterMarkPainter</span> oldPainter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义很简单，就两个函数：</p><ul><li>paintUnit 用于绘制单元水印，这里需要注意一点，因为很多 UI 元素的大小只能在绘制时获取，无法提前知道大小，所以 <code>paintUnit</code> 在完成绘制单元水印任务的同时，最后得返回单元水印的大小信息，它在导为图片时要用到。</li><li>shouldRepaint：当画笔状态发生变化且会影响单元水印的外观时返回 true，否则返回 false，返回 true 后重绘单元水印。它是在 _WaterMarkState 的 didUpdateWidget 方法中调用，读者可以结合源码理解。</li></ul><h2 id="_10-8-3-文本水印画笔" tabindex="-1"><a class="header-anchor" href="#_10-8-3-文本水印画笔" aria-hidden="true">#</a> 10.8.3 文本水印画笔</h2><p>下面我们实现一个文本水印画笔，它可以绘制一段文本，我们可以指定文本的样式和旋转角度。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 文本水印画笔</span>\n<span class="token keyword">class</span> <span class="token class-name">TextWaterMarkPainter</span> <span class="token keyword">extends</span> <span class="token class-name">WaterMarkPainter</span> <span class="token punctuation">{</span>\n  <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    double<span class="token operator">?</span> rotate<span class="token punctuation">,</span>\n    <span class="token class-name">EdgeInsets</span><span class="token operator">?</span> padding<span class="token punctuation">,</span>\n    <span class="token class-name">TextStyle</span><span class="token operator">?</span> textStyle<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>rotate <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rotate <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token operator">&amp;&amp;</span> rotate <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        rotate <span class="token operator">=</span> rotate <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        padding <span class="token operator">=</span> padding <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        textStyle <span class="token operator">=</span> textStyle <span class="token operator">?</span><span class="token operator">?</span>\n            <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n              color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">fromARGB</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  double rotate<span class="token punctuation">;</span> <span class="token comment">// 文本旋转的度数，是角度不是弧度</span>\n  <span class="token class-name">TextStyle</span> textStyle<span class="token punctuation">;</span> <span class="token comment">// 文本样式</span>\n  <span class="token class-name">EdgeInsets</span> padding<span class="token punctuation">;</span> <span class="token comment">// 文本的 padding</span>\n  <span class="token class-name">String</span> text<span class="token punctuation">;</span> <span class="token comment">// 文本</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Size</span> <span class="token function">paintUnit</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span>double devicePixelRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 1. 先绘制文本</span>\n   <span class="token comment">// 2. 应用旋转和padding </span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">TextWaterMarkPainter</span> oldPainter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 待实现</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>paintUnit 的绘制分两步：</p><ol><li>绘制文本</li><li>应用旋转和padding</li></ol><h3 id="绘制文本" tabindex="-1"><a class="header-anchor" href="#绘制文本" aria-hidden="true">#</a> 绘制文本</h3><p>文本的绘制三步：</p><ol><li>创建一个 ParagraphBuilder，记为 builder。</li><li>调用 builder.add 添加要绘制的字符串。</li><li>构建文本并进行 layout，因为在 layout 后才能知道文本所占用的空间。</li><li>调用 canvas.drawParagraph 绘制。</li></ol><p>具体代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ui&#39;</span></span> <span class="token operator">as</span> ui<span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n <span class="token metadata function">@override</span>\n  <span class="token class-name">Size</span> <span class="token function">paintUnit</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span>double devicePixelRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//根据屏幕 devicePixelRatio 对文本样式中长度相关的一些值乘以devicePixelRatio</span>\n    <span class="token keyword">final</span> _textStyle <span class="token operator">=</span> <span class="token function">_handleTextStyle</span><span class="token punctuation">(</span>textStyle<span class="token punctuation">,</span> devicePixelRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> _padding <span class="token operator">=</span> padding <span class="token operator">*</span> devicePixelRatio<span class="token punctuation">;</span>\n  \n    <span class="token comment">//构建文本段落</span>\n    <span class="token keyword">final</span> builder <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>ParagraphBuilder</span><span class="token punctuation">(</span>_textStyle<span class="token punctuation">.</span><span class="token function">getParagraphStyle</span><span class="token punctuation">(</span>\n      textDirection<span class="token punctuation">:</span> textDirection<span class="token punctuation">,</span>\n      textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n      textScaleFactor<span class="token punctuation">:</span> devicePixelRatio<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//添加要绘制的文本及样式</span>\n    builder\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">pushStyle</span><span class="token punctuation">(</span>_textStyle<span class="token punctuation">.</span><span class="token function">getTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// textStyle 为 ui.TextStyle</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//layout 后我们才能知道文本占用的空间</span>\n    <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Paragraph</span> paragraph <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>ParagraphConstraints</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//文本占用的真实宽度</span>\n    <span class="token keyword">final</span> textWidth <span class="token operator">=</span> paragraph<span class="token punctuation">.</span>longestLine<span class="token punctuation">.</span><span class="token function">ceilToDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//文本占用的真实高度</span>\n    <span class="token keyword">final</span> fontSize <span class="token operator">=</span> paragraph<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    \n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略应用旋转和 padding 的相关代码</span>\n\n    <span class="token comment">//绘制文本</span>\n    canvas<span class="token punctuation">.</span><span class="token function">drawParagraph</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">,</span> <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">TextStyle</span> <span class="token function">_handleTextStyle</span><span class="token punctuation">(</span>double devicePixelRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> style <span class="token operator">=</span> textStyle<span class="token punctuation">;</span>\n    double <span class="token function">_scale</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> attr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">1.0</span> <span class="token punctuation">:</span> devicePixelRatio<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> style<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n      decorationThicknessFactor<span class="token punctuation">:</span> <span class="token function">_scale</span><span class="token punctuation">(</span>style<span class="token punctuation">.</span>decorationThickness<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      letterSpacingFactor<span class="token punctuation">:</span> <span class="token function">_scale</span><span class="token punctuation">(</span>style<span class="token punctuation">.</span>letterSpacing<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      wordSpacingFactor<span class="token punctuation">:</span> <span class="token function">_scale</span><span class="token punctuation">(</span>style<span class="token punctuation">.</span>wordSpacing<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      heightFactor<span class="token punctuation">:</span> <span class="token function">_scale</span><span class="token punctuation">(</span>style<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到绘制文本的过程还是比较复杂的，为此 Flutter 提供了一个专门用于绘制文本的画笔 TextPainter，我们用 TextPainter 改造上面代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//构建文本画笔</span>\n<span class="token class-name">TextPainter</span> painter <span class="token operator">=</span> <span class="token class-name">TextPainter</span><span class="token punctuation">(</span>\n  textDirection<span class="token punctuation">:</span> <span class="token class-name">TextDirection</span><span class="token punctuation">.</span>ltr<span class="token punctuation">,</span>\n  textScaleFactor<span class="token punctuation">:</span> devicePixelRatio<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//添加文本和样式</span>\npainter<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token class-name">TextSpan</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">,</span> style<span class="token punctuation">:</span> _textStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//对文本进行布局</span>\npainter<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//文本占用的真实宽度</span>\n<span class="token keyword">final</span> textWidth <span class="token operator">=</span> painter<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n<span class="token comment">//文本占用的真实高度</span>\n<span class="token keyword">final</span> textHeight <span class="token operator">=</span> painter<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略应用旋转和 padding 的相关代码</span>\n   \n<span class="token comment">// 绘制文本</span>\npainter<span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，代码实际上少不了多少，但是清晰了一些。</p><p>另外 TextPainter 在实战中还有一个用处就是我们想提前知道 Text 组件的宽高时，可以通过 TextPainter 来提前测量，比如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">Widget</span> <span class="token function">wTextPainterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 我们想提前知道 Text 组件的大小</span>\n    <span class="token class-name">Text</span> text <span class="token operator">=</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;flutter@wendux&#39;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使用 TextPainter 来测量</span>\n    <span class="token class-name">TextPainter</span> painter <span class="token operator">=</span> <span class="token class-name">TextPainter</span><span class="token punctuation">(</span>textDirection<span class="token punctuation">:</span> <span class="token class-name">TextDirection</span><span class="token punctuation">.</span>ltr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 将 Text 组件文本和样式透传给TextPainter</span>\n    painter<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token class-name">TextSpan</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">.</span>data<span class="token punctuation">,</span>style<span class="token punctuation">:</span>text<span class="token punctuation">.</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 开始布局测量，调用 layout 后就能获取文本大小了</span>\n    painter<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 自定义组件 AfterLayout 可以在布局结束后获取子组件的大小，我们用它来验证一下</span>\n    <span class="token comment">// TextPainter 测量的宽高是否正确</span>\n    <span class="token keyword">return</span> <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n      callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 输出日志</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;text size(painter): </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">painter<span class="token punctuation">.</span>size</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;text size(after layout): </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">value<span class="token punctuation">.</span>size</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> text<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后如图10-9：</p><p><img src="'+p+'" alt="图10-9"></p><p>从日志可以看到通过 TextPainter 测量的文本大小和实际占用是</p><h3 id="应用旋转和-padding" tabindex="-1"><a class="header-anchor" href="#应用旋转和-padding" aria-hidden="true">#</a> 应用旋转和 padding</h3><p>应用旋转效果本身比较简单，但难的是文本旋转后它占用的空间大小会发生变化，所以我们得动态计算旋转后文本所占用空间的大小，假设沿顺时针方向旋转了了 rotate 角度，画出布局图10-10：</p><p><img src="'+e+'" alt="图10-10"></p><p>我们可以根据上面公式求出最终的宽度和高度，是不是感觉高中学的三角函数终于派上用场了！注意，上面的公式中并没有考虑padding，padding 的处理比较简单，不赘述，看代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>\n  <span class="token class-name">Size</span> <span class="token function">paintUnit</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> double devicePixelRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 省略</span>\n    <span class="token comment">//文本占用的真实宽度</span>\n    <span class="token keyword">final</span> textWidth <span class="token operator">=</span> painter<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    <span class="token comment">//文本占用的真实高度</span>\n    <span class="token keyword">final</span> textHeight <span class="token operator">=</span> painter<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n\n    <span class="token comment">// 将弧度转化为度数</span>\n    <span class="token keyword">final</span> radians <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> rotate <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//通过三角函数计算旋转后的位置和size</span>\n    <span class="token keyword">final</span> orgSin <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> sin <span class="token operator">=</span> orgSin<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> cos <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">final</span> width <span class="token operator">=</span> textWidth <span class="token operator">*</span> cos<span class="token punctuation">;</span>\n    <span class="token keyword">final</span> height <span class="token operator">=</span> textWidth <span class="token operator">*</span> sin<span class="token punctuation">;</span>\n    <span class="token keyword">final</span> adjustWidth <span class="token operator">=</span> fontSize <span class="token operator">*</span> sin<span class="token punctuation">;</span>\n    <span class="token keyword">final</span> adjustHeight <span class="token operator">=</span> fontSize <span class="token operator">*</span> cos<span class="token punctuation">;</span>\n\n    <span class="token comment">// 为什么要平移？下面解释</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>orgSin <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 旋转角度为正</span>\n      canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>\n        adjustWidth <span class="token operator">+</span> padding<span class="token punctuation">.</span>left<span class="token punctuation">,</span>\n        padding<span class="token punctuation">.</span>top<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 旋转角度为负</span>\n      canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>\n        padding<span class="token punctuation">.</span>left<span class="token punctuation">,</span>\n        height <span class="token operator">+</span> padding<span class="token punctuation">.</span>top<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    canvas<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 绘制文本</span>\n    painter<span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 返回水印单元所占的真实空间大小（需要加上padding）</span>\n    <span class="token keyword">return</span> <span class="token class-name">Size</span><span class="token punctuation">(</span>\n      width <span class="token operator">+</span> adjustWidth <span class="token operator">+</span> padding<span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>\n      height <span class="token operator">+</span> adjustHeight <span class="token operator">+</span> padding<span class="token punctuation">.</span>vertical<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在旋转前我们对 canvas 进行了平移操作，如果不限平移，就会导致旋转之后一部分内容的位置跑在画布之外了，如图10-11：</p><p><img src="'+c+'" alt="图10-11"></p><p>接下来实现 shouldRepaint 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\nbool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">TextWaterMarkPainter</span> oldPainter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> oldPainter<span class="token punctuation">.</span>rotate <span class="token operator">!=</span> rotate <span class="token operator">||</span>\n      oldPainter<span class="token punctuation">.</span>text <span class="token operator">!=</span> text <span class="token operator">||</span>\n      oldPainter<span class="token punctuation">.</span>padding <span class="token operator">!=</span> padding <span class="token operator">||</span>\n      oldPainter<span class="token punctuation">.</span>textDirection <span class="token operator">!=</span> textDirection <span class="token operator">||</span>\n      oldPainter<span class="token punctuation">.</span>textStyle <span class="token operator">!=</span> textStyle<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这些属性发生变化时都会导致水印 UI 发生变化，所以需要重绘。</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">wTextWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Widget</span> <span class="token function">wTextWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token function">wPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">IgnorePointer</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span>\n          painter<span class="token punctuation">:</span> <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span>\n            text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter 中国 @wendux&#39;</span></span><span class="token punctuation">,</span>\n            textStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n              fontSize<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n              fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>w200<span class="token punctuation">,</span>\n              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38<span class="token punctuation">,</span> <span class="token comment">//为了水印能更清晰一些，颜色深一点</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            rotate<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 旋转 -20 度</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Widget</span> <span class="token function">wPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;按钮&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;tab&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图10-12：</p><p><img src="'+o+'" alt="图10-12"></p><h2 id="_10-8-4-单元水印画笔—交错文本水印" tabindex="-1"><a class="header-anchor" href="#_10-8-4-单元水印画笔—交错文本水印" aria-hidden="true">#</a> 10.8.4 单元水印画笔—交错文本水印</h2><p>拥有交错效果的文本水印比较常见，效果如图10-13：</p><p><img src="'+i+'" alt="图10-13"></p><p>要实现这样的效果按照之前思路，我们只需要将单元水印绘制为图中红色框圈出来的部分即可，可以看到这个单元水印和之前TextWaterMarkPainter 有一点不同，即 TextWaterMarkPainter 只能绘制单个文本，而现在我们需要绘制两个问文本，且两个文本沿竖直方向排列，且两个文本左边起始位置有偏移。</p><p>我们想想如何实现？直接能想到的是继续在 TextWaterMarkPainter 的 paintUnit 方法后面加逻辑，但这样会带来两个问题：</p><ol><li>TextWaterMarkPainter 的配置参数会变多。</li><li>TextWaterMarkPainter 的 paintUnit 已经很复杂了，如果再往里面加代码，后期的理解成本和维护成本会比较大，心智负担重。</li></ol><p>不能直接修改 TextWaterMarkPainter 实现，但我们有想复用 TextWaterMarkPainter 的逻辑，这时可以使用代理模式，即我们新建一个WaterMarkPainter，在里面来调用 TextWaterMarkPainter 方法即可。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 交错文本水印画笔，可以在水平或垂直方向上组合两个文本水印，</span>\n<span class="token comment">/// 通过给第二个文本水印指定不同的 padding 来实现交错效果。</span>\n<span class="token keyword">class</span> <span class="token class-name">StaggerTextWaterMarkPainter</span> <span class="token keyword">extends</span> <span class="token class-name">WaterMarkPainter</span> <span class="token punctuation">{</span>\n  <span class="token class-name">StaggerTextWaterMarkPainter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>padding1<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>padding2 <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>rotate<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>textStyle<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>staggerAxis <span class="token operator">=</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span> \n    <span class="token class-name">String</span><span class="token operator">?</span> text2<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> text2 <span class="token operator">=</span> text2 <span class="token operator">?</span><span class="token operator">?</span> text<span class="token punctuation">;</span>\n  <span class="token comment">//第一个文本</span>\n  <span class="token class-name">String</span> text<span class="token punctuation">;</span>\n  <span class="token comment">//第二个文本，如果不指定则和第二个文本相同</span>\n  <span class="token class-name">String</span> text2<span class="token punctuation">;</span>\n  <span class="token comment">//我们限制两个文本的旋转角度和文本样式必须相同，否则显得太乱了</span>\n  double<span class="token operator">?</span> rotate<span class="token punctuation">;</span>\n  <span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>TextStyle</span><span class="token operator">?</span> textStyle<span class="token punctuation">;</span>\n  <span class="token comment">//第一个文本的padding</span>\n  <span class="token class-name">EdgeInsets</span><span class="token operator">?</span> padding1<span class="token punctuation">;</span>\n  <span class="token comment">//第二个文本的padding</span>\n  <span class="token class-name">EdgeInsets</span> padding2<span class="token punctuation">;</span>\n  <span class="token comment">// 两个文本沿哪个方向排列</span>\n  <span class="token class-name">Axis</span> staggerAxis<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Size</span> <span class="token function">paintUnit</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> double devicePixelRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">TextWaterMarkPainter</span> painter <span class="token operator">=</span> <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span>\n      text<span class="token punctuation">:</span> text<span class="token punctuation">,</span>\n      padding<span class="token punctuation">:</span> padding1<span class="token punctuation">,</span>\n      rotate<span class="token punctuation">:</span> rotate <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      textStyle<span class="token punctuation">:</span> textStyle<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 绘制第一个文本水印前保存画布状态，因为在绘制过程中可能会平移或旋转画布</span>\n    canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 绘制第一个文本水印</span>\n    <span class="token keyword">final</span> size1 <span class="token operator">=</span> painter<span class="token punctuation">.</span><span class="token function">paintUnit</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> devicePixelRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 绘制完毕后恢复画布状态。</span>\n    canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 确定交错方向</span>\n    bool vertical <span class="token operator">=</span> staggerAxis <span class="token operator">==</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">;</span>\n    <span class="token comment">// 将 Canvas平移至第二个文本水印的起始绘制点</span>\n    canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>vertical <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> size1<span class="token punctuation">.</span>width<span class="token punctuation">,</span> vertical <span class="token operator">?</span> size1<span class="token punctuation">.</span>height <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 设置第二个文本水印的 padding 和 text2</span>\n    painter\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>padding <span class="token operator">=</span> padding2\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text2<span class="token punctuation">;</span>\n    <span class="token comment">// 绘制第二个文本水印</span>\n    <span class="token keyword">final</span> size2 <span class="token operator">=</span> painter<span class="token punctuation">.</span><span class="token function">paintUnit</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> devicePixelRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 返回两个文本水印所占用的总大小</span>\n    <span class="token keyword">return</span> <span class="token class-name">Size</span><span class="token punctuation">(</span>\n      vertical <span class="token operator">?</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>size1<span class="token punctuation">.</span>width<span class="token punctuation">,</span> size2<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">:</span> size1<span class="token punctuation">.</span>width <span class="token operator">+</span> size2<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n      vertical\n          <span class="token operator">?</span> size1<span class="token punctuation">.</span>height <span class="token operator">+</span> size2<span class="token punctuation">.</span>height\n          <span class="token punctuation">:</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>size1<span class="token punctuation">.</span>height<span class="token punctuation">,</span> size2<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">StaggerTextWaterMarkPainter</span> oldPainter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> oldPainter<span class="token punctuation">.</span>rotate <span class="token operator">!=</span> rotate <span class="token operator">||</span>\n        oldPainter<span class="token punctuation">.</span>text <span class="token operator">!=</span> text <span class="token operator">||</span>\n        oldPainter<span class="token punctuation">.</span>text2 <span class="token operator">!=</span> text2 <span class="token operator">||</span>\n        oldPainter<span class="token punctuation">.</span>staggerAxis <span class="token operator">!=</span> staggerAxis <span class="token operator">||</span>\n        oldPainter<span class="token punctuation">.</span>padding1 <span class="token operator">!=</span> padding1 <span class="token operator">||</span>\n        oldPainter<span class="token punctuation">.</span>padding2 <span class="token operator">!=</span> padding2 <span class="token operator">||</span>\n        oldPainter<span class="token punctuation">.</span>textDirection <span class="token operator">!=</span> textDirection <span class="token operator">||</span>      \n        oldPainter<span class="token punctuation">.</span>textStyle <span class="token operator">!=</span> textStyle<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有三点需要注意：</p><ol><li>在绘制第一个文本之前需要调用 canvas.save 保存画布状态，因为在绘制过程中可能会平移或旋转画布，在绘制第二个文本之前恢复画布状态，并需要将 Canvas平移至第二个文本水印的起始绘制点。</li><li>两个文本可以沿水平方向排列，也可以沿竖直方向排列，不同的排列规则会影响最终水印单元的大小。</li><li>交错的偏移通过 padding2 来指定。</li></ol><h3 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h3><p>下面代码运行后就可以看到上面图片的效果了：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">wStaggerTextWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token function">wPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">IgnorePointer</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span>\n          painter<span class="token punctuation">:</span> <span class="token class-name">StaggerTextWaterMarkPainter</span><span class="token punctuation">(</span>\n            text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;《Flutter实战》&#39;</span></span><span class="token punctuation">,</span>\n            text2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;wendux&#39;</span></span><span class="token punctuation">,</span>\n            textStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38<span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            padding2<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 第二个文本左边向右偏移 40</span>\n            rotate<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-8-5-对水印应用偏移" tabindex="-1"><a class="header-anchor" href="#_10-8-5-对水印应用偏移" aria-hidden="true">#</a> 10.8.5 对水印应用偏移</h2><p>我们实现的两个文本水印画笔能对单元水印指定padding，但是如果我们需要对整个水印组件应用偏移效果呢？比如期望如图10-14所示的效果：让 WaterMark 的整个背景向左平移了30像素，可以看到第一列的水印文本只显示了一部分。</p><p><img src="'+l+'" alt="图10-14"></p><p>首先，我们不能在文本水印画笔中应用偏移，因为水印画笔画的是单元水印，如果我们绘制的单元水印只显示了部分文本，则单元水印重复时每个重复区域也都只显示部分文本。所以我们得对 WaterMark 的背景整体做一个偏移，这时想必读者应该想到了 Transform 组件，OK，那我们先用 Transform 组件来试试。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">Transform</span><span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>\n  offset<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//向做偏移30像素</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span>\n    painter<span class="token punctuation">:</span> <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span>\n      text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter 中国 @wendux&#39;</span></span><span class="token punctuation">,</span>\n      textStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      rotate<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图10-15：</p><p><img src="'+u+'" alt="图10-15"></p><p>可以发现虽然整体向做偏移了，但是右边出现了空白，这时因为 WaterMark 占用的空间本来就是和屏幕等宽的，所以它绘制时的区域也就和屏幕一样大，而Transform.translate 的作用相当于是在绘制时将绘制的原点向做平移了 30 像素，所以右边就出现了空白。</p><p>既然如此，那如果能让 WaterMark 的绘制区域超过屏幕宽度 30 像素，这样平移后不就可以了么？这个思路是对的，我们知道 WaterMark 中是通过 DecoratedBox 去绘制的背景，但我们不能去修改 DecoratedBox 的绘制逻辑，如果将 DecoratedBox 相关代码拷贝一份出来修改，这样后期的维护成本就很大，所以直接修改 DecoratedBox 的方法不可取。</p><h3 id="方案一-使用可滚动组件来应用偏移" tabindex="-1"><a class="header-anchor" href="#方案一-使用可滚动组件来应用偏移" aria-hidden="true">#</a> 方案一：使用可滚动组件来应用偏移</h3><p>我们知道大多数组件的绘制区域是和自身布局大小是相同的，那么我们能不能强制让 WaterMark 的宽度超出屏幕宽度30 像素呢？当然可以，可滚动组件不都是这个原理么！那么肯定有一个方法能行的通，即强制指定WaterMark的宽度比屏幕宽度大30，然后用一个 SingleChildScrollView包裹：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">wTextWaterMarkWithOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token function">wPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">IgnorePointer</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">print</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>\n            scrollDirection<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Transform</span><span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>\n              offset<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n                <span class="token comment">// constraints.maxWidth 为屏幕宽度，+30 像素</span>\n                width<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span>\n                height<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span>\n                  painter<span class="token punctuation">:</span> <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span>\n                    text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter 中国 @wendux&#39;</span></span><span class="token punctuation">,</span>\n                    textStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n                      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38<span class="token punctuation">,</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    rotate<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n                  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码可以实现我们期望的效果（见图10-14）。</p><p>需要说明的是因为 SingleChildScrollView 被 IgnorePointer 包裹着，所以它是接收不到事件的，所以不会受用户滑动的干扰。</p><p>我们知道 SingleChildScrollView 内部要创建Scrollable 和 Viewport 对象，而在这个场景下 SingleChildScrollView 是不会响应事件的，所以创建 Scrollable 就属于多余的开销，我们需要探索一种更优的方案。</p><h3 id="方案二-使用-fittedbox-来应用偏移" tabindex="-1"><a class="header-anchor" href="#方案二-使用-fittedbox-来应用偏移" aria-hidden="true">#</a> 方案二：使用 FittedBox 来应用偏移</h3><p>我们能否先通过 UnconstrainedBox 取消父组件对子组件大小的约束，然后通过 SizedBox 指定 WaterMark 宽度比屏幕长 30 像素 来实现，比如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">UnconstrainedBox</span><span class="token punctuation">(</span> <span class="token comment">// 取消父组件对子组件大小的约束</span>\n      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topRight<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n        <span class="token comment">//指定 WaterMark 宽度比屏幕长 30 像素</span>\n        width<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图10-16：</p><p><img src="'+k+'" alt="图10-16"></p><p>我们看到，左边出现了一个溢出提示条，这是因为 UnconstrainedBox 虽然在其子组件布局时可以取消约束（子组件可以为无限大），但是 UnconstrainedBox 自身是受其父组件约束的，所以当 UnconstrainedBox 随着其子组件变大后，如果 UnconstrainedBox 的大小超过它父组件大小时，就导致了溢出。</p><p>如果没有这个溢出提示条，则我们想要的偏移效果实际上已经实现了！偏移的实现原理是我们指定了屏幕右对齐，因为子组件的右边界和父组件右边界对齐时，超出的 30 像素宽度就会在父组件的左边界之外，从而就实现了我们期望的效果。我们知道在 Release 模式下是不会绘制溢出提示条的，因为溢出条的绘制逻辑是在 assert 函数中，比如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Display the overflow indicator.</span>\n<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">paintOverflowIndicator</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> _overflowContainerRect<span class="token punctuation">,</span> _overflowChildRect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以在 Release 模式下上面代码也不会有问题，但是我们还是不应该使用这种方法，因为既然有提示，则这就代表 UnconstrainedBox 子元素溢出是不被预期的行为。</p><p>原因搞清楚后，我们解决思路就是：在取消约束的同时不要让组件大小超出父组件的空间即可。而我们之前章节介绍的 FittedBox 组件，它可以取消父组件对子组件的约束并同时可以让其子组件适配 FittedBox 父组件的大小，正好符合我们的要求，下面我们修改一下代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">FittedBox</span><span class="token punctuation">(</span> <span class="token comment">//FittedBox会取消父组件对子组件的约束</span>\n      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topRight<span class="token punctuation">,</span> <span class="token comment">// 通过对齐方式来实现平移效果</span>\n      fit<span class="token punctuation">:</span> <span class="token class-name">BoxFit</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span><span class="token comment">//不进行任何适配处理</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n        <span class="token comment">//指定 WaterMark 宽度比屏幕长 30 像素</span>\n        width<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span>\n          painter<span class="token punctuation">:</span> <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span>\n            text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter 中国 @wendux&#39;</span></span><span class="token punctuation">,</span>\n            textStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38<span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            rotate<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，能实现我们预期的效果（见图10-14）。</p><p>FittedBox 主要的使用场景是对子组件进行一些缩放、拉升等以适配父组件的空间，而在本例的场景中我们并没有用到这个功能（适配方式制定了 BoxFit.none ），还是有点杀鸡用牛刀的感觉，那还有其它更合适的组件来解决这个问题吗？答案是有，OverflowBox ！</p><h3 id="方案三-使用-overflowbox-来应用偏移" tabindex="-1"><a class="header-anchor" href="#方案三-使用-overflowbox-来应用偏移" aria-hidden="true">#</a> 方案三：使用 OverflowBox 来应用偏移</h3><p>OverflowBox 和 UnconstrainedBox 相同的是可以取消父组件对子组件的约束，但不同的是 <strong>OverflowBox 自身大小不会随着子组件大小而变化</strong>，它的大小只取决于其父组件的约束，为（constraints.biggest），即在满足父组件约束的前提下会尽可能大。我们封装一个 TranslateWithExpandedPaintingArea 组件来包裹 WaterMark 组件：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">TranslateWithExpandedPaintingArea</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">TranslateWithExpandedPaintingArea</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>clipBehavior <span class="token operator">=</span> <span class="token class-name">Clip</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">Clip</span> clipBehavior<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> dx <span class="token operator">=</span> offset<span class="token punctuation">.</span>dx<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> dy <span class="token operator">=</span> offset<span class="token punctuation">.</span>dy<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Widget</span> widget <span class="token operator">=</span> <span class="token class-name">OverflowBox</span><span class="token punctuation">(</span>\n          <span class="token comment">//平移多少，则子组件相应轴的长度增加多少</span>\n          minWidth<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>minWidth <span class="token operator">+</span> dx<span class="token punctuation">,</span>\n          maxWidth<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">+</span> dx<span class="token punctuation">,</span>\n          minHeight<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>minHeight <span class="token operator">+</span> dy<span class="token punctuation">,</span>\n          maxHeight<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxHeight <span class="token operator">+</span> dy<span class="token punctuation">,</span>\n          alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">(</span>\n            <span class="token comment">// 不同方向的平移，要指定不同的对齐方式</span>\n            offset<span class="token punctuation">.</span>dx <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n            offset<span class="token punctuation">.</span>dy <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//超出组件布局空间的部分要剪裁掉</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>clipBehavior <span class="token operator">!=</span> <span class="token class-name">Clip</span><span class="token punctuation">.</span>none<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          widget <span class="token operator">=</span> <span class="token class-name">ClipRect</span><span class="token punctuation">(</span>clipBehavior<span class="token punctuation">:</span> clipBehavior<span class="token punctuation">,</span> child<span class="token punctuation">:</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> widget<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有三点需要说明：</p><ol><li>会根据用户指定的偏移来动态给子组件宽高增加相应的值。</li><li>我们需要根据用户指定的偏移来动态调整 OverflowBox 的对齐方式，比如要向左平移时，OverflowBox 就必须右对齐，因为右对齐后超出父容器的部分会在左边界之外，这就是我们想要的效果，如果我们没有右对齐而是左对齐，则超出屏幕的部分本来就在右边界之外，这不符合预期。</li><li>超出边界的内容默认会显示，当然本例中水印组件大小和屏幕剩余显示空间一样大，所以超出后就不会显示，但如果我们给水印组件指定一个较小的大小，就可以看到超出之后的内容了，因此，我们定义了一个剪裁的配置参数，使用者可以根据实际情况决定是否进行剪裁。</li></ol><p>所以最终的代码就是：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">wTextWaterMarkWithOffset2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token function">wPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">IgnorePointer</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">TranslateWithExpandedPaintingArea</span><span class="token punctuation">(</span>\n          offset<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span>\n            painter<span class="token punctuation">:</span> <span class="token class-name">TextWaterMarkPainter</span><span class="token punctuation">(</span>\n              text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter 中国 @wendux&#39;</span></span><span class="token punctuation">,</span>\n              textStyle<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>\n                color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38<span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              rotate<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，能实现我们预期的效果（见图10-14）。</p><h2 id="_10-8-6-总结" tabindex="-1"><a class="header-anchor" href="#_10-8-6-总结" aria-hidden="true">#</a> 10.8.6 总结</h2><p>本节主要内容总结：</p><ol><li>水印组件的实现思路以及如何定义单元水印画笔。</li><li>如何绘制文本以及如何进行离屏渲染。</li><li>如何对水印整体应用偏移。</li><li>笔者已经将本章封装的水印组件和水印画笔添加到了 flukit 组件库，完整实现代码可在 flukit 库中找到。</li></ol>',107)],d={},v=(0,a(18580).Z)(d,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,r)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);