"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[2477],{76667:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-64493137","path":"/chapter4/layoutbuilder.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.8 LayoutBuilder、AfterLayout","slug":"_4-8-layoutbuilder、afterlayout","link":"#_4-8-layoutbuilder、afterlayout","children":[]},{"level":2,"title":"4.8.1 LayoutBuilder","slug":"_4-8-1-layoutbuilder","link":"#_4-8-1-layoutbuilder","children":[{"level":3,"title":"打印布局时的约束信息","slug":"打印布局时的约束信息","link":"#打印布局时的约束信息","children":[]}]},{"level":2,"title":"4.8.2 AfterLayout","slug":"_4-8-2-afterlayout","link":"#_4-8-2-afterlayout","children":[{"level":3,"title":"获取组件大小和相对于屏幕的坐标","slug":"获取组件大小和相对于屏幕的坐标","link":"#获取组件大小和相对于屏幕的坐标","children":[]},{"level":3,"title":"获取组件相对于某个父组件的坐标","slug":"获取组件相对于某个父组件的坐标","link":"#获取组件相对于某个父组件的坐标","children":[]},{"level":3,"title":"AfterLayout 实例","slug":"afterlayout-实例","link":"#afterlayout-实例","children":[]}]},{"level":2,"title":"4.8.3 Flutter 的 build 和 layout","slug":"_4-8-3-flutter-的-build-和-layout","link":"#_4-8-3-flutter-的-build-和-layout","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.03,"words":1808},"filePathRelative":"chapter4/layoutbuilder.md","localizedDate":"2022年6月6日","excerpt":""}')},12882:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6808);const p=a.p+"assets/img/4-23.bd740505.png",e=a.p+"assets/img/4-24.d637ef30.png",c=[(0,t.uE)('<h2 id="_4-8-layoutbuilder、afterlayout" tabindex="-1"><a class="header-anchor" href="#_4-8-layoutbuilder、afterlayout" aria-hidden="true">#</a> 4.8 LayoutBuilder、AfterLayout</h2><h2 id="_4-8-1-layoutbuilder" tabindex="-1"><a class="header-anchor" href="#_4-8-1-layoutbuilder" aria-hidden="true">#</a> 4.8.1 LayoutBuilder</h2><p>通过 LayoutBuilder，我们可以在<strong>布局过程</strong>中拿到父组件传递的约束信息，然后我们可以根据约束信息动态的构建不同的布局。</p><p>比如我们实现一个响应式的 Column 组件 ResponsiveColumn，它的功能是当当前可用的宽度小于 200 时，将子组件显示为一列，否则显示为两列。简单来实现一下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ResponsiveColumn</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">ResponsiveColumn</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过 LayoutBuilder 拿到父组件传递的约束，然后判断 maxWidth 是否小于200</span>\n    <span class="token keyword">return</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 最大宽度小于200，显示单列</span>\n          <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> children<span class="token punctuation">,</span> mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 大于200，显示双列</span>\n          <span class="token keyword">var</span> _children <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              _children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Row</span><span class="token punctuation">(</span>\n                children<span class="token punctuation">:</span> <span class="token punctuation">[</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> children<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              _children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> _children<span class="token punctuation">,</span> mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">LayoutBuilderRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">LayoutBuilderRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> _children <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Column在本示例中在水平方向的最大宽度为屏幕的宽度</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// 限制宽度为190，小于 200</span>\n        <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">ResponsiveColumn</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> _children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">ResponsiveColumn</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> _children<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">LayoutLogPrint</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;xx&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 下面介绍</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 LayoutBuilder 的使用很简单，但是不要小看它，因为它非常实用且重要，它主要有两个使用场景：</p><ol><li>可以使用 LayoutBuilder 来根据设备的尺寸来实现响应式布局。</li><li>LayoutBuilder 可以帮我们高效排查问题。比如我们在遇到布局问题或者想调试组件树中某一个节点布局的约束时 LayoutBuilder 就很有用。</li></ol><h3 id="打印布局时的约束信息" tabindex="-1"><a class="header-anchor" href="#打印布局时的约束信息" aria-hidden="true">#</a> 打印布局时的约束信息</h3><p>为了便于排错，我们封装一个能打印父组件传递给子组件约束的组件：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">LayoutLogPrint</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">LayoutLogPrint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span> child<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">T</span><span class="token operator">?</span> tag<span class="token punctuation">;</span> <span class="token comment">//指定日志tag</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// assert在编译release版本时会被去除</span>\n      <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">tag <span class="token operator">?</span><span class="token operator">?</span> key <span class="token operator">?</span><span class="token operator">?</span> child</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">constraints</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> child<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就可以使用 LayoutLogPrint 组件树中任意位置的约束信息，比如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">LayoutLogPrint</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;xx&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter: Text(&quot;xx&quot;): BoxConstraints(0.0&lt;=w&lt;=428.0, 0.0&lt;=h&lt;=823.0)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到 Text(&quot;xx&quot;) 的显示空间最大宽度为 428，最大高度为 823 。</p><blockquote><p>注意！我们的大前提是盒模型布局，如果是Sliver 布局，可以使用 SliverLayoutBuiler 来打印。</p></blockquote><p>完整的示例运行后效果如图4-23：</p><p><img src="'+p+'" alt="4-23"></p><h2 id="_4-8-2-afterlayout" tabindex="-1"><a class="header-anchor" href="#_4-8-2-afterlayout" aria-hidden="true">#</a> 4.8.2 AfterLayout</h2><p>Flutter 是响应式UI框架，而命令式UI框架最大的不同就是：大多数情况下开发者只需要关注数据的变化，数据变化后框架会自动重新构建UI而不需要开发者手动去操作每一个组件，所以我们会发现 Widget 会被定义为不可变的（immutable），并且没有提供任何操作组件的 API，因此如果我们想在 Flutter 中获取某个组件的大小和位置就会很困难，当然大多数情况下不会有这个需求，但总有一些场景会需要，而在命令式UI框架中是不会存在这个问题的。</p><p>我们知道，只有当布局完成时，每个组件的大小和位置才能确定，所以获取的时机肯定是布局完成后，那布局完成的时机如何获取呢？至少事件分发肯定是在布局完成之后的，比如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Builder</span><span class="token punctuation">(</span>\n  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;flutter@wendux&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//打印 text 的大小</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>context.size</code> 可以获取当前上下文 RenderObject 的大小，对于Builder、StatelessWidget 以及 StatefulWidget 这样没有对应 RenderObject 的组件（这些组件只是用于组合和代理组件，本身并没有布局和绘制逻辑），获取的是子代中第一个拥有 RenderObject 组件的 RenderObject 对象。</p><p>虽然事件点击时可以拿到组件大小，但有两个问题，第一是需要用户手动触发，第二是时机较晚，更多的时候我们更希望在布局一结束就去获取大小和位置信息，为了解决这个问题，笔者封装了一个 AfterLayout 组件，它可以在子组件布局完成后执行一个回调，并同时将 RenderObject 对象作为参数传递。</p><blockquote><p>注意，AfterLayout 是笔者自定义的组件，并非 Flutter 组件库中自带组件，读者可以在随书源码中查看实现源码和示例，本节主要讲它的功能， AfterLayout 的实现原理我们将在本书后面布局原理相关章节中介绍。</p></blockquote><h3 id="获取组件大小和相对于屏幕的坐标" tabindex="-1"><a class="header-anchor" href="#获取组件大小和相对于屏幕的坐标" aria-hidden="true">#</a> 获取组件大小和相对于屏幕的坐标</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n  callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> ral<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>ral<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//子组件的大小</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>ral<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 子组件在屏幕中坐标</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;flutter@wendux&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter: Size(105.0, 17.0)\nflutter: Offset(42.5, 290.0)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Text 文本的实际长度是 105，高度是 17，它的起始位置坐标是（42.5, 290.0）。</p><h3 id="获取组件相对于某个父组件的坐标" tabindex="-1"><a class="header-anchor" href="#获取组件相对于某个父组件的坐标" aria-hidden="true">#</a> 获取组件相对于某个父组件的坐标</h3><p>RenderAfterLayout 类继承自 RenderBox，RenderBox 有一个 localToGlobal 方法，它可以将坐标转化为相对与指定的祖先节点的坐标，比如下面代码可以打印出 Text(&#39;A&#39;) 在 父 Container 中的坐标</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">.</span>shade200<span class="token punctuation">,</span>\n    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n      callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> ral<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Offset</span> offset <span class="token operator">=</span> ral<span class="token punctuation">.</span><span class="token function">localToGlobal</span><span class="token punctuation">(</span>\n          <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span>\n          <span class="token comment">// 传一个父级元素</span>\n          ancestor<span class="token punctuation">:</span> context<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;A 在 Container 中占用的空间范围为：</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">offset <span class="token operator">&amp;</span> ral<span class="token punctuation">.</span>size</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;A&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="afterlayout-实例" tabindex="-1"><a class="header-anchor" href="#afterlayout-实例" aria-hidden="true">#</a> AfterLayout 实例</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AfterLayoutRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">AfterLayoutRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _AfterLayoutRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_AfterLayoutRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _AfterLayoutRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AfterLayoutRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;flutter 实战 &#39;</span></span><span class="token punctuation">;</span>\n  <span class="token class-name">Size</span> _size <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span>zero<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>\n            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n                  <span class="token string-literal"><span class="token string">&#39;Text1: 点我获取我的大小&#39;</span></span><span class="token punctuation">,</span>\n                  textAlign<span class="token punctuation">:</span> <span class="token class-name">TextAlign</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n                  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Text1: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">context<span class="token punctuation">.</span>size</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n          callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> ral<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Text2： </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">ral<span class="token punctuation">.</span>size</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">ral<span class="token punctuation">.</span>offset</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Text2：flutter@wendux&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">.</span>shade200<span class="token punctuation">,</span>\n            alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n            width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n            height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n              callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> ral<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Offset</span> offset <span class="token operator">=</span> ral<span class="token punctuation">.</span><span class="token function">localToGlobal</span><span class="token punctuation">(</span>\n                  <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span>\n                  ancestor<span class="token punctuation">:</span> context<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;A 在 Container 中占用的空间范围为：</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">offset <span class="token operator">&amp;</span> ral<span class="token punctuation">.</span>size</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;A&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>_text<span class="token punctuation">)</span><span class="token punctuation">,</span> \n          callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">//更新尺寸信息</span>\n              _size <span class="token operator">=</span> value<span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">//显示上面 Text 的尺寸</span>\n        <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n            <span class="token string-literal"><span class="token string">&#39;Text size: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_size</span></span><span class="token string"> &#39;</span></span><span class="token punctuation">,</span>\n            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              _text <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&#39;flutter 实战 &#39;</span></span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;追加字符串&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图4-24所示：</p><p><img src="'+e+'" alt="图4-24"></p><p>运行后点击 Text1 就可以在日志面板看到它的大小。点击 “追加字符串” 按钮，字符串大小变化后，屏幕上上也会显示（按钮上方挨着）。</p><h2 id="_4-8-3-flutter-的-build-和-layout" tabindex="-1"><a class="header-anchor" href="#_4-8-3-flutter-的-build-和-layout" aria-hidden="true">#</a> 4.8.3 Flutter 的 build 和 layout</h2><p>通过观察 LayoutBuilder 的示例，我们还可以发现一个关于 Flutter 构建（build）和 布局（layout）的结论：<strong>Flutter 的build 和 layout 是可以交错执行的</strong>，并不是严格的按照先 build 再 layout 的顺序。比如在上例中 ，在build过程中遇到了 LayoutBuilder 组件，而 LayoutBuilder的 builder 是在 layout 阶段执行的（layout阶段才能取到布局过程的约束信息），在 builder 中新新建了一个 widget 后，Flutter 框架随后会调用该 widget 的 build 方法，又进入了build阶段。</p>',40)],o={},l=(0,a(18580).Z)(o,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);