"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[4125],{95976:(t,i,l)=>{l.r(i),l.d(i,{data:()=>e});const e=JSON.parse('{"key":"v-5ae8b004","path":"/chapter15/intro.html","title":"15.1 Github客户端示例","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.1,"words":331},"filePathRelative":"chapter15/intro.md","localizedDate":"2022年6月6日","excerpt":""}')},11060:(t,i,l)=>{l.r(i),l.d(i,{default:()=>o});var e=l(6808);const r=[(0,e.uE)('<h1 id="_15-1-github客户端示例" tabindex="-1"><a class="header-anchor" href="#_15-1-github客户端示例" aria-hidden="true">#</a> 15.1 Github客户端示例</h1><p>本章新建一个Flutter工程，实现一个简单的Github客户端。这个实例的主要目标有两个：</p><ol><li>带领读者了解如何使用Flutter来开发一个完整APP，了解Flutter应用开发流程及工程结构等。</li><li>对前面章节所学内容的一个应用及总结。</li></ol><p>需要注意的是，由于Github本身功能非常多，我们的焦点并不是去实现Github的所有业务功能。因此，我们只需要实现一个APP的骨架，能达到上面这两点即可。下面对我们要实现的功能如下：</p><ol><li>实现Github账号登录、退出登录功能</li><li>登录后可以查看自己的项目主页</li><li>支持换肤</li><li>支持多语言</li><li>登录状态可以持久化；</li></ol><p>要实现上面这些功能会涉及到如下技术点：</p><ol><li>网络请求；需要请求Github API。</li><li>Json转Dart Model类；</li><li>全局状态管理；语言、主题、登录态等都需要全局共享。</li><li>持久化存储；保存登录信息，用户信息等。</li><li>支持国际化、Intl包的使用</li></ol><p>现在，目标已经确定，在接下来章节中，我们将分模块一步一步实现上述功能。</p>',8)],a={},o=(0,l(18580).Z)(a,[["render",function(t,i){return(0,e.wg)(),(0,e.iD)("div",null,r)}]])},18580:(t,i)=>{i.Z=(t,i)=>{const l=t.__vccOpts||t;for(const[t,e]of i)l[t]=e;return l}}}]);