"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[3182],{43904:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-7ec37539","path":"/chapter6/sliver.html","title":"6.11 自定义 Sliver","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.11.1 Sliver 布局协议","slug":"_6-11-1-sliver-布局协议","link":"#_6-11-1-sliver-布局协议","children":[{"level":3,"title":"Sliver布局模型和盒布局模型","slug":"sliver布局模型和盒布局模型","link":"#sliver布局模型和盒布局模型","children":[]}]},{"level":2,"title":"6.11.2 SliverFlexibleHeader","slug":"_6-11-2-sliverflexibleheader","link":"#_6-11-2-sliverflexibleheader","children":[{"level":3,"title":"传递额外的布局信息","slug":"传递额外的布局信息","link":"#传递额外的布局信息","children":[]},{"level":3,"title":"高度修正 scrollOffsetCorrection","slug":"高度修正-scrolloffsetcorrection","link":"#高度修正-scrolloffsetcorrection","children":[]},{"level":3,"title":"边界","slug":"边界","link":"#边界","children":[]}]},{"level":2,"title":"6.11.3 SliverPersistentHeaderToBox","slug":"_6-11-3-sliverpersistentheadertobox","link":"#_6-11-3-sliverpersistentheadertobox","children":[{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"6.11.4 总结","slug":"_6-11-4-总结","link":"#_6-11-4-总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":17.93,"words":5380},"filePathRelative":"chapter6/sliver.md","localizedDate":"2022年6月6日","excerpt":""}')},25525:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(6808);const t=a.p+"assets/img/6-28.e5720784.gif",p=a.p+"assets/img/6-29.f73b7c90.gif",l=a.p+"assets/img/6-30.57d0256f.gif",i=a.p+"assets/img/6-31.3400d660.gif",o=[(0,e.uE)('<h1 id="_6-11-自定义-sliver" tabindex="-1"><a class="header-anchor" href="#_6-11-自定义-sliver" aria-hidden="true">#</a> 6.11 自定义 Sliver</h1><p>本节将通过自定义两个Sliver，来说明Sliver 布局协议和自定义 Sliver 的具体过程。</p><h2 id="_6-11-1-sliver-布局协议" tabindex="-1"><a class="header-anchor" href="#_6-11-1-sliver-布局协议" aria-hidden="true">#</a> 6.11.1 Sliver 布局协议</h2><p>Sliver 的布局协议如下：</p><ol><li>Viewport 将当前布局和配置信息通过 SliverConstraints 传递给 Sliver。</li><li>Sliver 确定自身的位置、绘制等信息，保存在 geometry 中（一个 SliverGeometry 类型的对象）。</li><li>Viewport 读取 geometry 中的信息来对 Sliver 进行布局和绘制。</li></ol><p>可以看到，这个过程有两个重要的对象 SliverConstraints 和 SliverGeometry ，我们先看看 SliverConstraints 的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SliverConstraints</span> <span class="token keyword">extends</span> <span class="token class-name">Constraints</span> <span class="token punctuation">{</span>\n    <span class="token comment">//主轴方向</span>\n    <span class="token class-name">AxisDirection</span><span class="token operator">?</span> axisDirection<span class="token punctuation">;</span>\n    <span class="token comment">//Sliver 沿着主轴从列表的哪个方向插入？枚举类型，正向或反向</span>\n    <span class="token class-name">GrowthDirection</span><span class="token operator">?</span> growthDirection<span class="token punctuation">;</span>\n    <span class="token comment">//用户滑动方向</span>\n    <span class="token class-name">ScrollDirection</span><span class="token operator">?</span> userScrollDirection<span class="token punctuation">;</span>\n    <span class="token comment">//当前Sliver理论上（可能会固定在顶部）已经滑出可视区域的总偏移</span>\n    double<span class="token operator">?</span> scrollOffset<span class="token punctuation">;</span>\n    <span class="token comment">//当前Sliver之前的Sliver占据的总高度，因为列表是懒加载，如果不能预估时，该值为double.infinity</span>\n    double<span class="token operator">?</span> precedingScrollExtent<span class="token punctuation">;</span>\n    <span class="token comment">//上一个 sliver 覆盖当前 sliver 的大小，通常在 sliver 是 pinned/floating</span>\n    <span class="token comment">//或者处于列表头尾时有效，我们在后面的小节中会有相关的例子。</span>\n    double<span class="token operator">?</span> overlap<span class="token punctuation">;</span>\n    <span class="token comment">//当前Sliver在Viewport中的最大可以绘制的区域。</span>\n    <span class="token comment">//绘制如果超过该区域会比较低效（因为不会显示）</span>\n    double<span class="token operator">?</span> remainingPaintExtent<span class="token punctuation">;</span>\n    <span class="token comment">//纵轴的长度；如果列表滚动方向是垂直方向，则表示列表宽度。</span>\n    double<span class="token operator">?</span> crossAxisExtent<span class="token punctuation">;</span>\n    <span class="token comment">//纵轴方向</span>\n    <span class="token class-name">AxisDirection</span><span class="token operator">?</span> crossAxisDirection<span class="token punctuation">;</span>\n    <span class="token comment">//Viewport在主轴方向的长度；如果列表滚动方向是垂直方向，则表示列表高度。</span>\n    double<span class="token operator">?</span> viewportMainAxisExtent<span class="token punctuation">;</span>\n    <span class="token comment">//Viewport 预渲染区域的起点[-Viewport.cacheExtent, 0]</span>\n    double<span class="token operator">?</span> cacheOrigin<span class="token punctuation">;</span>\n    <span class="token comment">//Viewport加载区域的长度，范围:</span>\n    <span class="token comment">//[viewportMainAxisExtent,viewportMainAxisExtent + Viewport.cacheExtent*2]</span>\n    double<span class="token operator">?</span> remainingCacheExtent<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看见 SliverConstraints 中包含的信息非常多。当列表滑动时，如果某个 Sliver 已经进入了需要构建的区域，则列表会将 SliverConstraints 信息传递给该 Sliver，Sliver 就可以根据这些信息来确定自身的布局和绘制信息了。</p><p>Sliver 需要确定的是 SliverGeometry：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//Sliver在主轴方向预估长度，大多数情况是固定值，用于计算sliverConstraints.scrollOffset</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>scrollExtent <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>paintExtent <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token comment">// 可视区域中的绘制长度</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>paintOrigin <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token comment">// 绘制的坐标原点，相对于自身布局位置</span>\n  <span class="token comment">//在 Viewport中占用的长度；如果列表滚动方向是垂直方向，则表示列表高度。</span>\n  <span class="token comment">//范围[0,paintExtent]</span>\n  double<span class="token operator">?</span> layoutExtent<span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>maxPaintExtent <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span><span class="token comment">//最大绘制长度</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>maxScrollObstructionExtent <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  double<span class="token operator">?</span> hitTestExtent<span class="token punctuation">,</span> <span class="token comment">// 点击测试的范围</span>\n  bool<span class="token operator">?</span> visible<span class="token punctuation">,</span><span class="token comment">// 是否显示</span>\n  <span class="token comment">//是否会溢出Viewport，如果为true，Viewport便会裁剪</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>hasVisualOverflow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">//scrollExtent的修正值：layoutExtent变化后，为了防止sliver突然跳动（应用新的layoutExtent）</span>\n  <span class="token comment">//可以先进行修正，具体的作用在后面 SliverFlexibleHeader 示例中会介绍。</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>scrollOffsetCorrection<span class="token punctuation">,</span>\n  double<span class="token operator">?</span> cacheExtent<span class="token punctuation">,</span> <span class="token comment">// 在预渲染区域中占据的长度</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sliver布局模型和盒布局模型" tabindex="-1"><a class="header-anchor" href="#sliver布局模型和盒布局模型" aria-hidden="true">#</a> Sliver布局模型和盒布局模型</h3><p>两者布局流程基本相同：父组件告诉子组件约束信息 &gt; 子组件根据父组件的约束确定自生大小 &gt; 父组件获得子组件大小调整其位置。不同是：</p><ol><li>父组件传递给子组件的约束信息不同。盒模型传递的是 BoxConstraints，而 Sliver 传递的是 SliverConstraints。</li><li>描述子组件布局信息的对象不同。盒模型的布局信息通过 Size 和 offset描述 ，而 Sliver的是通过 SliverGeometry 描述。</li><li>布局的起点不同。Sliver布局的起点一般是Viewport ，而盒模型布局的起点可以是任意的组件。</li></ol><p>SliverConstraints 和 SliverGeometry 属性比较多，只看的话它们的含义并不好理解，下面我们将通过两个例子，通过实践来理解。</p><h2 id="_6-11-2-sliverflexibleheader" tabindex="-1"><a class="header-anchor" href="#_6-11-2-sliverflexibleheader" aria-hidden="true">#</a> 6.11.2 SliverFlexibleHeader</h2><p>我们实现一个类似旧版本微信朋友圈顶部头图的功能：即默认情况下顶部图片只显示一部分，当用户向下拽时图片的剩余部分会逐渐显示。如图6-28所示，左边为初始状态，右面为下拉时的状态。</p><p><img src="'+t+'" alt="6-28"></p><p>我们的思路是实现一个 Sliver，将它作为 CustomScrollView 的第一孩子，然后根据用户的滑动来动态调整 Sliver 的布局和显示。下面我们来实现一个 SliverFlexibleHeader，它会结合 CustomScrollView 实现上述效果。我们先看一下页面的整体实现代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">CustomScrollView</span><span class="token punctuation">(</span>\n    <span class="token comment">//为了能使CustomScrollView拉到顶部时还能继续往下拉，必须让 physics 支持弹性效果</span>\n    physics<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">BouncingScrollPhysics</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> <span class="token class-name">AlwaysScrollableScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    slivers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">//我们需要实现的 SliverFlexibleHeader 组件</span>\n      <span class="token class-name">SliverFlexibleHeader</span><span class="token punctuation">(</span>\n        visibleExtent<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">,</span> <span class="token comment">// 初始状态在列表中占用的布局高度</span>\n        <span class="token comment">// 为了能根据下拉状态变化来定制显示的布局，我们通过一个 builder 来动态构建布局。</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> availableHeight<span class="token punctuation">,</span> direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;tap&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//测试是否可以响应事件</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>\n              image<span class="token punctuation">:</span> <span class="token class-name">AssetImage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              width<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>\n              height<span class="token punctuation">:</span> availableHeight<span class="token punctuation">,</span>\n              alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>bottomCenter<span class="token punctuation">,</span>\n              fit<span class="token punctuation">:</span> <span class="token class-name">BoxFit</span><span class="token punctuation">.</span>cover<span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// 构建一个list</span>\n      <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们的重点是实现 SliverFlexibleHeader，由于涉及到 Sliver 布局，通过现有组件很难组合实现我们想要的功能，所以我们通过定制 RenderObject 的方式来实现它。为了能根据下拉位置的变化来动态调整，SliverFlexibleHeader 中我们通过一个 builder 来动态构建布局，当下拉位置发生变化时，builder 就会被回调。</p><p>为了清晰起见，我们先实现一个接收固定 widget 的 _SliverFlexibleHeader 组件，组件定义代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _SliverFlexibleHeader <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function">_SliverFlexibleHeader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>visibleExtent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> double visibleExtent<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">RenderObject</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token function">_FlexibleHeaderRenderSliver</span><span class="token punctuation">(</span>visibleExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">updateRenderObject</span><span class="token punctuation">(</span>\n      <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> _FlexibleHeaderRenderSliver renderObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    renderObject<span class="token punctuation">.</span><span class="token punctuation">.</span>visibleExtent <span class="token operator">=</span> visibleExtent<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们继承的既不是 StatelessWidget，也不是 StatefulWidget，这是因为这两个组件主要的作用是组合 Widget，而我们要自定义 RenderObject，则需要继承 RenderObjectWidget，考虑到_SliverFlexibleHeader 有一个子节点，我们可以直接继承 SingleChildRenderObjectWidget 类，这样我们可以省去一些和布局无关的代码，比如绘制和事件的点击测试，这些功能 SingleChildRenderObjectWidget 中已经帮我们处理了。</p><p>下面我们实现 _FlexibleHeaderRenderSliver，核心代码就在 performLayout 中，读者可参考注释：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _FlexibleHeaderRenderSliver <span class="token keyword">extends</span> <span class="token class-name">RenderSliverSingleBoxAdapter</span> <span class="token punctuation">{</span>\n    <span class="token function">_FlexibleHeaderRenderSliver</span><span class="token punctuation">(</span>double visibleExtent<span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> _visibleExtent <span class="token operator">=</span> visibleExtent<span class="token punctuation">;</span>\n  \n  double _lastOverScroll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  double _lastScrollOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  late double _visibleExtent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n\n  <span class="token keyword">set</span> <span class="token function">visibleExtent</span><span class="token punctuation">(</span>double value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可视长度发生变化，更新状态并重新布局</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_visibleExtent <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _lastOverScroll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      _visibleExtent <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token function">markNeedsLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 滑动距离大于_visibleExtent时则表示子节点已经在屏幕之外了</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>constraints<span class="token punctuation">.</span>scrollOffset <span class="token operator">&gt;</span> _visibleExtent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>scrollExtent<span class="token punctuation">:</span> _visibleExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 测试overlap,下拉过程中overlap会一直变化.</span>\n    double overScroll <span class="token operator">=</span> constraints<span class="token punctuation">.</span>overlap <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> constraints<span class="token punctuation">.</span>overlap<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> scrollOffset <span class="token operator">=</span> constraints<span class="token punctuation">.</span>scrollOffset<span class="token punctuation">;</span>\n\n    <span class="token comment">// 在Viewport中顶部的可视空间为该 Sliver 可绘制的最大区域。</span>\n    <span class="token comment">// 1. 如果Sliver已经滑出可视区域则 constraints.scrollOffset 会大于 _visibleExtent，</span>\n    <span class="token comment">//    这种情况我们在一开始就判断过了。</span>\n    <span class="token comment">// 2. 如果我们下拉超出了边界，此时 overScroll&gt;0，scrollOffset 值为0，所以最终的绘制区域为</span>\n    <span class="token comment">//    _visibleExtent + overScroll.</span>\n    double paintExtent <span class="token operator">=</span> _visibleExtent <span class="token operator">+</span> overScroll <span class="token operator">-</span> constraints<span class="token punctuation">.</span>scrollOffset<span class="token punctuation">;</span>\n    <span class="token comment">// 绘制高度不超过最大可绘制空间</span>\n    paintExtent <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>paintExtent<span class="token punctuation">,</span> constraints<span class="token punctuation">.</span>remainingPaintExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//对子组件进行布局，关于 layout 详细过程我们将在本书后面布局原理相关章节详细介绍，现在只需知道</span>\n    <span class="token comment">//子组件通过 LayoutBuilder可以拿到这里我们传递的约束对象（ExtraInfoBoxConstraints）</span>\n    child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n      constraints<span class="token punctuation">.</span><span class="token function">asBoxConstraints</span><span class="token punctuation">(</span>maxExtent<span class="token punctuation">:</span> paintExtent<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//最大为_visibleExtent，最小为 0</span>\n    double layoutExtent <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>_visibleExtent<span class="token punctuation">,</span> paintExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//设置geometry，Viewport 在布局时会用到</span>\n    geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>\n      scrollExtent<span class="token punctuation">:</span> layoutExtent<span class="token punctuation">,</span>\n      paintOrigin<span class="token punctuation">:</span> <span class="token operator">-</span>overScroll<span class="token punctuation">,</span>\n      paintExtent<span class="token punctuation">:</span> paintExtent<span class="token punctuation">,</span>\n      maxPaintExtent<span class="token punctuation">:</span> paintExtent<span class="token punctuation">,</span>\n      layoutExtent<span class="token punctuation">:</span> layoutExtent<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 performLayout 中我们通过 Viewport 传来的 SliverConstraints 结合子组件的高度，最终确定了 <code>_SliverFlexibleHeader</code> 的布局、绘制等相关信息，它们被保存在了 <code>geometry</code> 中，之后，Viewport 就可以读取 geometry 来确定 <code>_SliverFlexibleHeader</code> 在 Viewport 中的位置，然后进行绘制。读者可以手动修改一下 SliverGeometry 的各个属性，看看效果，这样可以加深理解。</p><p>现在还剩最后一个问题，<code>_SliverFlexibleHeader</code> 接收的是一个固定的 widget，我们如何在下拉位置发生变化时来重新构建 widget 呢？上面代码中，我们在 <code>_SliverFlexibleHeader</code> 的 performLayout 方法中，每当下拉位置发生变化，我们都会对其子组件重新进行 layout。那既然如此，我们可以创建一个 LayoutBuilder 用于在子组件重新布局时来动态构建 child。思路有了，那么实现很简单，我们看看最终的 SliverFlexibleHeader 实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">SliverFlexibleHeaderBuilder</span> <span class="token operator">=</span> <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>\n  <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  double maxExtent<span class="token punctuation">,</span>\n  <span class="token comment">//ScrollDirection direction,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SliverFlexibleHeader</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">SliverFlexibleHeader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>visibleExtent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">SliverFlexibleHeaderBuilder</span> builder<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> double visibleExtent<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_SliverFlexibleHeader</span><span class="token punctuation">(</span>\n      visibleExtent<span class="token punctuation">:</span> visibleExtent<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">builder</span><span class="token punctuation">(</span>\n            context<span class="token punctuation">,</span>\n            constraints<span class="token punctuation">.</span>maxHeight\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code> _SliverFlexibleHeader</code> 中每次对子组件进行布局时，都会触发 LayoutBuilder 来重新构建子 widget ，LayoutBuilder 中收到的 constraints 就是 <code> _SliverFlexibleHeader</code> 中对子组件进行布局时 传入的 constraints，即：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nchild<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n  <span class="token comment">//对子组件进行布局</span>\n  constraints<span class="token punctuation">.</span><span class="token function">asBoxConstraints</span><span class="token punctuation">(</span>maxExtent<span class="token punctuation">:</span> paintExtent<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传递额外的布局信息" tabindex="-1"><a class="header-anchor" href="#传递额外的布局信息" aria-hidden="true">#</a> 传递额外的布局信息</h3><p>在实际使用 SliverFlexibleHeader 时，我们有时在构建子 widget 时可能会依赖当前列表的滑动方向，当然我们可以在 SliverFlexibleHeader 的 builder 中记录前后的 availableHeight 的差来确定滑动方向，但是这样比较麻烦，需要使用者来手动处理。我们知道在滑动时，Sliver 的 SliverConstraints 中已经包含了 <code>userScrollDirection</code>，如果我们能将它经过统一的处理然后透传给 LayoutBuilder 的话就非常好好了，这样就不需要开发者在使用时自己维护滑动方向了！按照这个思路我们来实现一下。</p><p>首先我们遇到了第一个问题： LayoutBuilder 接收的参数我们没法指定。为此笔者想到了两种方案：</p><ol><li>我们知道在上面的场景中，在对子组件进行布局时我们传给子组件的约束只使用了最大长度，最小长度是没有用到的，那么我们可以将滑动方向通过最小长度传递给 LayoutBuilder，然后再 LayoutBuilder 中取出即可。</li><li>定义一个新类，让它继承自 <code>BoxConstraints</code>，然后再添加一个可以保存 scrollDirection 的属性。</li></ol><p>笔者试了一下，两种方案都能成功，那应该使用哪种方案呢？笔者建议使用方案 2 ，因为方案 1 有一个副作用就是会影响子组件布局。我们知道 LayoutBuilder 是在子组件 build 阶段执行的，当我们设置了最小长度后，我们虽然在 build 阶段没有用到它，但是在子组件在布局阶段仍然会应用此约束，所以最终还会影响子组件的布局。</p><p>下面我们按照方案 2 来实现：定义一个 ExtraInfoBoxConstraints 类，它可以携带约束之外的信息，为了尽可能通用，我们使用泛型：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BoxConstraints</span> <span class="token punctuation">{</span>\n  <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token punctuation">(</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>extra<span class="token punctuation">,</span>\n    <span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>\n          minWidth<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>minWidth<span class="token punctuation">,</span>\n          minHeight<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>minHeight<span class="token punctuation">,</span>\n          maxWidth<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth<span class="token punctuation">,</span>\n          maxHeight<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 额外的信息</span>\n  <span class="token keyword">final</span> <span class="token class-name">T</span> extra<span class="token punctuation">;</span>\n  \n  <span class="token metadata function">@override</span>\n  bool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> other <span class="token operator">is</span> <span class="token class-name">ExtraInfoBoxConstraints</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token keyword">super</span> <span class="token operator">==</span> other <span class="token operator">&amp;&amp;</span>\n        other<span class="token punctuation">.</span>extra <span class="token operator">==</span> extra<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  int <span class="token keyword">get</span> hashCode <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">hashValues</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>hashCode<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码比较简单，要说明的是我们重载了“==”运算符，这是因为 Flutter 在布局期间在特定的情况下会检测前后两次 constraints 是否相等然后来决定是否需要重新布局，所以我们需要重载“==”运算符，否则可能会在最大/最小宽高不变但 extra 发生变化时不会触发 child 重新布局，这时也就不会触发 LayoutBuilder，这明显不符合预期，因为我们希望 extra 发生变化时，会触发 LayoutBuilder 重新构建 child。</p><p>首先我们修改 <code>__FlexibleHeaderRenderSliver</code> 的 performLayout 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token comment">//对子组件进行布局，子组件通过 LayoutBuilder可以拿到这里我们传递的约束对象（ExtraInfoBoxConstraints）</span>\n  child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n  <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token punctuation">(</span>\n    direction<span class="token punctuation">,</span> <span class="token comment">//传递滑动方向</span>\n    constraints<span class="token punctuation">.</span><span class="token function">asBoxConstraints</span><span class="token punctuation">(</span>maxExtent<span class="token punctuation">:</span> paintExtent<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改 SliverFlexibleHeader 实现，在 LayoutBuilder 中就可以获取到滑动方向：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">SliverFlexibleHeaderBuilder</span> <span class="token operator">=</span> <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>\n  <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  double maxExtent<span class="token punctuation">,</span>\n  <span class="token class-name">ScrollDirection</span> direction<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SliverFlexibleHeader</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">SliverFlexibleHeader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>visibleExtent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">SliverFlexibleHeaderBuilder</span> builder<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> double visibleExtent<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_SliverFlexibleHeader</span><span class="token punctuation">(</span>\n      visibleExtent<span class="token punctuation">:</span> visibleExtent<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">builder</span><span class="token punctuation">(</span>\n            context<span class="token punctuation">,</span>\n            constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n            <span class="token comment">// 获取滑动方向</span>\n            <span class="token punctuation">(</span>constraints <span class="token operator">as</span> <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollDirection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>extra<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们看一下 SliverFlexibleHeader 中确定滑动方向的逻辑：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 下拉过程中overlap会一直变化.</span>\ndouble overScroll <span class="token operator">=</span> constraints<span class="token punctuation">.</span>overlap <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> constraints<span class="token punctuation">.</span>overlap<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> scrollOffset <span class="token operator">=</span> constraints<span class="token punctuation">.</span>scrollOffset<span class="token punctuation">;</span>\n_direction <span class="token operator">=</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>idle<span class="token punctuation">;</span>\n\n<span class="token comment">// 根据前后的overScroll值之差确定列表滑动方向。注意，不能直接使用 constraints.userScrollDirection，</span>\n<span class="token comment">// 这是因为该参数只表示用户滑动操作的方向。比如当我们下拉超出边界时，然后松手，此时列表会弹回，即列表滚动</span>\n<span class="token comment">// 方向是向上，而此时用户操作已经结束，ScrollDirection 的方向是上一次的用户滑动方向(向下)，这是便有问题。</span>\n<span class="token keyword">var</span> distance <span class="token operator">=</span> overScroll <span class="token operator">&gt;</span> <span class="token number">0</span>\n  <span class="token operator">?</span> overScroll <span class="token operator">-</span> _lastOverScroll\n  <span class="token punctuation">:</span> _lastScrollOffset <span class="token operator">-</span> scrollOffset<span class="token punctuation">;</span>\n_lastOverScroll <span class="token operator">=</span> overScroll<span class="token punctuation">;</span>\n_lastScrollOffset <span class="token operator">=</span> scrollOffset<span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>constraints<span class="token punctuation">.</span>userScrollDirection <span class="token operator">==</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>idle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  _direction <span class="token operator">=</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>idle<span class="token punctuation">;</span>\n  _lastOverScroll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  _direction <span class="token operator">=</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  _direction <span class="token operator">=</span> <span class="token class-name">ScrollDirection</span><span class="token punctuation">.</span>reverse<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高度修正-scrolloffsetcorrection" tabindex="-1"><a class="header-anchor" href="#高度修正-scrolloffsetcorrection" aria-hidden="true">#</a> 高度修正 scrollOffsetCorrection</h3><p>如果 visibleExtent 变化时，我们看看效果，如图6-29所示：</p><p><img src="'+p+'" alt="图6-29"></p><p>可以看到有一个突兀地跳动，这是因为 visibleExtent 变化时会导致 layoutExtent 发生变化，也就是说 SliverFlexibleHeader 在屏幕中所占的布局高度会发生变化，所以列表就出现跳动。但这个跳动效果太突兀了，我们知道每一个 Sliver 的高度是通过 scrollExtent 属性预估出来的，因此我们需要修正一下 scrollExtent，但是我们不能直接修改 scrollExtent 的值，直接修改不会有任何动画效果，仍然会跳动，为此，SliverGeometry 提供了一个 scrollOffsetCorrection 属性，它专门用于修正 scrollExtent ，我们只需要将要修正差值传给scrollOffsetCorrection，然后 Sliver 会自动执行一个动画效果过渡到我们期望的高度。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token comment">// 是否需要修正scrollOffset. _visibleExtent 值更新后，</span>\n  <span class="token comment">// 为了防止突然的跳动，要先修正 scrollOffset。</span>\n  double<span class="token operator">?</span> _scrollOffsetCorrection<span class="token punctuation">;</span>\n\n  <span class="token keyword">set</span> <span class="token function">visibleExtent</span><span class="token punctuation">(</span>double value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可视长度发生变化，更新状态并重新布局</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_visibleExtent <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _lastOverScroll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      _reported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token comment">// 计算修正值</span>\n      _scrollOffsetCorrection <span class="token operator">=</span> value <span class="token operator">-</span> _visibleExtent<span class="token punctuation">;</span>\n      _visibleExtent <span class="token operator">=</span> value<span class="token punctuation">;</span>\n      <span class="token function">markNeedsLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// _visibleExtent 值更新后，为了防止突然的跳动，先修正 scrollOffset</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_scrollOffsetCorrection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>\n        <span class="token comment">//修正</span>\n        scrollOffsetCorrection<span class="token punctuation">:</span> _scrollOffsetCorrection<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _scrollOffsetCorrection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图6-30（动图可能太快，可以直接运行示例查看效果）：</p><p><img src="'+l+'" alt="图6-30"></p><h3 id="边界" tabindex="-1"><a class="header-anchor" href="#边界" aria-hidden="true">#</a> 边界</h3><p>在 SliverFlexibleHeader 构建子组件时开发者可能会依赖“当前的可用高度是否为0”来做一些特殊处理，比如记录是否子组件已经离开了屏幕。但是根据上面的实现，当用户滑动非常快时，子组件离开屏幕时的最后一次布局时传递的约束的 maxExtent 可能不为 0，而当 constraints.scrollOffset 大于 _visibleExtent 时我们在 performLayout 的一开始就返回了，因此 LayoutBuilder 的 builder 中就有可能收不到 maxExtent 为 0 时的回调。为了解决这个问题，我们只需要在每次 Sliver 离开屏幕时调用一次 child.layout 同时 将maxExtent 指定为 0 即可，为此我们修改一下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>scrollExtent<span class="token punctuation">:</span> _visibleExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//当已经完全滑出屏幕时</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>constraints<span class="token punctuation">.</span>scrollOffset <span class="token operator">&gt;</span> _visibleExtent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>scrollExtent<span class="token punctuation">:</span> _visibleExtent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 通知 child 重新布局，注意，通知一次即可，如果不通知，滑出屏幕后，child 在最后</span>\n      <span class="token comment">// 一次构建时拿到的可用高度可能不为 0。因为使用者在构建子节点的时候，可能会依赖</span>\n      <span class="token comment">// &quot;当前的可用高度是否为0&quot; 来做一些特殊处理，比如记录是否子节点已经离开了屏幕，</span>\n      <span class="token comment">// 因此，我们需要在离开屏幕时确保LayoutBuilder的builder会被调用一次（构建子组件）。</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_reported<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _reported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n          <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token punctuation">(</span>\n            _direction<span class="token punctuation">,</span> <span class="token comment">//传递滑动方向</span>\n            constraints<span class="token punctuation">.</span><span class="token function">asBoxConstraints</span><span class="token punctuation">(</span>maxExtent<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token comment">//我们不会使用自节点的 Size, 关于此参数更详细的内容见本书后面关于layout原理的介绍</span>\n          parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//子组件回到了屏幕中，重置通知状态</span>\n    _reported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此大功告成，完整代码见本书附带源码。</p><h2 id="_6-11-3-sliverpersistentheadertobox" tabindex="-1"><a class="header-anchor" href="#_6-11-3-sliverpersistentheadertobox" aria-hidden="true">#</a> 6.11.3 SliverPersistentHeaderToBox</h2><p>我们在上一节介绍了 SliverPersistentHeader，在使用时需要遵守两个规则 ：</p><ol><li><p>必须显式指定高度。</p></li><li><p>如果我们在使用 SliverPersistentHeader 构建子组件时需要依赖 overlapsContent 参数，则必须保证之前至少还有一个 SliverPersistentHeader 或 SliverAppBar。</p></li></ol><p>遵守上面这两条规则对于开发者来说心智负担还是较重的，比如对于规则 1，大多数时候我们是不知道 Header 具体的高度的，我们期望直接传一个 widget ，这个 widget 的实际高度 SliverPersistentHeader 能自动算出来。对于规则 2 就更不用说，不知道这个准是要踩坑的。综上，本节我们自定义一个 SliverPersistentHeaderToBox，它可以将任意 RenderBox 适配为可以固定到顶部的 Sliver 而不用显式指定高度，同时避免上面的问题 2。</p><p>第一步：我们先看一下定义 SliverPersistentHeaderToBox。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">SliverPersistentHeaderToBoxBuilder</span> <span class="token operator">=</span> <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>\n  <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  double maxExtent<span class="token punctuation">,</span> <span class="token comment">//当前可用最大高度</span>\n  bool fixed<span class="token punctuation">,</span> <span class="token comment">// 是否已经固定</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SliverPersistentHeaderToBox</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 默认构造函数，直接接受一个 widget，不用显式指定高度</span>\n  <span class="token class-name">SliverPersistentHeaderToBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> builder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> child<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token comment">// builder 构造函数，需要传一个 builder，同样不需要显式指定高度</span>\n  <span class="token class-name">SliverPersistentHeaderToBox</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">SliverPersistentHeaderToBoxBuilder</span> builder<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_SliverPersistentHeaderToBox</span><span class="token punctuation">(</span>\n      <span class="token comment">// 通过 LayoutBuilder接收 Sliver 传递给子组件的布局约束信息</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">builder</span><span class="token punctuation">(</span>\n            context<span class="token punctuation">,</span>\n            constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n            <span class="token comment">//约束中需要传递的额外信息是一个bool类型，表示 Sliver 是否已经固定到顶部</span>\n            <span class="token punctuation">(</span>constraints <span class="token operator">as</span> <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>extra<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面的 SliverFlexibleHeader 很像，不同的是SliverPersistentHeaderToBox传递给 child 的约束中的额外信息是一个 bool 类型，表示是否已经固定到顶部。</p><p>第二步：实现 _SliverPersistentHeaderToBox。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _RenderSliverPersistentHeaderToBox <span class="token keyword">extends</span> <span class="token class-name">RenderSliverSingleBoxAdapter</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">.</span>zero<span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n      <span class="token class-name">ExtraInfoBoxConstraints</span><span class="token punctuation">(</span>\n        <span class="token comment">//只要 constraints.scrollOffset不为0，则表示已经有内容在当前Sliver下面了，即已经固定到顶部了</span>\n        constraints<span class="token punctuation">.</span>scrollOffset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        constraints<span class="token punctuation">.</span><span class="token function">asBoxConstraints</span><span class="token punctuation">(</span>\n          <span class="token comment">// 我们将剩余的可绘制空间作为 header 的最大高度约束传递给 LayoutBuilder</span>\n          maxExtent<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>remainingPaintExtent<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">//我们要根据child大小来确定Sliver大小，所以后面需要用到child的大小（size）信息</span>\n      parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 子节点 layout 后就能获取它的大小了</span>\n    double childExtent<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>constraints<span class="token punctuation">.</span>axis<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">:</span>\n        childExtent <span class="token operator">=</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">:</span>\n        childExtent <span class="token operator">=</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    geometry <span class="token operator">=</span> <span class="token class-name">SliverGeometry</span><span class="token punctuation">(</span>\n      scrollExtent<span class="token punctuation">:</span> childExtent<span class="token punctuation">,</span>\n      paintOrigin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 固定，如果不想固定应该传` - constraints.scrollOffset`</span>\n      paintExtent<span class="token punctuation">:</span> childExtent<span class="token punctuation">,</span>\n      maxPaintExtent<span class="token punctuation">:</span> childExtent<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 重要，必须重写，下面介绍。</span>\n  <span class="token metadata function">@override</span>\n  double <span class="token function">childMainAxisPosition</span><span class="token punctuation">(</span><span class="token class-name">RenderBox</span> child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有四点需要注意：</p><ol><li>constraints.scrollOffset 不为 0 时，则表示已经固定到顶部了。</li><li>我们在布局阶段拿到子组件的 size 信息，然后通过通过子组件的大小来确定 Sliver 大小（设置geometry）。 这样就不再需要我们显式传高度值了。</li><li>我们通过给 paintOrigin 设为 0 来实现顶部固定效果；不固定到顶部时应该传 <code> - constraints.scrollOffset</code>，这个需要读者好好体会一下，也可以运行示例修改一下参数值来看看效果。</li><li>必须要重写 <code>childMainAxisPosition</code> ，否则事件便会失效，该方法的返回值在“点击测试”中会用到。关于点击测试我们会在本书面介绍， 读者现在只需要知道该函数应该返回 paintOrigin 的位置即可。</li></ol><p>大功告成！下面我们来测试一下！我们创建两个 header：</p><ol><li>第一个 header：当没有滑动到顶部时，外观和正常列表项一样；当固定到顶部后，显示一个阴影。为了实现这个效果我们需要通过 SliverPersistentHeaderToBox.builder 来动态创建。</li><li>第二个 header: 一个普通的列表项，它接受一个 widget。</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SliverPersistentHeaderToBoxRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">SliverPersistentHeaderToBoxRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">CustomScrollView</span><span class="token punctuation">(</span>\n      slivers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">SliverPersistentHeaderToBox</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> headerBuilder<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">SliverPersistentHeaderToBox</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token function">wTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Title 2&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 当 header 固定后显示阴影</span>\n  <span class="token class-name">Widget</span> <span class="token function">headerBuilder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> maxExtent<span class="token punctuation">,</span> fixed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取当前应用主题，关于主题相关内容将在后面章节介绍，现在</span>\n    <span class="token comment">// 我们要从主题中获取一些颜色。</span>\n    <span class="token keyword">var</span> theme <span class="token operator">=</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Material</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        color<span class="token punctuation">:</span> fixed <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white <span class="token punctuation">:</span> theme<span class="token punctuation">.</span>canvasColor<span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token function">wTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Title 1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      elevation<span class="token punctuation">:</span> fixed <span class="token operator">?</span> <span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      shadowColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>appBarTheme<span class="token punctuation">.</span>shadowColor<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 我们约定小写字母 w 开头的函数代表是需要构建一个 Widget，这比 buildXX 会更简洁</span>\n  <span class="token class-name">Widget</span> <span class="token function">wTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n      <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-31：</p><p><img src="'+i+'" alt="图6-31"></p><p>我们实现的 SliverPersistentHeaderToBox 不仅不需要显式指定高度，而且它的 builder 函数的第三个参数值也正常了（和SliverPersistentHeaderToBox 数量无关）。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>如果我们要使用 SliverAppBar，则建议使用 SliverPersistentHeader ，因为 SliverPersistentHeader 设计的初衷就是为了实现 SliverAppBar，所以它们一起使用时会有更好的协同。如果将 SliverPersistentHeaderToBox 和 SliverAppBar 一起使用，则可能又会导致其它问题，所以建议就是：<strong>在没有使用 SliverAppBar 时，用 SliverPersistentHeaderToBox，如果使用了 SliverAppBar ，用SliverPersistentHeader</strong>。</p><h2 id="_6-11-4-总结" tabindex="-1"><a class="header-anchor" href="#_6-11-4-总结" aria-hidden="true">#</a> 6.11.4 总结</h2><p>本节先介绍了 Sliver 布局模型，然后对比了和 盒布局模型的区别，至此 Flutter 中的两种布局模型就都介绍了。然后通过自定义 SliverFlexibleHeader 和 SliverPersistentHeaderToBox 两个 Sliver 来演示了自定义 Sliver 的步骤，同时加深了对 Sliver 布局的理解。</p><p>这里需要提醒读者，大多数应用的大多数页面都会涉及到滚动列表，因此理解并掌握可滚动组件和 Sliver 布局协议原理很有必要。</p>',77)],c={},u=(0,a(18580).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);