"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[2795],{39528:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-e096ec2c","path":"/chapter11/dio.html","title":"11.3 Http请求库-dio","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.1,"words":931},"filePathRelative":"chapter11/dio.md","localizedDate":"2022年6月6日","excerpt":""}')},30437:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6808);const p=(0,t._)("h1",{id:"_11-3-http请求库-dio",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_11-3-http请求库-dio","aria-hidden":"true"},"#"),(0,t.Uk)(" 11.3 Http请求库-dio")],-1),e={href:"https://github.com/flutterchina/dio",target:"_blank",rel:"noopener noreferrer"},o=(0,t.uE)('<blockquote><p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传/下载、超时等。dio的使用方式随着其版本升级可能会发生变化，如果本节所述内容和dio官方有差异，请以dio官方文档为准。</p></blockquote><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><p>引入dio:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">dio</span><span class="token punctuation">:</span> ^x.x.x <span class="token comment">#请使用pub上的最新版本</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>导入并创建dio实例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:dio/dio.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token class-name">Dio</span> dio <span class="token operator">=</span>  <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就可以通过 dio实例来发起网络请求了，注意，一个dio实例可以发起多个http请求，一般来说，APP只有一个http数据源时，dio应该使用单例模式。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>发起 <code>GET</code> 请求 :</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Response</span> response<span class="token punctuation">;</span>\nresponse<span class="token operator">=</span><span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/test?id=12&amp;name=wendu&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<code>GET</code>请求我们可以将query参数通过对象来传递，上面的代码等同于：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>response<span class="token operator">=</span><span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/test&quot;</span></span><span class="token punctuation">,</span>queryParameters<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;wendu&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发起一个 <code>POST</code> 请求:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>response<span class="token operator">=</span><span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/test&quot;</span></span><span class="token punctuation">,</span>data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;wendu&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发起多个并发请求:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>response<span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">[</span>dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/info&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/token&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载文件:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>response<span class="token operator">=</span><span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;https://www.google.com/&quot;</span></span><span class="token punctuation">,</span>_savePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发送 FormData:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FormData</span> formData <span class="token operator">=</span> <span class="token class-name">FormData</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;wendux&quot;</span></span><span class="token punctuation">,</span>\n   <span class="token string-literal"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresponse <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/info&quot;</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> formData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发送的数据是FormData，则dio会将请求header的<code>contentType</code>设为“multipart/form-data”。</p><p>通过FormData上传多个文件:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FormData</span> formData <span class="token operator">=</span> <span class="token class-name">FormData</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;wendux&quot;</span></span><span class="token punctuation">,</span>\n   <span class="token string-literal"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n   <span class="token string-literal"><span class="token string">&quot;file1&quot;</span></span><span class="token punctuation">:</span> <span class="token class-name">UploadFileInfo</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;./upload.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;upload1.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n   <span class="token string-literal"><span class="token string">&quot;file2&quot;</span></span><span class="token punctuation">:</span> <span class="token class-name">UploadFileInfo</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;./upload.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;upload2.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token comment">// 支持文件数组上传</span>\n   <span class="token string-literal"><span class="token string">&quot;files&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token class-name">UploadFileInfo</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;./example/upload.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;upload.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">UploadFileInfo</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;./example/upload.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;upload.txt&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresponse <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;/info&quot;</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> formData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，dio内部仍然使用HttpClient发起的请求，所以代理、请求认证、证书校验等和HttpClient是相同的，我们可以在<code>onHttpClientCreate </code>回调中设置，例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span>dio<span class="token punctuation">.</span>httpClientAdapter <span class="token operator">as</span> <span class="token class-name">DefaultHttpClientAdapter</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onHttpClientCreate <span class="token operator">=</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//设置代理 </span>\n    client<span class="token punctuation">.</span>findProxy <span class="token operator">=</span> <span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;PROXY 192.168.1.2:8888&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">//校验证书</span>\n    httpClient<span class="token punctuation">.</span>badCertificateCallback<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">X509Certificate</span> cert<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> int port<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span>pem<span class="token operator">==</span>PEM<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//证书一致，则允许发送数据</span>\n     <span class="token punctuation">}</span>\n     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>onHttpClientCreate </code>会在当前dio实例内部需要创建HttpClient时调用，所以通过此回调配置HttpClient会对整个dio实例生效，如果你想针对某个应用请求单独的代理或证书校验策略，可以创建一个新的dio实例即可。</p><p>怎么样，是不是很简单，除了这些基本的用法，dio还支持请求配置、拦截器等，官方资料比较详细，故本书不再赘述，详情可以参考dio主页：https://github.com/flutterchina/dio 。 下一节我们将使用dio实现一个分块下载器。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><p>我们通过Github开放的API来请求flutterchina组织下的所有公开的开源项目，实现：</p><ol><li>在请求阶段弹出loading</li><li>请求结束后，如果请求失败，则展示错误信息；如果成功，则将项目名称列表展示出来。</li></ol><p>代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _FutureBuilderRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FutureBuilderRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">Dio</span> _dio <span class="token operator">=</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">FutureBuilder</span><span class="token punctuation">(</span>\n          future<span class="token punctuation">:</span> _dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;https://api.github.com/orgs/flutterchina/repos&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//请求完成</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState <span class="token operator">==</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token class-name">Response</span> response <span class="token operator">=</span> snapshot<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n              <span class="token comment">//发生错误</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n              <span class="token comment">//请求成功，通过项目信息构建用于显示项目名称的ListView</span>\n              <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>\n                children<span class="token punctuation">:</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n                    <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;full_name&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">//请求未完成时弹出loading</span>\n            <span class="token keyword">return</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',32),c={},l=(0,a(18580).Z)(c,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("p",null,[(0,t.Uk)("通过上一节介绍，我们可以发现直接使用HttpClient发起网络请求是比较麻烦的，很多事情得我们手动处理，如果再涉及到文件上传/下载、Cookie管理等就会非常繁琐。幸运的是，Dart社区有一些第三方http请求库，用它们来发起http请求将会简单的多，本节我们介绍一下目前人气较高的"),(0,t._)("a",e,[(0,t.Uk)("dio"),(0,t.Wm)(a)]),(0,t.Uk)("库。")]),o])}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);