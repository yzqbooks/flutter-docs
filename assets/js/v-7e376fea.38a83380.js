"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[1638],{64976:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-7e376fea","path":"/chapter11/socket.html","title":"11.6 使用Socket API","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"chapter11/socket.md","localizedDate":"2022年6月6日","excerpt":""}')},85822:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const p=a.p+"assets/img/11-3.e34e0907.png",e=[(0,t.uE)('<h1 id="_11-6-使用socket-api" tabindex="-1"><a class="header-anchor" href="#_11-6-使用socket-api" aria-hidden="true">#</a> 11.6 使用Socket API</h1><p>我们之前介绍的 Http 协议和 WebSocket 协议都属于应用层协议，除了它们，应用层协议还有很多如：SMTP、FTP 等，这些应用层协议的实现都是通过 Socket API 来实现的。其实，操作系统中提供的原生网络请求 API 是标准的，在 C 语言的 Socket 库中，它主要提供了端到端建立链接和发送数据的基础API，而高级编程语言中的Socket库其实都是对操作系统的 Socket API 的一个封装。所以，如果我们需要自定义协议或者想直接来控制管理网络链接、又或者我们觉得自带的 HttpClient 不好用想重新实现一个，这时我们就需要使用Socket。Flutter 的 Socket API 在 dart:io 包中，下面我们看一个使用 Socket 实现简单 http 请求的示例，以请求百度首页为例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SocketRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">SocketRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">FutureBuilder</span><span class="token punctuation">(</span>\n      future<span class="token punctuation">:</span> <span class="token function">_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> snapShot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>snapShot<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token comment">//建立连接</span>\n    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Socket</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;baidu.com&quot;</span></span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//根据http协议，发送请求头</span>\n    socket<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;GET / HTTP/1.1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    socket<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Host:baidu.com&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    socket<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Connection:close&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    socket<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> socket<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送</span>\n    <span class="token comment">//读取返回内容，按照utf8解码为字符串</span>\n    <span class="token class-name">String</span> _response <span class="token operator">=</span> <span class="token keyword">await</span> utf8<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> _response<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，使用Socket需要我们自己实现Http协议（需要自己实现和服务器的通信过程），本例只是一个简单示例，没有处理重定向、cookie等。本示例完整代码参考示例demo，运行后效果如图11-3所示：</p><p><img src="'+p+'" alt="图11-3"></p><p>可以看到响应内容分两个部分，第一部分是响应头，第二部分是响应体，服务端可以根据请求信息动态来输出响应体。由于本示例请求头比较简单，所以响应体和浏览器中访问的会有差别，读者可以补充一些请求头(如user-agent)来看看输出的变化。</p>',6)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);