"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[7400],{64241:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-7d230d86","path":"/chapter6/custom_scrollview.html","title":"6.10 CustomScrollView 和 Slivers","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.10.1 CustomScrollView","slug":"_6-10-1-customscrollview","link":"#_6-10-1-customscrollview","children":[]},{"level":2,"title":"6.10.2 Flutter 中常用的 Sliver","slug":"_6-10-2-flutter-中常用的-sliver","link":"#_6-10-2-flutter-中常用的-sliver","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"SliverToBoxAdapter","slug":"slivertoboxadapter","link":"#slivertoboxadapter","children":[]},{"level":3,"title":"SliverPersistentHeader","slug":"sliverpersistentheader","link":"#sliverpersistentheader","children":[]}]},{"level":2,"title":"6.10.3 总结","slug":"_6-10-3-总结","link":"#_6-10-3-总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":11.09,"words":3328},"filePathRelative":"chapter6/custom_scrollview.md","localizedDate":"2022年6月6日","excerpt":""}')},37026:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6808);const t=a.p+"assets/img/6-22.25494517.gif",p=a.p+"assets/img/6-23.7b72a971.gif",i=a.p+"assets/img/6-24.43c30923.png",l=a.p+"assets/img/6-25.f20b4022.png",c=a.p+"assets/img/6-26.0596c265.png",o=a.p+"assets/img/6-27.6385de34.gif",u=[(0,e.uE)('<h1 id="_6-10-customscrollview-和-slivers" tabindex="-1"><a class="header-anchor" href="#_6-10-customscrollview-和-slivers" aria-hidden="true">#</a> 6.10 CustomScrollView 和 Slivers</h1><h2 id="_6-10-1-customscrollview" tabindex="-1"><a class="header-anchor" href="#_6-10-1-customscrollview" aria-hidden="true">#</a> 6.10.1 CustomScrollView</h2><p>前面介绍的 ListView、GridView、PageView 都是一个<strong>完整</strong>的可滚动组件，所谓完整是指它们都包括Scrollable 、 Viewport 和 Sliver。假如我们想要在一个页面中，同时包含多个可滚动组件，且使它们的滑动效果能统一起来，比如：我们想将已有的两个沿垂直方向滚动的 ListView 成一个 ListView ，这样在第一ListView 滑动到底部时能自动接上第二 ListView，如果尝试写一个 demo：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Widget</span> <span class="token function">buildTwoListView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> listView <span class="token operator">=</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n      itemCount<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n      itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token class-name">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> listView<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Divider</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> listView<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-22所示：</p><p><img src="'+t+'" alt="图6-22"></p><p>页面中有两个 ListView，各占可视区域一半高度，虽然能够显式出来，但每一个 ListView 只会响应自己可视区域中滑动，实现不了我们想要的效果。之所以会这样的原因是两个 ListView 都有自己独立的 Scrollable 、 Viewport 和 Sliver，既然如此，我们自己创建一个共用的 Scrollable 和 Viewport 对象，然后再将两个 ListView 对应的 Sliver 添加到这个共用的 Viewport 对象中就可以实现我们想要的效果了。如果这个工作让开发者自己来做无疑是比较麻烦的，因此 Flutter 提供了一个 <code>CustomScrollView</code> 组件来帮助我们创建一个公共的 Scrollable 和 Viewport ，然后它的 slivers 参数接受一个 Sliver 数组，这样我们就可以使用CustomScrollView 方面的实现我们期望的功能了：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">buildTwoSliverList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// SliverFixedExtentList 是一个 Sliver，它可以生成高度相同的列表项。</span>\n  <span class="token comment">// 再次提醒，如果列表项高度相同，我们应该优先使用SliverFixedExtentList </span>\n  <span class="token comment">// 和 SliverPrototypeExtentList，如果不同，使用 SliverList.</span>\n  <span class="token keyword">var</span> listView <span class="token operator">=</span> <span class="token class-name">SliverFixedExtentList</span><span class="token punctuation">(</span>\n    itemExtent<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token comment">//列表项高度固定</span>\n    delegate<span class="token punctuation">:</span> <span class="token class-name">SliverChildBuilderDelegate</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span>_<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      childCount<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 使用</span>\n  <span class="token keyword">return</span> <span class="token class-name">CustomScrollView</span><span class="token punctuation">(</span>\n    slivers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      listView<span class="token punctuation">,</span>\n      listView<span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果图6-23所示：</p><p><img src="'+p+'" alt="图6-23"></p><p>可以看到我们期望的效果实现了。</p><p>综上，<code>CustomScrollView</code> 的主要功能是提供一个公共的的 Scrollable 和 Viewport，来组合多个 Sliver，CustomScrollView 的结构如图6-24：</p><p><img src="'+i+'" alt="图6-24"></p><h2 id="_6-10-2-flutter-中常用的-sliver" tabindex="-1"><a class="header-anchor" href="#_6-10-2-flutter-中常用的-sliver" aria-hidden="true">#</a> 6.10.2 Flutter 中常用的 Sliver</h2><p>之前小节介绍过的可滚动组件都有对应的 Sliver：</p><table><thead><tr><th>Sliver名称</th><th>功能</th><th>对应的可滚动组件</th></tr></thead><tbody><tr><td>SliverList</td><td>列表</td><td>ListView</td></tr><tr><td>SliverFixedExtentList</td><td>高度固定的列表</td><td>ListView，指定<code>itemExtent</code>时</td></tr><tr><td>SliverAnimatedList</td><td>添加/删除列表项可以执行动画</td><td>AnimatedList</td></tr><tr><td>SliverGrid</td><td>网格</td><td>GridView</td></tr><tr><td>SliverPrototypeExtentList</td><td>根据原型生成高度固定的列表</td><td>ListView，指定<code>prototypeItem</code> 时</td></tr><tr><td>SliverFillViewport</td><td>包含多个子组件，每个都可以填满屏幕</td><td>PageView</td></tr></tbody></table><p>除了和列表对应的 Sliver 之外还有一些用于对 Sliver 进行布局、装饰的组件，<strong>它们的子组件必须是 Sliver</strong>，我们列举几个常用的：</p><table><thead><tr><th>Sliver名称</th><th>对应 RenderBox</th></tr></thead><tbody><tr><td>SliverPadding</td><td>Padding</td></tr><tr><td>SliverVisibility、SliverOpacity</td><td>Visibility、Opacity</td></tr><tr><td>SliverFadeTransition</td><td>FadeTransition</td></tr><tr><td>SliverLayoutBuilder</td><td>LayoutBuilder</td></tr></tbody></table><p>还有一些其它常用的 Sliver：</p><table><thead><tr><th>Sliver名称</th><th>说明</th></tr></thead><tbody><tr><td>SliverAppBar</td><td>对应 AppBar，主要是为了在 CustomScrollView 中使用。</td></tr><tr><td>SliverToBoxAdapter</td><td>一个适配器，可以将 RenderBox 适配为 Sliver，后面介绍。</td></tr><tr><td>SliverPersistentHeader</td><td>滑动到顶部时可以固定住，后面介绍。</td></tr></tbody></table><blockquote><p>Sliver系列 Widget 比较多，我们不会一一介绍，读者只需记住它的特点，需要时再去查看文档即可。上面之所以说“大多数”Sliver都和可滚动组件对应，是由于还有一些如SliverPadding、SliverAppBar 等是和可滚动组件无关的，它们主要是为了结合CustomScrollView一起使用，这是因为<strong>CustomScrollView的子组件必须都是Sliver</strong>。</p></blockquote><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 因为本路由没有使用 Scaffold，为了让子级Widget(如Text)使用</span>\n<span class="token comment">// Material Design 默认的样式风格,我们使用 Material 作为本路由的根。</span>\n<span class="token class-name">Material</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">CustomScrollView</span><span class="token punctuation">(</span>\n    slivers<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n      <span class="token comment">// AppBar，包含一个导航栏.</span>\n      <span class="token class-name">SliverAppBar</span><span class="token punctuation">(</span>\n        pinned<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 滑动到顶端时会固定住</span>\n        expandedHeight<span class="token punctuation">:</span> <span class="token number">250.0</span><span class="token punctuation">,</span>\n        flexibleSpace<span class="token punctuation">:</span> <span class="token class-name">FlexibleSpaceBar</span><span class="token punctuation">(</span>\n          title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Demo&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          background<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>\n            <span class="token string-literal"><span class="token string">&quot;./imgs/sea.png&quot;</span></span><span class="token punctuation">,</span>\n            fit<span class="token punctuation">:</span> <span class="token class-name">BoxFit</span><span class="token punctuation">.</span>cover<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">SliverPadding</span><span class="token punctuation">(</span>\n        padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        sliver<span class="token punctuation">:</span> <span class="token class-name">SliverGrid</span><span class="token punctuation">(</span>\n          <span class="token comment">//Grid</span>\n          gridDelegate<span class="token punctuation">:</span> <span class="token class-name">SliverGridDelegateWithFixedCrossAxisCount</span><span class="token punctuation">(</span>\n            crossAxisCount<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//Grid按两列显示</span>\n            mainAxisSpacing<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>\n            crossAxisSpacing<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>\n            childAspectRatio<span class="token punctuation">:</span> <span class="token number">4.0</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          delegate<span class="token punctuation">:</span> <span class="token class-name">SliverChildBuilderDelegate</span><span class="token punctuation">(</span>\n            <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">//创建子widget</span>\n              <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n                alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n                color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>cyan<span class="token punctuation">[</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;grid item </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            childCount<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">SliverFixedExtentList</span><span class="token punctuation">(</span>\n        itemExtent<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>\n        delegate<span class="token punctuation">:</span> <span class="token class-name">SliverChildBuilderDelegate</span><span class="token punctuation">(</span>\n          <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//创建列表项</span>\n            <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n              alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n              color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightBlue<span class="token punctuation">[</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;list item </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          childCount<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码分为三部分：</p><ul><li>头部<code>SliverAppBar</code>：<code>SliverAppBar</code>对应<code>AppBar</code>，两者不同之处在于<code>SliverAppBar</code>可以集成到<code>CustomScrollView</code>。<code>SliverAppBar</code>可以结合<code>FlexibleSpaceBar</code>实现Material Design中头部伸缩的模型，具体效果，读者可以运行该示例查看。</li><li>中间的<code>SliverGrid</code>：它用<code>SliverPadding</code>包裹以给<code>SliverGrid</code>添加补白。<code>SliverGrid</code>是一个两列，宽高比为4的网格，它有20个子组件。</li><li>底部<code>SliverFixedExtentList</code>：它是一个所有子元素高度都为50像素的列表。</li></ul><p>运行效果如图6-25、6-26所示：</p><p><img src="'+l+'" alt="图6-25"><img src="'+c+'" alt="图6-26"></p><h3 id="slivertoboxadapter" tabindex="-1"><a class="header-anchor" href="#slivertoboxadapter" aria-hidden="true">#</a> SliverToBoxAdapter</h3><p>在实际布局中，我们通常需要往 CustomScrollView 中添加一些自定义的组件，而这些组件并非都有 Sliver 版本，为此 Flutter 提供了一个 SliverToBoxAdapter 组件，它是一个适配器：可以将 RenderBox 适配为 Sliver。比如我们想在列表顶部添加一个可以横向滑动的 PageView，可以使用 SliverToBoxAdapter 来配置：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">CustomScrollView</span><span class="token punctuation">(</span>\n  slivers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token class-name">SliverToBoxAdapter</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n        height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">PageView</span><span class="token punctuation">(</span>\n          children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">buildSliverFixedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，上面的代码是可以正常运行的，但是如果将 PageView 换成一个滑动方向和 CustomScrollView 一致的 ListView 则不会正常工作！原因是：CustomScrollView 组合 Sliver 的原理是为所有子 Sliver 提供一个共享的 Scrollable，然后统一处理指定滑动方向的滑动事件，如果 Sliver 中引入了其它的 Scrollable，则滑动事件便会冲突。上例中 PageView 之所以能正常工作，是因为 PageView 的 Scrollable 只处理水平方向的滑动，而 CustomScrollView 是处理垂直方向的，两者并未冲突，所以不会有问题，但是换一个也是垂直方向的 ListView 时则不能正常工作，最终的效果是，在ListView内滑动时只会对ListView 起作用，原因是滑动事件被 ListView 的 Scrollable 优先消费，CustomScrollView 的 Scrollable 便接收不到滑动事件了。</p><blockquote><p>Flutter 中手势的冲突时，默认的策略是子元素生效，这个我们将在后面事件处理相关章节介绍。</p></blockquote><p>所以我们可以得出一个结论：<strong>如果 CustomScrollView 有孩子也是一个完整的可滚动组件且它们的滑动方向一致，则 CustomScrollView 不能正常工作</strong>。要解决这个问题，可以使用 NestedScrollView，这个我们将在下一节介绍。</p><h3 id="sliverpersistentheader" tabindex="-1"><a class="header-anchor" href="#sliverpersistentheader" aria-hidden="true">#</a> SliverPersistentHeader</h3><p>SliverPersistentHeader 的功能是当滑动到 CustomScrollView 的顶部时，可以将组件固定在顶部。</p><p>需要注意， Flutter 中设计 SliverPersistentHeader 组件的初衷是为了实现 SliverAppBar，所以它的一些属性和回调在SliverAppBar 中才会用到。因此，如果我们要直接使用 SliverPersistentHeader，看到它的一些配置和参数会感到疑惑，使用起来会感觉有心智成本，为此，笔者会在下面介绍中指出哪些是需要我们重点关注的，哪些是可以忽略的，最后为了便于使用，我们会封装一个<code>SliverHeaderDelegate</code> ，通过它我们只需要配置我们关注的属性即可。</p><p>我们先看看 SliverPersistentHeader 的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">SliverPersistentHeader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n  <span class="token comment">// 构造 header 组件的委托</span>\n  required <span class="token class-name">SliverPersistentHeaderDelegate</span> delegate<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>pinned <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// header 滑动到可视区域顶部时是否固定在顶部</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>floating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 正文部分介绍</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>floating</code> 的做用是：<code>pinned</code> 为 false 时 ，则 header 可以滑出可视区域（CustomScrollView 的 Viewport）（不会固定到顶部），当用户再次向下滑动时，此时不管 header 已经被滑出了多远，它都会立即出现在可视区域顶部并固定住，直到继续下滑到 header 在列表中原来的位置时，header 才会重新回到原来的位置（不再固定在顶部）。 具体效果，我们后面会有示例，读者可以实际运行起来看看效果。</p><p><code>delegate</code> 是用于生成 header 的委托，类型为 SliverPersistentHeaderDelegate，它是一个抽象类，需要我们自己实现，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SliverPersistentHeaderDelegate</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// header 最大高度；pined为 true 时，当 header 刚刚固定到顶部时高度为最大高度。</span>\n  double <span class="token keyword">get</span> maxExtent<span class="token punctuation">;</span>\n  \n  <span class="token comment">// header 的最小高度；pined为true时，当header固定到顶部，用户继续往上滑动时，header</span>\n  <span class="token comment">// 的高度会随着用户继续上滑从 maxExtent 逐渐减小到 minExtent</span>\n  double <span class="token keyword">get</span> minExtent<span class="token punctuation">;</span>\n\n  <span class="token comment">// 构建 header。</span>\n  <span class="token comment">// shrinkOffset取值范围[0,maxExtent],当header刚刚到达顶部时，shrinkOffset 值为0，</span>\n  <span class="token comment">// 如果用户继续向上滑动列表，shrinkOffset的值会随着用户滑动的偏移减小，直到减到0时。</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// overlapsContent：一般不建议使用，在使用时一定要小心，后面会解释。</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> double shrinkOffset<span class="token punctuation">,</span> bool overlapsContent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token comment">// header 是否需要重新构建；通常当父级的 StatefulWidget 更新状态时会触发。</span>\n  <span class="token comment">// 一般来说只有当 Delegate 的配置发生变化时，应该返回false，比如新旧的 minExtent、maxExtent</span>\n  <span class="token comment">// 等其它配置不同时需要返回 true，其余情况返回 false 即可。</span>\n  bool <span class="token function">shouldRebuild</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">SliverPersistentHeaderDelegate</span> oldDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 下面这几个属性是SliverPersistentHeader在SliverAppBar中时实现floating、snap </span>\n  <span class="token comment">// 效果时会用到，平时开发过程很少使用到，读者可以先不用理会。</span>\n  <span class="token class-name">TickerProvider</span><span class="token operator">?</span> <span class="token keyword">get</span> vsync <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token class-name">FloatingHeaderSnapConfiguration</span><span class="token operator">?</span> <span class="token keyword">get</span> snapConfiguration <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token class-name">OverScrollHeaderStretchConfiguration</span><span class="token operator">?</span> <span class="token keyword">get</span> stretchConfiguration <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token class-name">PersistentHeaderShowOnScreenConfiguration</span><span class="token operator">?</span> <span class="token keyword">get</span> showOnScreenConfiguration <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们最需要关注的就是<code>maxExtent</code> 和 <code>minExtent</code>；<code>pined </code>为<code>true</code> 时，当 header 刚刚固定到顶部，此时会对它应用 <code>maxExtent</code> （最大高度）；当用户继续往上滑动时，header 的高度会随着用户继续上滑从 <code>maxExtent</code> 逐渐减小到 <code>minExtent</code>。如果我们想让 header 高度固定，则将 <code>maxExtent</code> 和 <code>minExtent</code> 指定为同样的值即可。</p><p>为了构建 header 我们必须要定义一个类，让它继承自 SliverPersistentHeaderDelegate，这无疑会增加使用成本！为此，我们封装一个通用的委托构造器 SliverHeaderDelegate，通过它可以快速构建 SliverPersistentHeaderDelegate，实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">SliverHeaderBuilder</span> <span class="token operator">=</span> <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>\n    <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> double shrinkOffset<span class="token punctuation">,</span> bool overlapsContent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SliverHeaderDelegate</span> <span class="token keyword">extends</span> <span class="token class-name">SliverPersistentHeaderDelegate</span> <span class="token punctuation">{</span>\n  <span class="token comment">// child 为 header</span>\n  <span class="token class-name">SliverHeaderDelegate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>minHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> builder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> child<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">assert</span><span class="token punctuation">(</span>minHeight <span class="token operator">&lt;=</span> maxHeight <span class="token operator">&amp;&amp;</span> minHeight <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//最大和最小高度相同</span>\n  <span class="token class-name">SliverHeaderDelegate</span><span class="token punctuation">.</span><span class="token function">fixedHeight</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    required double height<span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> builder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> child<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        maxHeight <span class="token operator">=</span> height<span class="token punctuation">,</span>\n        minHeight <span class="token operator">=</span> height<span class="token punctuation">;</span>\n\n  <span class="token comment">//需要自定义builder时使用</span>\n  <span class="token class-name">SliverHeaderDelegate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>minHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> double maxHeight<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> double minHeight<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">SliverHeaderBuilder</span> builder<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span>\n    <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n    double shrinkOffset<span class="token punctuation">,</span>\n    bool overlapsContent<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Widget</span> child <span class="token operator">=</span> <span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> shrinkOffset<span class="token punctuation">,</span> overlapsContent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//测试代码：如果在调试模式，且子组件设置了key，则打印日志</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">child<span class="token punctuation">.</span>key</span><span class="token punctuation">}</span></span><span class="token string">: shrink: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">shrinkOffset</span></span><span class="token string">，overlaps:</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">overlapsContent</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 让 header 尽可能充满限制的空间；宽度为 Viewport 宽度，</span>\n    <span class="token comment">// 高度随着用户滑动在[minHeight,maxHeight]之间变化。</span>\n    <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  double <span class="token keyword">get</span> maxExtent <span class="token operator">=</span><span class="token operator">&gt;</span> maxHeight<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  double <span class="token keyword">get</span> minExtent <span class="token operator">=</span><span class="token operator">&gt;</span> minHeight<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">shouldRebuild</span><span class="token punctuation">(</span><span class="token class-name">SliverHeaderDelegate</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> old<span class="token punctuation">.</span>maxExtent <span class="token operator">!=</span> maxExtent <span class="token operator">||</span> old<span class="token punctuation">.</span>minExtent <span class="token operator">!=</span> minExtent<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现很简单，不再赘述，下面我们看看如何使用：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PersistentHeaderRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">CustomScrollView</span><span class="token punctuation">(</span>\n      slivers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">SliverPersistentHeader</span><span class="token punctuation">(</span>\n          pinned<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          delegate<span class="token punctuation">:</span> <span class="token class-name">SliverHeaderDelegate</span><span class="token punctuation">(</span><span class="token comment">//有最大和最小高度</span>\n            maxHeight<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>\n            minHeight<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">SliverPersistentHeader</span><span class="token punctuation">(</span>\n          pinned<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          delegate<span class="token punctuation">:</span> <span class="token class-name">SliverHeaderDelegate</span><span class="token punctuation">.</span><span class="token function">fixedHeight</span><span class="token punctuation">(</span> <span class="token comment">//固定高度</span>\n            height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 构建固定高度的SliverList，count为列表项属相</span>\n  <span class="token class-name">Widget</span> <span class="token function">buildSliverList</span><span class="token punctuation">(</span><span class="token punctuation">[</span>int count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">SliverFixedExtentList</span><span class="token punctuation">(</span>\n      itemExtent<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n      delegate<span class="token punctuation">:</span> <span class="token class-name">SliverChildBuilderDelegate</span><span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        childCount<span class="token punctuation">:</span> count<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 构建 header</span>\n  <span class="token class-name">Widget</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span>int i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightBlue<span class="token punctuation">.</span>shade200<span class="token punctuation">,</span>\n      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>centerLeft<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;PersistentHeader </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图6-27所示:</p><p><img src="'+o+'" alt="图6-27"></p><h4 id="一些注意点" tabindex="-1"><a class="header-anchor" href="#一些注意点" aria-hidden="true">#</a> 一些注意点</h4><p>我们说过 SliverPersistentHeader 的 builder 参数 overlapsContent 一般不建议使用，使用时要当心。因为按照 overlapsContent 变量名的字面意思，只要有内容和 Sliver 重叠时就应该为 true，但是如果我们在上面示例的 builder 中打印一下 overlapsContent 的值就会发现第一个 PersistentHeader 1 的 overlapsContent 值一直都是 false，而 PersistentHeader 2 则是正常的，如果我们再添加几个 SliverPersistentHeader ，发现新添加的也都正常。总结一下：<strong>当有多个 SliverPersistentHeader时，需要注意第一个 SliverPersistentHeader 的 overlapsContent 值会一直为 false</strong>。</p><p>这可能是一个 bug，也可能就是这么设计的，因为 SliverPersistentHeader 的设计初衷主要是为了实现 SliverAppBar，可能并没有考虑到通用的场景，但是不管怎样，当前的 flutter 版本（2.5）中表现就是如此。为此，我们可以定一条约定：<strong>如果我们在使用 SliverPersistentHeader 构建子组件时需要依赖 overlapsContent 参数，则必须保证之前至少还有一个 SliverPersistentHeader 或 SliverAppBar</strong>（SliverAppBar 在当前 Flutter 版本的实现中内部包含了SliverPersistentHeader）。</p><h2 id="_6-10-3-总结" tabindex="-1"><a class="header-anchor" href="#_6-10-3-总结" aria-hidden="true">#</a> 6.10.3 总结</h2><p>本节主要介绍了Flutter中常用的 Sliver，以及组合它们的 CustomScrollView。再次提醒读者：</p><ol><li>CustomScrollView 组合 Sliver 的原理是为所有子 Sliver 提供一个共享的 Scrollable，然后统一处理指定滑动方向的滑动事件。</li><li>CustomScrollView 和 ListView、GridView、PageView 一样，都是<strong>完整</strong>的可滚动组件（同时拥有 Scrollable、Viewport、Sliver）。</li><li>CustomScrollView 只能组合 Sliver，如果有孩子也是一个<strong>完整</strong>的可滚动组件（通过 SliverToBoxAdapter 嵌入）且它们的滑动方向一致时便不能正常工作。</li></ol><p>下一节中我们将介绍如何通过 NestedScrollView 嵌套两个完整的可滚动组件。</p>',55)],r={},d=(0,a(18580).Z)(r,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,u)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);