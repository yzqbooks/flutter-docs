"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[6305],{98257:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-16aae395","path":"/chapter2/state_manage.html","title":"2.3 状态管理","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"2.3.1 Widget管理自身状态","slug":"_2-3-1-widget管理自身状态","link":"#_2-3-1-widget管理自身状态","children":[]},{"level":3,"title":"2.3.2 父Widget管理子Widget的状态","slug":"_2-3-2-父widget管理子widget的状态","link":"#_2-3-2-父widget管理子widget的状态","children":[]},{"level":3,"title":"2.3.3 混合状态管理","slug":"_2-3-3-混合状态管理","link":"#_2-3-3-混合状态管理","children":[]},{"level":3,"title":"2.3.4 全局状态管理","slug":"_2-3-4-全局状态管理","link":"#_2-3-4-全局状态管理","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.44,"words":1933},"filePathRelative":"chapter2/state_manage.md","localizedDate":"2022年6月6日","excerpt":""}')},93276:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const e=a.p+"assets/img/2-8.6637d5cb.png",p=[(0,t.uE)('<h1 id="_2-3-状态管理" tabindex="-1"><a class="header-anchor" href="#_2-3-状态管理" aria-hidden="true">#</a> 2.3 状态管理</h1><p>响应式的编程框架中都会有一个永恒的主题——“状态(State)管理”，无论是在 React/Vue（两者都是支持响应式编程的 Web 开发框架）还是 Flutter 中，他们讨论的问题和解决的思想都是一致的。所以，如果你对React/Vue的状态管理有了解，可以跳过本节。言归正传，我们想一个问题，<code>StatefulWidget</code>的状态应该被谁管理？Widget本身？父 Widget ？都会？还是另一个对象？答案是取决于实际情况！以下是管理状态的最常见的方法：</p><ul><li>Widget 管理自己的状态。</li><li>Widget 管理子 Widget 状态。</li><li>混合管理（父 Widget 和子 Widget 都管理状态）。</li></ul><p>如何决定使用哪种管理方法？下面是官方给出的一些原则可以帮助你做决定：</p><ul><li>如果状态是用户数据，如复选框的选中状态、滑块的位置，则该状态最好由父 Widget 管理。</li><li>如果状态是有关界面外观效果的，例如颜色、动画，那么状态最好由 Widget 本身来管理。</li><li>如果某一个状态是不同 Widget 共享的则最好由它们共同的父 Widget 管理。</li></ul><p>在 Widget 内部管理状态封装性会好一些，而在父 Widget 中管理会比较灵活。有些时候，如果不确定到底该怎么管理状态，那么推荐的首选是在父 Widget 中管理（灵活会显得更重要一些）。</p><p>接下来，我们将通过创建三个简单示例TapboxA、TapboxB和TapboxC来说明管理状态的不同方式。 这些例子功能是相似的 ——创建一个盒子，当点击它时，盒子背景会在绿色与灰色之间切换。状态 <code>_active</code>确定颜色：绿色为<code>true</code> ，灰色为<code>false</code>，如图2-8所示：</p><p><img src="'+e+'" alt="图2-8"></p><p>下面的例子将使用<code>GestureDetector</code>来识别点击事件，关于该<code>GestureDetector</code>的详细内容我们将在后面“事件处理”一章中介绍。</p><h3 id="_2-3-1-widget管理自身状态" tabindex="-1"><a class="header-anchor" href="#_2-3-1-widget管理自身状态" aria-hidden="true">#</a> 2.3.1 Widget管理自身状态</h3><p>_TapboxAState 类:</p><ul><li>管理TapboxA的状态。</li><li>定义<code>_active</code>：确定盒子的当前颜色的布尔值。</li><li>定义<code>_handleTap()</code>函数，该函数在点击该盒子时更新<code>_active</code>，并调用<code>setState()</code>更新UI。</li><li>实现widget的所有交互式行为。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// TapboxA 管理自身状态.</span>\n\n<span class="token comment">//------------------------- TapboxA ----------------------------------</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TapboxA</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">TapboxA</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _TapboxAState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_TapboxAState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _TapboxAState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TapboxA</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool _active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _active <span class="token operator">=</span> <span class="token operator">!</span>_active<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> _handleTap<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n            _active <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;Active&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Inactive&#39;</span></span><span class="token punctuation">,</span>\n            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">32.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>\n          color<span class="token punctuation">:</span> _active <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightGreen<span class="token punctuation">[</span><span class="token number">700</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-2-父widget管理子widget的状态" tabindex="-1"><a class="header-anchor" href="#_2-3-2-父widget管理子widget的状态" aria-hidden="true">#</a> 2.3.2 父Widget管理子Widget的状态</h3><p>对于父Widget来说，管理状态并告诉其子Widget何时更新通常是比较好的方式。 例如，<code>IconButton</code>是一个图标按钮，但它是一个无状态的Widget，因为我们认为父Widget需要知道该按钮是否被点击来采取相应的处理。</p><p>在以下示例中，TapboxB通过回调将其状态导出到其父组件，状态由父组件管理，因此它的父组件为<code>StatefulWidget</code>。但是由于TapboxB不管理任何状态，所以<code>TapboxB</code>为<code>StatelessWidget</code>。</p><p><code>ParentWidgetState</code> 类:</p><ul><li>为TapboxB 管理<code>_active</code>状态。</li><li>实现<code>_handleTapboxChanged()</code>，当盒子被点击时调用的方法。</li><li>当状态改变时，调用<code>setState()</code>更新UI。</li></ul><p>TapboxB 类:</p><ul><li>继承<code>StatelessWidget</code>类，因为所有状态都由其父组件处理。</li><li>当检测到点击时，它会通知父组件。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// ParentWidget 为 TapboxB 管理状态.</span>\n\n<span class="token comment">//------------------------ ParentWidget --------------------------------</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ParentWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _ParentWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_ParentWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _ParentWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParentWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool _active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTapboxChanged</span><span class="token punctuation">(</span>bool newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _active <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">TapboxB</span><span class="token punctuation">(</span>\n        active<span class="token punctuation">:</span> _active<span class="token punctuation">,</span>\n        onChanged<span class="token punctuation">:</span> _handleTapboxChanged<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//------------------------- TapboxB ----------------------------------</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TapboxB</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">TapboxB</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>onChanged<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> bool active<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">ValueChanged</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> onChanged<span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token operator">!</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> _handleTap<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n            active <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;Active&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Inactive&#39;</span></span><span class="token punctuation">,</span>\n            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">32.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>\n          color<span class="token punctuation">:</span> active <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightGreen<span class="token punctuation">[</span><span class="token number">700</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-3-混合状态管理" tabindex="-1"><a class="header-anchor" href="#_2-3-3-混合状态管理" aria-hidden="true">#</a> 2.3.3 混合状态管理</h3><p>对于一些组件来说，混合管理的方式会非常有用。在这种情况下，组件自身管理一些内部状态，而父组件管理一些其他外部状态。</p><p>在下面 TapboxC 示例中，手指按下时，盒子的周围会出现一个深绿色的边框，抬起时，边框消失。点击完成后，盒子的颜色改变。 TapboxC 将其<code>_active</code>状态导出到其父组件中，但在内部管理其<code>_highlight</code>状态。这个例子有两个状态对象<code>_ParentWidgetState</code>和<code>_TapboxCState</code>。</p><p><code>_ParentWidgetStateC </code>类:</p><ul><li>管理<code>_active</code> 状态。</li><li>实现 <code>_handleTapboxChanged()</code> ，当盒子被点击时调用。</li><li>当点击盒子并且<code>_active</code>状态改变时调用<code>setState()</code>更新UI。</li></ul><p><code>_TapboxCState</code> 对象:</p><ul><li>管理<code>_highlight</code> 状态。</li><li><code>GestureDetector</code>监听所有tap事件。当用户点下时，它添加高亮（深绿色边框）；当用户释放时，会移除高亮。</li><li>当按下、抬起、或者取消点击时更新<code>_highlight</code>状态，调用<code>setState()</code>更新UI。</li><li>当点击时，将状态的改变传递给父组件。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//---------------------------- ParentWidget ----------------------------</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ParentWidgetC</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _ParentWidgetCState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_ParentWidgetCState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _ParentWidgetCState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParentWidgetC</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool _active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTapboxChanged</span><span class="token punctuation">(</span>bool newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _active <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">TapboxC</span><span class="token punctuation">(</span>\n        active<span class="token punctuation">:</span> _active<span class="token punctuation">,</span>\n        onChanged<span class="token punctuation">:</span> _handleTapboxChanged<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//----------------------------- TapboxC ------------------------------</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TapboxC</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">TapboxC</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>onChanged<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> bool active<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">ValueChanged</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> onChanged<span class="token punctuation">;</span>\n  \n  <span class="token metadata function">@override</span>\n  _TapboxCState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_TapboxCState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _TapboxCState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TapboxC</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool _highlight <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTapDown</span><span class="token punctuation">(</span><span class="token class-name">TapDownDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _highlight <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTapUp</span><span class="token punctuation">(</span><span class="token class-name">TapUpDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _highlight <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTapCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _highlight <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_handleTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    widget<span class="token punctuation">.</span><span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token operator">!</span>widget<span class="token punctuation">.</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在按下时添加绿色边框，当抬起时，取消高亮  </span>\n    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTapDown<span class="token punctuation">:</span> _handleTapDown<span class="token punctuation">,</span> <span class="token comment">// 处理按下事件</span>\n      onTapUp<span class="token punctuation">:</span> _handleTapUp<span class="token punctuation">,</span> <span class="token comment">// 处理抬起事件</span>\n      onTap<span class="token punctuation">:</span> _handleTap<span class="token punctuation">,</span>\n      onTapCancel<span class="token punctuation">:</span> _handleTapCancel<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n            widget<span class="token punctuation">.</span>active <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;Active&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Inactive&#39;</span></span><span class="token punctuation">,</span>\n            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">32.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>\n          color<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>active <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightGreen<span class="token punctuation">[</span><span class="token number">700</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          border<span class="token punctuation">:</span> _highlight\n              <span class="token operator">?</span> <span class="token class-name">Border</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>\n                  color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>teal<span class="token punctuation">[</span><span class="token number">700</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                  width<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span>\n              <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种实现可能会将高亮状态导出到父组件，但同时保持<code>_active</code>状态为内部状态，但如果你要将该TapBox 给其它人使用，可能没有什么意义。 开发人员只会关心该框是否处于 Active 状态，而不在乎高亮显示是如何管理的，所以应该让 TapBox 内部处理这些细节。</p><h3 id="_2-3-4-全局状态管理" tabindex="-1"><a class="header-anchor" href="#_2-3-4-全局状态管理" aria-hidden="true">#</a> 2.3.4 全局状态管理</h3><p>当应用中需要一些跨组件（包括跨路由）的状态需要同步时，上面介绍的方法便很难胜任了。比如，我们有一个设置页，里面可以设置应用的语言，我们为了让设置实时生效，我们期望在语言状态发生改变时，App中依赖应用语言的组件能够重新 build 一下，但这些依赖应用语言的组件和设置页并不在一起，所以这种情况用上面的方法很难管理。这时，正确的做法是通过一个全局状态管理器来处理这种相距较远的组件之间的通信。目前主要有两种办法：</p><ol><li>实现一个全局的事件总线，将语言状态改变对应为一个事件，然后在APP中依赖应用语言的组件的<code>initState</code> 方法中订阅语言改变的事件。当用户在设置页切换语言后，我们发布语言改变事件，而订阅了此事件的组件就会收到通知，收到通知后调用<code>setState(...)</code>方法重新<code>build</code>一下自身即可。</li><li>使用一些专门用于状态管理的包，如 Provider、Redux，读者可以在 pub 上查看其详细信息。</li></ol><p>本书将在&quot;功能型组件&quot;一章中介绍 Provider 包的实现原理及用法，同时也将会在&quot;事件处理与通知&quot;一章中实现一个全局事件总线，读者有需要可以直接翻看。</p>',34)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);