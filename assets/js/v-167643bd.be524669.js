"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[2950],{77558:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-167643bd","path":"/chapter4/wrap_and_flow.html","title":"4.5 流式布局","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.5.1 Wrap","slug":"_4-5-1-wrap","link":"#_4-5-1-wrap","children":[]},{"level":2,"title":"4.5.2 Flow","slug":"_4-5-2-flow","link":"#_4-5-2-flow","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.72,"words":1117},"filePathRelative":"chapter4/wrap_and_flow.md","localizedDate":"2022年6月6日","excerpt":""}')},62509:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6808);const p=a.p+"assets/img/4-14.ca7bc93c.png",e=a.p+"assets/img/4-15.1666b956.png",o=a.p+"assets/img/4-16.1177919b.png",c=[(0,t.uE)('<h1 id="_4-5-流式布局" tabindex="-1"><a class="header-anchor" href="#_4-5-流式布局" aria-hidden="true">#</a> 4.5 流式布局</h1><p>在介绍 Row 和 Colum 时，如果子 widget 超出屏幕范围，则会报溢出错误，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Row</span><span class="token punctuation">(</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;xxx&quot;</span></span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图4-14所示：</p><p><img src="'+p+'" alt="图4-14"></p><p>可以看到，右边溢出部分报错。这是因为Row默认只有一行，如果超出屏幕不会折行。我们把超出屏幕显示范围会自动折行的布局称为流式布局。Flutter中通过<code>Wrap</code>和<code>Flow</code>来支持流式布局，将上例中的 Row 换成Wrap后溢出部分则会自动折行，下面我们分别介绍<code>Wrap</code>和<code>Flow</code>.</p><h2 id="_4-5-1-wrap" tabindex="-1"><a class="header-anchor" href="#_4-5-1-wrap" aria-hidden="true">#</a> 4.5.1 Wrap</h2><p>下面是Wrap的定义:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Wrap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> <span class="token class-name">WrapAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>spacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>runAlignment <span class="token operator">=</span> <span class="token class-name">WrapAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>runSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>crossAxisAlignment <span class="token operator">=</span> <span class="token class-name">WrapCrossAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>verticalDirection <span class="token operator">=</span> <span class="token class-name">VerticalDirection</span><span class="token punctuation">.</span>down<span class="token punctuation">,</span>\n  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到Wrap的很多属性在<code>Row</code>（包括<code>Flex</code>和<code>Column</code>）中也有，如<code>direction</code>、<code>crossAxisAlignment</code>、<code>textDirection</code>、<code>verticalDirection</code>等，这些参数意义是相同的，我们不再重复介绍，读者可以查阅前面介绍<code>Row</code>的部分。读者可以认为<code>Wrap</code>和<code>Flex</code>（包括<code>Row</code>和<code>Column</code>）除了超出显示范围后<code>Wrap</code>会折行外，其它行为基本相同。下面我们看一下<code>Wrap</code>特有的几个属性：</p><ul><li><code>spacing</code>：主轴方向子widget的间距</li><li><code>runSpacing</code>：纵轴方向的间距</li><li><code>runAlignment</code>：纵轴方向的对齐方式</li></ul><p>下面看一个示例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">Wrap</span><span class="token punctuation">(</span>\n   spacing<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token comment">// 主轴(水平)方向间距</span>\n   runSpacing<span class="token punctuation">:</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token comment">// 纵轴（垂直）方向间距</span>\n   alignment<span class="token punctuation">:</span> <span class="token class-name">WrapAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span> <span class="token comment">//沿主轴方向居中</span>\n   children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n     <span class="token class-name">Chip</span><span class="token punctuation">(</span>\n       avatar<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;A&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       label<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hamilton&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Chip</span><span class="token punctuation">(</span>\n       avatar<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;M&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       label<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Lafayette&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Chip</span><span class="token punctuation">(</span>\n       avatar<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;H&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       label<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Mulligan&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Chip</span><span class="token punctuation">(</span>\n       avatar<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;J&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       label<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Laurens&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">,</span>\n   <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图4-15所示：</p><p><img src="'+e+'" alt="图4-15"></p><h2 id="_4-5-2-flow" tabindex="-1"><a class="header-anchor" href="#_4-5-2-flow" aria-hidden="true">#</a> 4.5.2 Flow</h2><p>我们一般很少会使用<code>Flow</code>，因为其过于复杂，需要自己实现子 widget 的位置转换，在很多场景下首先要考虑的是<code>Wrap</code>是否满足需求。<code>Flow</code>主要用于一些需要自定义布局策略或性能要求较高(如动画中)的场景。<code>Flow</code>有如下优点：</p><ul><li>性能好；<code>Flow</code>是一个对子组件尺寸以及位置调整非常高效的控件，<code>Flow</code>用转换矩阵在对子组件进行位置调整的时候进行了优化：在<code>Flow</code>定位过后，如果子组件的尺寸或者位置发生了变化，在<code>FlowDelegate</code>中的<code>paintChildren()</code>方法中调用<code>context.paintChild</code> 进行重绘，而<code>context.paintChild</code>在重绘时使用了转换矩阵，并没有实际调整组件位置。</li><li>灵活；由于我们需要自己实现<code>FlowDelegate</code>的<code>paintChildren()</code>方法，所以我们需要自己计算每一个组件的位置，因此，可以自定义布局策略。</li></ul><p>缺点：</p><ul><li>使用复杂。</li><li>Flow 不能自适应子组件大小，必须通过指定父容器大小或实现<code>TestFlowDelegate</code>的<code>getSize</code>返回固定大小。</li></ul><p>示例：</p><p>我们对六个色块进行自定义流式布局：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Flow</span><span class="token punctuation">(</span>\n  delegate<span class="token punctuation">:</span> <span class="token class-name">TestFlowDelegate</span><span class="token punctuation">(</span>margin<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span>  color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>brown<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span>  color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现TestFlowDelegate:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">TestFlowDelegate</span> <span class="token keyword">extends</span> <span class="token class-name">FlowDelegate</span> <span class="token punctuation">{</span>\n  <span class="token class-name">EdgeInsets</span> margin<span class="token punctuation">;</span>\n\n  <span class="token class-name">TestFlowDelegate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span>zero<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  double width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  double height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">paintChildren</span><span class="token punctuation">(</span><span class="token class-name">FlowPaintingContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> margin<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> y <span class="token operator">=</span> margin<span class="token punctuation">.</span>top<span class="token punctuation">;</span>\n    <span class="token comment">//计算每一个子widget的位置</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> context<span class="token punctuation">.</span>childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> w <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildSize</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>width <span class="token operator">+</span> x <span class="token operator">+</span> margin<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">&lt;</span> context<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">paintChild</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> transform<span class="token punctuation">:</span> <span class="token class-name">Matrix4</span><span class="token punctuation">.</span><span class="token function">translationValues</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x <span class="token operator">=</span> w <span class="token operator">+</span> margin<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        x <span class="token operator">=</span> margin<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n        y <span class="token operator">+=</span> context<span class="token punctuation">.</span><span class="token function">getChildSize</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>height <span class="token operator">+</span> margin<span class="token punctuation">.</span>top <span class="token operator">+</span> margin<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>\n        <span class="token comment">//绘制子widget(有优化)</span>\n        context<span class="token punctuation">.</span><span class="token function">paintChild</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> transform<span class="token punctuation">:</span> <span class="token class-name">Matrix4</span><span class="token punctuation">.</span><span class="token function">translationValues</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x <span class="token operator">+=</span> context<span class="token punctuation">.</span><span class="token function">getChildSize</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>width <span class="token operator">+</span> margin<span class="token punctuation">.</span>left <span class="token operator">+</span> margin<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Size</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 指定Flow的大小，简单起见我们让宽度竟可能大，但高度指定为200，</span>\n    <span class="token comment">// 实际开发中我们需要根据子元素所占用的具体宽高来设置Flow大小</span>\n    <span class="token keyword">return</span> <span class="token class-name">Size</span><span class="token punctuation">(</span>double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> <span class="token number">200.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">FlowDelegate</span> oldDelegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> oldDelegate <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果见图4-16：</p><p><img src="'+o+'" alt="图4-16"></p><p>可以看到我们主要的任务就是实现<code>paintChildren</code>，它的主要任务是确定每个子widget位置。由于Flow不能自适应子widget的大小，我们通过在<code>getSize</code>返回一个固定大小来指定Flow的大小。</p><p>注意，如果我们需要自定义布局策略，一般首选的方式是通过直接继承RenderObject，然后通过重写 performLayout 的方式实现，具体方式我们会在本书后面 Flutter 原理篇举例。</p>',29)],l={},i=(0,a(18580).Z)(l,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);