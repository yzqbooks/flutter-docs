"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[9508],{42786:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-2f28cfa4","path":"/chapter9/route_transition.html","title":"9.3 自定义路由切换动画","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":2.51,"words":754},"filePathRelative":"chapter9/route_transition.md","localizedDate":"2022年6月6日","excerpt":""}')},55645:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6808);const t=[(0,e.uE)('<h1 id="_9-3-自定义路由切换动画" tabindex="-1"><a class="header-anchor" href="#_9-3-自定义路由切换动画" aria-hidden="true">#</a> 9.3 自定义路由切换动画</h1><p>我们在第二章“路由管理”一节中讲过：Material组件库中提供了一个<code>MaterialPageRoute</code>组件，它可以使用和平台风格一致的路由切换动画，如在iOS上会左右滑动切换，而在Android上会上下滑动切换。现在，我们如果在Android上也想使用左右切换风格，该怎么做？一个简单的作法是可以直接使用<code>CupertinoPageRoute</code>，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">CupertinoPageRoute</span><span class="token punctuation">(</span>  \n   builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token class-name">PageB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CupertinoPageRoute</code>是Cupertino组件库提供的iOS风格的路由切换组件，它实现的就是左右滑动切换。那么我们如何来自定义路由切换动画呢？答案就是<code>PageRouteBuilder</code>。下面我们来看看如何使用<code>PageRouteBuilder</code>来自定义路由切换动画。例如我们想以渐隐渐入动画来实现路由过渡，实现代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n  context<span class="token punctuation">,</span>\n  <span class="token class-name">PageRouteBuilder</span><span class="token punctuation">(</span>\n    transitionDuration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//动画时间为500毫秒</span>\n    pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Animation</span> animation<span class="token punctuation">,</span>\n        <span class="token class-name">Animation</span> secondaryAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>\n        <span class="token comment">//使用渐隐渐入过渡,</span>\n        opacity<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">PageB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//路由B</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到<code> pageBuilder</code> 有一个<code>animation</code>参数，这是Flutter路由管理器提供的，在路由切换时<code> pageBuilder</code>在每个动画帧都会被回调，因此我们可以通过<code>animation</code>对象来自定义过渡动画。</p><p>无论是<code>MaterialPageRoute</code>、<code>CupertinoPageRoute</code>，还是<code>PageRouteBuilder</code>，它们都继承自PageRoute类，而<code>PageRouteBuilder</code>其实只是<code>PageRoute</code>的一个包装，我们可以直接继承<code>PageRoute</code>类来实现自定义路由，上面的例子可以通过如下方式实现：</p><ol><li><p>定义一个路由类<code>FadeRoute</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">FadeRoute</span> <span class="token keyword">extends</span> <span class="token class-name">PageRoute</span> <span class="token punctuation">{</span>\n  <span class="token class-name">FadeRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>transitionDuration <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>opaque <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>barrierDismissible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>barrierColor<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>barrierLabel<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>maintainState <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">WidgetBuilder</span> builder<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">final</span> <span class="token class-name">Duration</span> transitionDuration<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">final</span> bool opaque<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">final</span> bool barrierDismissible<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">final</span> <span class="token class-name">Color</span> barrierColor<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> barrierLabel<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">final</span> bool maintainState<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">buildPage</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>\n      <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> secondaryAnimation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">buildTransitions</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>\n      <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> secondaryAnimation<span class="token punctuation">,</span> <span class="token class-name">Widget</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span> \n       opacity<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n       child<span class="token punctuation">:</span> <span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>FadeRoute</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">FadeRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">PageB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>虽然上面的两种方法都可以实现自定义切换动画，但实际使用时应优先考虑使用PageRouteBuilder，这样无需定义一个新的路由类，使用起来会比较方便。但是有些时候<code>PageRouteBuilder</code>是不能满足需求的，例如在应用过渡动画时我们需要读取当前路由的一些属性，这时就只能通过继承<code>PageRoute</code>的方式了，举个例子，假如我们只想在打开新路由时应用动画，而在返回时不使用动画，那么我们在构建过渡动画时就必须判断当前路由<code>isActive</code>属性是否为<code>true</code>，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">buildTransitions</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>\n    <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> secondaryAnimation<span class="token punctuation">,</span> <span class="token class-name">Widget</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token comment">//当前路由被激活，是打开新路由</span>\n <span class="token keyword">if</span><span class="token punctuation">(</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>\n     opacity<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n     child<span class="token punctuation">:</span> <span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n   <span class="token comment">//是返回，则不应用过渡动画</span>\n   <span class="token keyword">return</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于路由参数的详细信息读者可以自行查阅API文档，比较简单，不再赘述。</p>',11)],p={},o=(0,a(18580).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);