"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[2340],{12484:(e,t,n)=>{n.r(t),n.d(t,{data:()=>d});const d=JSON.parse('{"key":"v-f51078be","path":"/chapter15/code_structure.html","title":"15.2 Flutter APP代码结构","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.96,"words":588},"filePathRelative":"chapter15/code_structure.md","localizedDate":"2022年6月6日","excerpt":""}')},52291:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var d=n(6808);const s=[(0,d.uE)('<h1 id="_15-2-flutter-app代码结构" tabindex="-1"><a class="header-anchor" href="#_15-2-flutter-app代码结构" aria-hidden="true">#</a> 15.2 Flutter APP代码结构</h1><p>我们先来创建一个全新的Flutter工程，命名为&quot;github_client_app&quot;；创建新工程的步骤视读者使用的编辑器而定，都比较简单，在此不再赘述。创建完成后，工程结构如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>github_client_app\n├── android\n├── ios\n├── lib\n└── <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们需要使用外部图片和Icon资源，所以我们在项目根目录下分别创建“imgs”和“fonts”文件夹，前者用于保存图片，后者用于保存Icon文件。关于图片和Icon，读者可以参考第三章中相应的内容。</p><p>由于在网络数据传输和持久化时，我们需要通过Json来传输、保存数据；但是在应用开发时我们又需要将Json转成Dart Model类，现在我们使用在第十一章中“Json转Model”小节中介绍的方案，所以，我们需要在根目录下再创建一个用于保存Json文件的“jsons”文件夹。</p><p>多语言支持我们使用第十三章“国际化”中介绍的方案，所以还需要在根目录下创建一个“l10n”文件夹，用于保存各国语言对应的arb文件。</p><p>现在工程目录变为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>github_client_app\n├── android\n├── fonts\n├── l10n-arb\n├── imgs\n├── ios\n├── jsons\n├── lib\n└── <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们的Dart代码都在“lib”文件夹下，笔者根据技术选型和经验在lib文件下创建了如下目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lib\n├── common\n├── l10n\n├── models\n├── states\n├── routes\n└── widgets \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>文件夹</th><th>作用</th></tr></thead><tbody><tr><td>common</td><td>一些工具类，如通用方法类、网络接口类、保存全局变量的静态类等</td></tr><tr><td>l10n</td><td>国际化相关的类都在此目录下</td></tr><tr><td>models</td><td>Json文件对应的Dart Model类会在此目录下</td></tr><tr><td>states</td><td>保存APP中需要跨组件共享的状态类</td></tr><tr><td>routes</td><td>存放所有路由页面类</td></tr><tr><td>widgets</td><td>APP内封装的一些Widget组件都在该目录下</td></tr></tbody></table><p>注意，使用不同的框架或技术选型会对代码有不同的组织方式，因此，本节介绍的代码组织结构并不是固定或者“最佳”的，在实战中，读者可以自己根据情况调整源码结构。但是无论采取何种源码组织结构，清晰和解耦都是一个通用原则，我们应该让自己的代码结构清晰，以便交流和维护。</p>',12)],i={},a=(0,n(18580).Z)(i,[["render",function(e,t){return(0,d.wg)(),(0,d.iD)("div",null,s)}]])},18580:(e,t)=>{t.Z=(e,t)=>{const n=e.__vccOpts||e;for(const[e,d]of t)n[e]=d;return n}}}]);