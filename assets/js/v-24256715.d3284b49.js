"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[9045],{71360:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-24256715","path":"/chapter7/dailog.html","title":"7.7 对话框详解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"7.7.1 使用对话框","slug":"_7-7-1-使用对话框","link":"#_7-7-1-使用对话框","children":[{"level":3,"title":"AlertDialog","slug":"alertdialog","link":"#alertdialog","children":[]},{"level":3,"title":"SimpleDialog","slug":"simpledialog","link":"#simpledialog","children":[]},{"level":3,"title":"Dialog","slug":"dialog","link":"#dialog","children":[]}]},{"level":2,"title":"7.7.2 对话框打开动画及遮罩","slug":"_7-7-2-对话框打开动画及遮罩","link":"#_7-7-2-对话框打开动画及遮罩","children":[]},{"level":2,"title":"7.7.3 对话框实现原理","slug":"_7-7-3-对话框实现原理","link":"#_7-7-3-对话框实现原理","children":[]},{"level":2,"title":"7.7.4 对话框状态管理","slug":"_7-7-4-对话框状态管理","link":"#_7-7-4-对话框状态管理","children":[{"level":3,"title":"单独抽离出StatefulWidget","slug":"单独抽离出statefulwidget","link":"#单独抽离出statefulwidget","children":[]},{"level":3,"title":"使用StatefulBuilder方法","slug":"使用statefulbuilder方法","link":"#使用statefulbuilder方法","children":[]},{"level":3,"title":"精妙的解法","slug":"精妙的解法","link":"#精妙的解法","children":[]}]},{"level":2,"title":"7.7.5 其它类型的对话框","slug":"_7-7-5-其它类型的对话框","link":"#_7-7-5-其它类型的对话框","children":[{"level":3,"title":"底部菜单列表","slug":"底部菜单列表","link":"#底部菜单列表","children":[]},{"level":3,"title":"Loading框","slug":"loading框","link":"#loading框","children":[]},{"level":3,"title":"日历选择","slug":"日历选择","link":"#日历选择","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":17.94,"words":5381},"filePathRelative":"chapter7/dailog.md","localizedDate":"2022年6月6日","excerpt":""}')},46238:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var t=a(6808);const p=a.p+"assets/img/7-11.5e81530f.png",e=a.p+"assets/img/7-12.c397cd81.png",c=a.p+"assets/img/7-13.691e2388.png",o=a.p+"assets/img/7-14.8a0d401b.png",l=a.p+"assets/img/7-15.7c2bfeb6.png",i=a.p+"assets/img/7-16.d3e09704.png",u=a.p+"assets/img/7-17.496285c0.png",k=a.p+"assets/img/7-18.1e322db6.png",d=a.p+"assets/img/7-19.ea1a88e2.png",r=a.p+"assets/img/7-20.c6d77e49.png",v=a.p+"assets/img/7-21.ad45f108.png",m=[(0,t.uE)('<h1 id="_7-7-对话框详解" tabindex="-1"><a class="header-anchor" href="#_7-7-对话框详解" aria-hidden="true">#</a> 7.7 对话框详解</h1><p>本节将详细介绍一下Flutter中对话框的使用方式、实现原理、样式定制及状态管理。</p><h2 id="_7-7-1-使用对话框" tabindex="-1"><a class="header-anchor" href="#_7-7-1-使用对话框" aria-hidden="true">#</a> 7.7.1 使用对话框</h2><p>对话框本质上也是UI布局，通常一个对话框会包含标题、内容，以及一些操作按钮，为此，Material库中提供了一些现成的对话框组件来用于快速的构建出一个完整的对话框。</p><h3 id="alertdialog" tabindex="-1"><a class="header-anchor" href="#alertdialog" aria-hidden="true">#</a> AlertDialog</h3><p>下面我们主要介绍一下Material库中的<code>AlertDialog</code>组件，它的构造函数定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token comment">//对话框标题组件</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>titlePadding<span class="token punctuation">,</span> <span class="token comment">// 标题填充</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>titleTextStyle<span class="token punctuation">,</span> <span class="token comment">//标题文本样式</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token comment">// 对话框内容组件</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>contentPadding <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">fromLTRB</span><span class="token punctuation">(</span><span class="token number">24.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">24.0</span><span class="token punctuation">,</span> <span class="token number">24.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//内容的填充</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>contentTextStyle<span class="token punctuation">,</span><span class="token comment">// 内容文本样式</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">,</span> <span class="token comment">// 对话框操作按钮组</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">,</span> <span class="token comment">// 对话框背景色</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>elevation<span class="token punctuation">,</span><span class="token comment">// 对话框的阴影</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>semanticLabel<span class="token punctuation">,</span> <span class="token comment">//对话框语义化标签(用于读屏软件)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token comment">// 对话框外形</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数都比较简单，不在赘述。下面我们看一个例子，假如我们要在删除文件时弹出一个确认对话框，该对话框如图7-11所示：</p><p><img src="'+p+'" alt="图7-11"></p><p>该对话框样式代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n  title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;您确定要删除当前文件吗?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//关闭对话框</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ... 执行删除操作</span>\n        <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭对话框</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现代码很简单，不在赘述。唯一需要注意的是我们是通过<code>Navigator.of(context).pop(…)</code>方法来关闭对话框的，这和路由返回的方式是一致的，并且都可以返回一个结果数据。现在，对话框我们已经构建好了，那么如何将它弹出来呢？还有对话框返回的数据应如何被接收呢？这些问题的答案都在<code>showDialog()</code>方法中。</p><p><code>showDialog()</code>是Material组件库提供的一个用于弹出Material风格对话框的方法，签名如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  required <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  required <span class="token class-name">WidgetBuilder</span> builder<span class="token punctuation">,</span> <span class="token comment">// 对话框UI的builder</span>\n  bool barrierDismissible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//点击对话框barrier(遮罩)时是否关闭它</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法只有两个参数，含义见注释。该方法返回一个<code>Future</code>，它正是用于接收对话框的返回值：如果我们是通过点击对话框遮罩关闭的，则<code>Future</code>的值为<code>null</code>，否则为我们通过<code>Navigator.of(context).pop(result)</code>返回的result值，下面我们看一下整个示例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//点击该按钮后弹出对话框</span>\n<span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;对话框1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token comment">//弹出对话框并等待其关闭</span>\n    bool<span class="token operator">?</span> delete <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDeleteConfirmDialog1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>delete <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;已确认删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//... 删除文件</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token comment">// 弹出对话框</span>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">showDeleteConfirmDialog1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;您确定要删除当前文件吗?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 关闭对话框</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">//关闭对话框并返回true</span>\n              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例运行后，我们点击对话框“取消”按钮或遮罩，控制台就会输出&quot;取消删除&quot;，如果点击“删除”按钮，控制台就会输出&quot;已确认删除&quot;。</p><blockquote><p>注意：如果<code>AlertDialog</code>的内容过长，内容将会溢出，这在很多时候可能不是我们期望的，所以如果对话框内容过长时，可以用<code>SingleChildScrollView</code>将内容包裹起来。</p></blockquote><h3 id="simpledialog" tabindex="-1"><a class="header-anchor" href="#simpledialog" aria-hidden="true">#</a> SimpleDialog</h3><p><code>SimpleDialog</code>也是Material组件库提供的对话框，它会展示一个列表，用于列表选择的场景。下面是一个选择APP语言的示例，运行结果如图7-12。</p><p><img src="'+e+'" alt="图7-12"></p><p>实现代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">changeLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  int<span class="token operator">?</span> i <span class="token operator">=</span> <span class="token keyword">await</span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">SimpleDialog</span><span class="token punctuation">(</span>\n          title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;请选择语言&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">SimpleDialogOption</span><span class="token punctuation">(</span>\n              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 返回1</span>\n                <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n                padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;中文简体&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">SimpleDialogOption</span><span class="token punctuation">(</span>\n              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 返回2</span>\n                <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n                padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;美国英语&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;选择了：${i == 1 ? &quot;</span></span>中文简体<span class="token string-literal"><span class="token string">&quot; : &quot;</span></span>美国英语<span class="token string-literal"><span class="token string">&quot;}&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表项组件我们使用了<code>SimpleDialogOption</code>组件来包装了一下，它相当于一个TextButton，只不过按钮文案是左对齐的，并且padding较小。上面示例运行后，用户选择一种语言后，控制台就会打印出它。</p><h3 id="dialog" tabindex="-1"><a class="header-anchor" href="#dialog" aria-hidden="true">#</a> Dialog</h3><p>实际上<code>AlertDialog</code>和<code>SimpleDialog</code>都使用了<code>Dialog</code>类。由于<code>AlertDialog</code>和<code>SimpleDialog</code>中使用了<code>IntrinsicWidth</code>来尝试通过子组件的实际尺寸来调整自身尺寸，这就导致他们的子组件不能是延迟加载模型的组件（如<code>ListView</code>、<code>GridView</code> 、 <code>CustomScrollView</code>等），如下面的代码运行后会报错。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n  content<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们就是需要嵌套一个<code>ListView</code>应该怎么做？这时，我们可以直接使用<code>Dialog</code>类，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Dialog</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们看一个弹出一个有30个列表项的对话框示例，运行效果如图7-12所示：</p><p><img src="'+c+'" alt="图7-13"></p><p>实现代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">showListDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  int<span class="token operator">?</span> index <span class="token operator">=</span> <span class="token keyword">await</span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;请选择&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">Expanded</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n            itemCount<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n            itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>\n                title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//使用AlertDialog会报错</span>\n      <span class="token comment">//return AlertDialog(content: child);</span>\n      <span class="token keyword">return</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;点击了：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们己经介绍完了<code>AlertDialog</code>、<code>SimpleDialog</code>以及<code>Dialog</code>。上面的示例中，我们在调用<code>showDialog</code>时，在<code>builder</code>中都是构建了这三个对话框组件的一种，可能有些读者会惯性的以为在<code>builder</code>中只能返回这三者之一，其实这不是必须的！就拿<code>Dialog</code>的示例来举例，我们完全可以用下面的代码来替代<code>Dialog</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// return Dialog(child: child) </span>\n<span class="token keyword">return</span> <span class="token class-name">UnconstrainedBox</span><span class="token punctuation">(</span>\n  constrainedAxis<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>\n    constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">Material</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n      type<span class="token punctuation">:</span> <span class="token class-name">MaterialType</span><span class="token punctuation">.</span>card<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码运行后可以实现一样的效果。现在我们总结一下：<code>AlertDialog</code>、<code>SimpleDialog</code>以及<code>Dialog</code>是Material组件库提供的三种对话框，旨在帮助开发者快速构建出符合Material设计规范的对话框，但读者完全可以自定义对话框样式，因此，我们仍然可以实现各种样式的对话框，这样即带来了易用性，又有很强的扩展性。</p><h2 id="_7-7-2-对话框打开动画及遮罩" tabindex="-1"><a class="header-anchor" href="#_7-7-2-对话框打开动画及遮罩" aria-hidden="true">#</a> 7.7.2 对话框打开动画及遮罩</h2><p>我们可以把对话框分为内部样式和外部样式两部分。内部样式指对话框中显示的具体内容，这部分内容我们已经在上面介绍过了；外部样式包含对话框遮罩样式、打开动画等，本节主要介绍如何自定义这些外部样式。</p><blockquote><p>关于动画相关内容我们将在本书后面章节介绍，下面内容读者可以先了解一下（不必深究），读者可以在学习完动画相关内容后再回头来看。</p></blockquote><p>我们已经介绍过了<code>showDialog</code>方法，它是Material组件库中提供的一个打开Material风格对话框的方法。那如何打开一个普通风格的对话框呢（非Material风格）？ Flutter 提供了一个<code>showGeneralDialog</code>方法，签名如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> showGeneralDialog<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  required <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  required <span class="token class-name">RoutePageBuilder</span> pageBuilder<span class="token punctuation">,</span> <span class="token comment">//构建对话框内部UI</span>\n  bool barrierDismissible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//点击遮罩是否关闭对话框</span>\n  <span class="token class-name">String</span><span class="token operator">?</span> barrierLabel<span class="token punctuation">,</span> <span class="token comment">// 语义化标签(用于读屏软件)</span>\n  <span class="token class-name">Color</span> barrierColor <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 遮罩颜色</span>\n  <span class="token class-name">Duration</span> transitionDuration <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对话框打开/关闭的动画时长</span>\n  <span class="token class-name">RouteTransitionsBuilder</span><span class="token operator">?</span> transitionBuilder<span class="token punctuation">,</span> <span class="token comment">// 对话框打开/关闭的动画</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，<code>showDialog</code>方法正是<code>showGeneralDialog</code>的一个封装，定制了Material风格对话框的遮罩颜色和动画。Material风格对话框打开/关闭动画是一个Fade（渐隐渐显）动画，如果我们想使用一个缩放动画就可以通过<code>transitionBuilder</code>来自定义。下面我们自己封装一个<code>showCustomDialog</code>方法，它定制的对话框动画为缩放动画，并同时制定遮罩颜色为<code>Colors.black87</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> showCustomDialog<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  required <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  bool barrierDismissible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  required <span class="token class-name">WidgetBuilder</span> builder<span class="token punctuation">,</span>\n  <span class="token class-name">ThemeData</span><span class="token operator">?</span> theme<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> <span class="token class-name">ThemeData</span> theme <span class="token operator">=</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> shadowThemeOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">showGeneralDialog</span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> buildContext<span class="token punctuation">,</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>\n        <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> secondaryAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token class-name">Widget</span> pageChild <span class="token operator">=</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> builder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token class-name">SafeArea</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> theme <span class="token operator">!=</span> <span class="token keyword">null</span>\n              <span class="token operator">?</span> <span class="token class-name">Theme</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> theme<span class="token punctuation">,</span> child<span class="token punctuation">:</span> pageChild<span class="token punctuation">)</span>\n              <span class="token punctuation">:</span> pageChild<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    barrierDismissible<span class="token punctuation">:</span> barrierDismissible<span class="token punctuation">,</span>\n    barrierLabel<span class="token punctuation">:</span> <span class="token class-name">MaterialLocalizations</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>modalBarrierDismissLabel<span class="token punctuation">,</span>\n    barrierColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black87<span class="token punctuation">,</span> <span class="token comment">// 自定义遮罩颜色</span>\n    transitionDuration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    transitionBuilder<span class="token punctuation">:</span> _buildMaterialDialogTransitions<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Widget</span> <span class="token function">_buildMaterialDialogTransitions</span><span class="token punctuation">(</span>\n    <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n    <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> animation<span class="token punctuation">,</span>\n    <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> secondaryAnimation<span class="token punctuation">,</span>\n    <span class="token class-name">Widget</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用缩放动画</span>\n  <span class="token keyword">return</span> <span class="token class-name">ScaleTransition</span><span class="token punctuation">(</span>\n    scale<span class="token punctuation">:</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>\n      parent<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n      curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>easeOut<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们使用<code>showCustomDialog</code>打开文件删除确认对话框，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\nshowCustomDialog<span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n  context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n      title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      content<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;您确定要删除当前文件吗?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n        <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 执行删除操作</span>\n            <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图7-14所示：</p><p><img src="'+o+'" alt="图7-14"></p><p>可以发现，遮罩颜色比通过<code>showDialog</code>方法打开的对话框更深。另外对话框打开/关闭的动画已变为缩放动画了，读者可以亲自运行示例查看效果。</p><h2 id="_7-7-3-对话框实现原理" tabindex="-1"><a class="header-anchor" href="#_7-7-3-对话框实现原理" aria-hidden="true">#</a> 7.7.3 对话框实现原理</h2><p>我们以<code>showGeneralDialog</code>方法为例来看看它的具体实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> showGeneralDialog<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  required <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n  required <span class="token class-name">RoutePageBuilder</span> pageBuilder<span class="token punctuation">,</span>\n  bool barrierDismissible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token class-name">String</span><span class="token operator">?</span> barrierLabel<span class="token punctuation">,</span>\n  <span class="token class-name">Color</span> barrierColor <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">Duration</span> transitionDuration <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">RouteTransitionsBuilder</span><span class="token operator">?</span> transitionBuilder<span class="token punctuation">,</span>\n  bool useRootNavigator <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token class-name">RouteSettings</span><span class="token operator">?</span> routeSettings<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> rootNavigator<span class="token punctuation">:</span> useRootNavigator<span class="token punctuation">)</span><span class="token punctuation">.</span>push<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">RawDialogRoute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    pageBuilder<span class="token punctuation">:</span> pageBuilder<span class="token punctuation">,</span>\n    barrierDismissible<span class="token punctuation">:</span> barrierDismissible<span class="token punctuation">,</span>\n    barrierLabel<span class="token punctuation">:</span> barrierLabel<span class="token punctuation">,</span>\n    barrierColor<span class="token punctuation">:</span> barrierColor<span class="token punctuation">,</span>\n    transitionDuration<span class="token punctuation">:</span> transitionDuration<span class="token punctuation">,</span>\n    transitionBuilder<span class="token punctuation">:</span> transitionBuilder<span class="token punctuation">,</span>\n    settings<span class="token punctuation">:</span> routeSettings<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现很简单，直接调用<code>Navigator</code>的<code>push</code>方法打开了一个新的对话框路由<code>RawDialogRoute</code>，然后返回了<code>push</code>的返回值。可见对话框实际上正是通过路由的形式实现的，这也是为什么我们可以使用<code>Navigator</code>的<code>pop</code> 方法来退出对话框的原因。关于对话框的样式定制在<code>RawDialogRoute</code>中，没有什么新的东西，读者可以自行查看。</p><h2 id="_7-7-4-对话框状态管理" tabindex="-1"><a class="header-anchor" href="#_7-7-4-对话框状态管理" aria-hidden="true">#</a> 7.7.4 对话框状态管理</h2><p>我们在用户选择删除一个文件时，会询问是否删除此文件；在用户选择一个文件夹是，应该再让用户确认是否删除子文件夹。为了在用户选择了文件夹时避免二次弹窗确认是否删除子目录，我们在确认对话框底部添加一个“同时删除子目录？”的复选框，如图7-15所示：</p><p><img src="'+l+'" alt="图7-15"></p><p>现在就有一个问题：如何管理复选框的选中状态？习惯上，我们会在路由页的State中来管理选中状态，我们可能会写出如下这样的代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _DialogRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DialogRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool withTree <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 复选框选中状态</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n        <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;对话框2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n            bool<span class="token operator">?</span> delete <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDeleteConfirmDialog2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>delete <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">delete</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">showDeleteConfirmDialog2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    withTree <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 默认复选框不选中</span>\n    <span class="token keyword">return</span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n          title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          content<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n            crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n            mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n            children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n              <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;您确定要删除当前文件吗?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token class-name">Row</span><span class="token punctuation">(</span>\n                children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n                  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录？&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                  <span class="token class-name">Checkbox</span><span class="token punctuation">(</span>\n                    value<span class="token punctuation">:</span> withTree<span class="token punctuation">,</span>\n                    onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>bool value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                      <span class="token comment">//复选框选中状态发生变化时重新构建UI</span>\n                      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//更新复选框状态</span>\n                        withTree <span class="token operator">=</span> <span class="token operator">!</span>withTree<span class="token punctuation">;</span>\n                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//执行删除操作</span>\n                <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>withTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，当我们运行上面的代码时我们会发现复选框根本选不中！为什么会这样呢？其实原因很简单，我们知道<code>setState</code>方法只会针对当前context的子树重新build，但是我们的对话框并不是在<code>_DialogRouteState</code>的<code>build</code> 方法中构建的，而是通过<code>showDialog</code>单独构建的，所以在<code>_DialogRouteState</code>的context中调用<code>setState</code>是无法影响通过<code>showDialog</code>构建的UI的。另外，我们可以从另外一个角度来理解这个现象，前面说过对话框也是通过路由的方式来实现的，那么上面的代码实际上就等同于企图在父路由中调用<code>setState</code>来让子路由更新，这显然是不行的！简尔言之，根本原因就是context不对。那如何让复选框可点击呢？通常有如下三种方法：</p><h3 id="单独抽离出statefulwidget" tabindex="-1"><a class="header-anchor" href="#单独抽离出statefulwidget" aria-hidden="true">#</a> 单独抽离出StatefulWidget</h3><p>既然是context不对，那么直接的思路就是将复选框的选中逻辑单独封装成一个<code>StatefulWidget</code>，然后在其内部管理复选状态。我们先来看看这种方法，下面是实现代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 单独封装一个内部管理选中状态的复选框组件</span>\n<span class="token keyword">class</span> <span class="token class-name">DialogCheckbox</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">DialogCheckbox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>onChanged<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">ValueChanged</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> onChanged<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> bool<span class="token operator">?</span> value<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _DialogCheckboxState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_DialogCheckboxState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _DialogCheckboxState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DialogCheckbox</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool<span class="token operator">?</span> value<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    value <span class="token operator">=</span> widget<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Checkbox</span><span class="token punctuation">(</span>\n      value<span class="token punctuation">:</span> value<span class="token punctuation">,</span>\n      onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//将选中状态通过事件的形式抛出</span>\n        widget<span class="token punctuation">.</span><span class="token function">onChanged</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">//更新自身选中状态</span>\n          value <span class="token operator">=</span> v<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是弹出对话框的代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">showDeleteConfirmDialog3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  bool _withTree <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//记录复选框是否选中</span>\n  <span class="token keyword">return</span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        content<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n          crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n          mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;您确定要删除当前文件吗?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">Row</span><span class="token punctuation">(</span>\n              children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录？&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token class-name">DialogCheckbox</span><span class="token punctuation">(</span>\n                  value<span class="token punctuation">:</span> _withTree<span class="token punctuation">,</span> <span class="token comment">//默认不选中</span>\n                  onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>bool value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//更新选中状态</span>\n                    _withTree <span class="token operator">=</span> <span class="token operator">!</span>_withTree<span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 将选中状态返回</span>\n              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>_withTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，就是使用：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;话框3（复选框可点击）&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token comment">//弹出删除确认对话框，等待用户确认</span>\n    bool<span class="token operator">?</span> deleteTree <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">showDeleteConfirmDialog3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>deleteTree <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">deleteTree</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图7-16所示：</p><p><img src="'+i+'" alt="图7-16"></p><p>可见复选框能选中了，点击“取消”或“删除”后，控制台就会打印出最终的确认状态。</p><h3 id="使用statefulbuilder方法" tabindex="-1"><a class="header-anchor" href="#使用statefulbuilder方法" aria-hidden="true">#</a> 使用StatefulBuilder方法</h3><p>上面的方法虽然能解决对话框状态更新的问题，但是有一个明显的缺点——对话框上所有可能会改变状态的组件都得单独封装在一个在内部管理状态的<code>StatefulWidget</code>中，这样不仅麻烦，而且复用性不大。因此，我们来想想能不能找到一种更简单的方法？上面的方法本质上就是将对话框的状态置于一个<code>StatefulWidget</code>的上下文中，由<code>StatefulWidget</code>在内部管理，那么我们有没有办法在不需要单独抽离组件的情况下创建一个<code>StatefulWidget</code>的上下文呢？想到这里，我们可以从<code>Builder</code>组件的实现获得灵感。在前面介绍过<code>Builder</code>组件可以获得组件所在位置的真正的Context，那它是怎么实现的呢，我们看看它的源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>builder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">WidgetBuilder</span> builder<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>Builder</code>实际上只是继承了<code>StatelessWidget</code>，然后在<code>build</code>方法中获取当前context后将构建方法代理到了<code>builder</code>回调，可见，<code>Builder</code>实际上是获取了<code>StatelessWidget</code> 的上下文（context）。那么我们能否用相同的方法获取<code>StatefulWidget</code> 的上下文，并代理其<code>build</code>方法呢？下面我们照猫画虎，来封装一个<code>StatefulBuilder</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">StatefulBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">StatefulBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>builder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">StatefulWidgetBuilder</span> builder<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _StatefulBuilderState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_StatefulBuilderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _StatefulBuilderState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatefulBuilder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> widget<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> setState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很简单，<code>StatefulBuilder</code>获取了<code>StatefulWidget</code>的上下文，并代理了其构建过程。下面我们就可以通过<code>StatefulBuilder</code>来重构上面的代码了（变动只在<code>DialogCheckbox</code>部分）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n<span class="token class-name">Row</span><span class="token punctuation">(</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录？&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">//使用StatefulBuilder来构建StatefulWidget上下文</span>\n    <span class="token class-name">StatefulBuilder</span><span class="token punctuation">(</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> _setState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Checkbox</span><span class="token punctuation">(</span>\n          value<span class="token punctuation">:</span> _withTree<span class="token punctuation">,</span> <span class="token comment">//默认不选中</span>\n          onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>bool value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//_setState方法实际就是该StatefulWidget的setState方法，</span>\n            <span class="token comment">//调用后builder方法会重新被调用</span>\n            <span class="token function">_setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">//更新选中状态</span>\n              _withTree <span class="token operator">=</span> <span class="token operator">!</span>_withTree<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，这种方法本质上就是子组件通知父组件（StatefulWidget）重新build子组件本身来实现UI更新的，读者可以对比代码理解。实际上<code>StatefulBuilder</code>正是Flutter SDK中提供的一个类，它和<code>Builder</code>的原理是一样的，在此，提醒读者一定要将<code>StatefulBuilder</code>和<code>Builder</code>理解透彻，因为它们在Flutter中是非常实用的。</p><h3 id="精妙的解法" tabindex="-1"><a class="header-anchor" href="#精妙的解法" aria-hidden="true">#</a> 精妙的解法</h3><p>是否还有更简单的解决方案呢？要确认这个问题，我们就得先搞清楚UI是怎么更新的，我们知道在调用<code>setState</code>方法后<code>StatefulWidget</code>就会重新build，那<code>setState</code>方法做了什么呢？我们能不能从中找到方法？顺着这个思路，我们就得看一下<code>setState</code>的核心源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  _element<span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<code>setState</code>中调用了<code>Element</code>的<code>markNeedsBuild()</code>方法，我们前面说过，Flutter是一个响应式框架，要更新UI只需改变状态后通知框架页面需要重构即可，而<code>Element</code>的<code>markNeedsBuild()</code>方法正是来实现这个功能的！<code>markNeedsBuild()</code>方法会将当前的<code>Element</code>对象标记为“dirty”（脏的），在每一个Frame，Flutter都会重新构建被标记为“dirty”<code>Element</code>对象。既然如此，我们有没有办法获取到对话框内部UI的<code>Element</code>对象，然后将其标示为为“dirty”呢？答案是肯定的！我们可以通过Context来得到<code>Element</code>对象，至于<code>Element</code>与<code>Context</code>的关系我们将会在后面“Flutter核心原理”一章中再深入介绍，现在只需要简单的认为：在组件树中，<code>context</code>实际上就是<code>Element</code>对象的引用。知道这个后，那么解决的方案就呼之欲出了，我们可以通过如下方式来让复选框可以更新：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">showDeleteConfirmDialog4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  bool _withTree <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> showDialog<span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        content<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n          crossAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">CrossAxisAlignment</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n          mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;您确定要删除当前文件吗?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">Row</span><span class="token punctuation">(</span>\n              children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录？&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token class-name">Checkbox</span><span class="token punctuation">(</span> <span class="token comment">// 依然使用Checkbox组件</span>\n                  value<span class="token punctuation">:</span> _withTree<span class="token punctuation">,</span>\n                  onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>bool value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 此时context为对话框UI的根Element，我们 </span>\n                    <span class="token comment">// 直接将对话框UI对应的Element标记为dirty</span>\n                    <span class="token punctuation">(</span>context <span class="token operator">as</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    _withTree <span class="token operator">=</span> <span class="token operator">!</span>_withTree<span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;取消&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;删除&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 执行删除操作</span>\n              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>_withTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码运行后复选框也可以正常选中。可以看到，我们只用了一行代码便解决了这个问题！当然上面的代码并不是最优，因为我们只需要更新复选框的状态，而此时的<code>context</code>我们用的是对话框的根<code>context</code>，所以会导致整个对话框UI组件全部rebuild，因此最好的做法是将<code>context</code>的“范围”缩小，也就是说只将<code>Checkbox</code>的Element标记为<code>dirty</code>，优化后的代码为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n<span class="token class-name">Row</span><span class="token punctuation">(</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;同时删除子目录？&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// 通过Builder来获得构建Checkbox的`context`，</span>\n    <span class="token comment">// 这是一种常用的缩小`context`范围的方式</span>\n    <span class="token class-name">Builder</span><span class="token punctuation">(</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Checkbox</span><span class="token punctuation">(</span>\n          value<span class="token punctuation">:</span> _withTree<span class="token punctuation">,</span>\n          onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>bool value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token punctuation">(</span>context <span class="token operator">as</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            _withTree <span class="token operator">=</span> <span class="token operator">!</span>_withTree<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-7-5-其它类型的对话框" tabindex="-1"><a class="header-anchor" href="#_7-7-5-其它类型的对话框" aria-hidden="true">#</a> 7.7.5 其它类型的对话框</h2><h3 id="底部菜单列表" tabindex="-1"><a class="header-anchor" href="#底部菜单列表" aria-hidden="true">#</a> 底部菜单列表</h3><p><code>showModalBottomSheet</code>方法可以弹出一个Material风格的底部菜单列表模态对话框，示例如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 弹出底部菜单列表模态对话框</span>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">_showModalBottomSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> showModalBottomSheet<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n        itemCount<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n        itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>\n            title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击按钮，弹出该对话框：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;显示底部菜单列表&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    int type <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">_showModalBottomSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图7-17所示：</p><p><img src="'+u+'" alt="图7-17"></p><h3 id="loading框" tabindex="-1"><a class="header-anchor" href="#loading框" aria-hidden="true">#</a> Loading框</h3><p>其实Loading框可以直接通过<code>showDialog</code>+<code>AlertDialog</code>来自定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">showLoadingDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">showDialog</span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    barrierDismissible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//点击遮罩不关闭对话框</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n        content<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n          mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n            <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">26.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;正在加载，请稍后...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如图7-18所示：</p><p><img src="'+k+'" alt="图7-18"></p><p>如果我们嫌Loading框太宽，想自定义对话框宽度，这时只使用<code>SizedBox</code>或<code>ConstrainedBox</code>是不行的，原因是<code>showDialog</code>中已经给对话框设置了最小宽度约束，根据我们在第五章“尺寸限制类容器”一节中所述，我们可以使用<code>UnconstrainedBox</code>先抵消<code>showDialog</code>对宽度的约束，然后再使用<code>SizedBox</code>指定宽度，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n<span class="token class-name">UnconstrainedBox</span><span class="token punctuation">(</span>\n  constrainedAxis<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n    width<span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">AlertDialog</span><span class="token punctuation">(</span>\n      content<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n        mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">.8</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">26.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;正在加载，请稍后...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行后，效果如图7-19所示：</p><p><img src="'+d+'" alt="图7-19"></p><h3 id="日历选择" tabindex="-1"><a class="header-anchor" href="#日历选择" aria-hidden="true">#</a> 日历选择</h3><p>我们先看一下Material风格的日历选择器，如图7-20所示：</p><p><img src="'+r+'" alt="图7-20"></p><p>实现代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateTime</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">_showDatePicker1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">showDatePicker</span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    initialDate<span class="token punctuation">:</span> date<span class="token punctuation">,</span>\n    firstDate<span class="token punctuation">:</span> date<span class="token punctuation">,</span>\n    lastDate<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token comment">//未来30天可选</span>\n      <span class="token class-name">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iOS风格的日历选择器需要使用<code>showCupertinoModalPopup</code>方法和<code>CupertinoDatePicker</code>组件来实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateTime</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">_showDatePicker2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">showCupertinoModalPopup</span><span class="token punctuation">(</span>\n    context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>\n    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n        height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">CupertinoDatePicker</span><span class="token punctuation">(</span>\n          mode<span class="token punctuation">:</span> <span class="token class-name">CupertinoDatePickerMode</span><span class="token punctuation">.</span>dateAndTime<span class="token punctuation">,</span>\n          minimumDate<span class="token punctuation">:</span> date<span class="token punctuation">,</span>\n          maximumDate<span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n            <span class="token class-name">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          maximumYear<span class="token punctuation">:</span> date<span class="token punctuation">.</span>year <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          onDateTimeChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">DateTime</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图7-21所示：</p><p><img src="'+v+'" alt="图7-21"></p>',109)],b={},g=(0,a(18580).Z)(b,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,m)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);