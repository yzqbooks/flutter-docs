"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[7808],{41823:(s,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t=JSON.parse('{"key":"v-d9af4d10","path":"/chapter15/models.html","title":"15.3 Model类定义","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Github账号信息","slug":"github账号信息","link":"#github账号信息","children":[]},{"level":3,"title":"API缓存策略信息","slug":"api缓存策略信息","link":"#api缓存策略信息","children":[]},{"level":3,"title":"用户信息","slug":"用户信息","link":"#用户信息","children":[]},{"level":3,"title":"项目信息","slug":"项目信息","link":"#项目信息","children":[]},{"level":3,"title":"生成Dart Model类","slug":"生成dart-model类","link":"#生成dart-model类","children":[]},{"level":3,"title":"数据持久化","slug":"数据持久化","link":"#数据持久化","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":4.22,"words":1267},"filePathRelative":"chapter15/models.md","localizedDate":"2022年6月6日","excerpt":""}')},8970:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});var t=a(6808);const e=[(0,t.uE)('<h1 id="_15-3-model类定义" tabindex="-1"><a class="header-anchor" href="#_15-3-model类定义" aria-hidden="true">#</a> 15.3 Model类定义</h1><p>本节我们先梳理一下APP中将用到的数据，然后生成相应的Dart Model类。Json文件转Dart Model的方案采用前面介绍过的 json_model 包方案，因此在生成Model类之前，会修改部分json字段，比如添加“?”表示该字段可空，关于 json_model 更多信息请参考其文档。</p><h3 id="github账号信息" tabindex="-1"><a class="header-anchor" href="#github账号信息" aria-hidden="true">#</a> Github账号信息</h3><p>登录Github后，我们需要获取当前登录者的Github账号信息，Github API接口返回Json结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;login&quot;</span><span class="token operator">:</span> <span class="token string">&quot;octocat&quot;</span><span class="token punctuation">,</span> <span class="token comment">//用户登录名</span>\n  <span class="token property">&quot;avatar_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span><span class="token punctuation">,</span> <span class="token comment">//用户头像地址</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span> <span class="token comment">//用户类型，可能是组织</span>\n  <span class="token property">&quot;name?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;monalisa octocat&quot;</span><span class="token punctuation">,</span> <span class="token comment">//用户名字</span>\n  <span class="token property">&quot;company?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GitHub&quot;</span><span class="token punctuation">,</span> <span class="token comment">//公司</span>\n  <span class="token property">&quot;blog?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/blog&quot;</span><span class="token punctuation">,</span> <span class="token comment">//博客地址</span>\n  <span class="token property">&quot;location?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;San Francisco&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 用户所处地理位置</span>\n  <span class="token property">&quot;email?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;octocat@github.com&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 邮箱</span>\n  <span class="token property">&quot;hireable?&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;bio?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;There once was...&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 用户简介</span>\n  <span class="token property">&quot;public_repos&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 公开项目数</span>\n  <span class="token property">&quot;followers&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">//关注该用户的人数</span>\n  <span class="token property">&quot;following&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 该用户关注的人数</span>\n  <span class="token property">&quot;created_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2008-01-14T04:33:35Z&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 账号创建时间</span>\n  <span class="token property">&quot;updated_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2008-01-14T04:33:35Z&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 账号信息更新时间</span>\n  <span class="token property">&quot;total_private_repos&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">//该用户总的私有项目数(包括参与的其它组织的私有项目)</span>\n  <span class="token property">&quot;owned_private_repos&quot;</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token comment">//该用户自己的私有项目数</span>\n  ... <span class="token comment">//省略其它字段</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在“jsons”目录下创建一个“user.json”文件保存上述信息。</p><h3 id="api缓存策略信息" tabindex="-1"><a class="header-anchor" href="#api缓存策略信息" aria-hidden="true">#</a> API缓存策略信息</h3><p>由于Github服务器在国内访问速度较慢，我们对Github API应用一些简单的缓存策略。我们在“jsons”目录下创建一个“cacheConfig.json”文件缓存策略信息，定义如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;enable&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否启用缓存</span>\n  <span class="token property">&quot;maxAge&quot;</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 缓存的最长时间，单位（秒）</span>\n  <span class="token property">&quot;maxCount&quot;</span><span class="token operator">:</span><span class="token number">100</span> <span class="token comment">// 最大缓存数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户信息" tabindex="-1"><a class="header-anchor" href="#用户信息" aria-hidden="true">#</a> 用户信息</h3><p>用户信息(Profile)应包括如下信息：</p><ol><li>Github账号信息；由于我们的APP可以切换账号登录，且登录后再次打开则不需要登录，所以我们需要对用户账号信息和登录状态进行持久化。</li><li>应用使用配置信息；每一个用户都应有自己的APP配置信息，如主题、语言、以及数据缓存策略等。</li><li>用户注销登录后，为了便于用户在退出APP前再次登录，我们需要记住上次登录的用户名。</li></ol><p>需要注意的是，目前Github有三种登录方式，分别是账号密码登录、oauth授权登录、二次认证登录；这三种登录方式的安全性依次加强，但是在本示例中，为了简单起见，我们使用账号密码登录，因此我们需要保存用户的密码。</p><blockquote><p>注意：在这里需要提醒读者，在登录场景中，保护用户账号安全是一个非常重要且永恒的话题，在实际开发中应严格杜绝直接明文存储用户账密的行为。</p></blockquote><p>我们在“jsons”目录下创建一个“profile.json”文件，结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;user?&quot;</span><span class="token operator">:</span><span class="token string">&quot;$user&quot;</span><span class="token punctuation">,</span> <span class="token comment">//Github账号信息，结构见&quot;user.json&quot;</span>\n  <span class="token property">&quot;token?&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 登录用户的token(oauth)或密码</span>\n  <span class="token property">&quot;theme&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//主题索引</span>\n  <span class="token property">&quot;cache?&quot;</span><span class="token operator">:</span><span class="token string">&quot;$cacheConfig&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 缓存策略信息，结构见&quot;cacheConfig.json&quot;</span>\n  <span class="token property">&quot;lastLogin?&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">//最近一次的注销登录的用户名</span>\n  <span class="token property">&quot;locale?&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span> <span class="token comment">// APP语言信息</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目信息" tabindex="-1"><a class="header-anchor" href="#项目信息" aria-hidden="true">#</a> 项目信息</h3><p>由于APP主页要显示其所有项目信息，我们在“jsons”目录下创建一个“repo.json”文件保存项目信息。通过参考Github 获取项目信息的API文档，定义出最终的“repo.json”文件结构，如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1296269</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello-World&quot;</span><span class="token punctuation">,</span> <span class="token comment">//项目名称</span>\n  <span class="token property">&quot;full_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;octocat/Hello-World&quot;</span><span class="token punctuation">,</span> <span class="token comment">//项目完整名称</span>\n  <span class="token property">&quot;owner&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$user&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 项目拥有者，结构见&quot;user.json&quot;</span>\n  <span class="token property">&quot;parent?&quot;</span><span class="token operator">:</span><span class="token string">&quot;$repo&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 如果是fork的项目，则此字段表示fork的父项目信息</span>\n  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否私有项目</span>\n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;This your first repo!&quot;</span><span class="token punctuation">,</span> <span class="token comment">//项目描述</span>\n  <span class="token property">&quot;fork&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 该项目是否为fork的项目</span>\n  <span class="token property">&quot;language?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span><span class="token comment">//该项目的主要编程语言</span>\n  <span class="token property">&quot;forks_count&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token comment">// fork了该项目的数量</span>\n  <span class="token property">&quot;stargazers_count&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token comment">//该项目的star数量</span>\n  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token comment">// 项目占用的存储大小</span>\n  <span class="token property">&quot;default_branch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;master&quot;</span><span class="token punctuation">,</span> <span class="token comment">//项目的默认分支</span>\n  <span class="token property">&quot;open_issues_count&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//该项目当前打开的issue数量</span>\n  <span class="token property">&quot;pushed_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2011-01-26T19:06:43Z&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;created_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2011-01-26T19:01:12Z&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;updated_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2011-01-26T19:14:43Z&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;subscribers_count?&quot;</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token comment">//订阅（关注）该项目的人数</span>\n  <span class="token property">&quot;license?&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 该项目的开源许可证</span>\n    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mit&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT License&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;spdx_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://api.github.com/licenses/mit&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;node_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MDc6TGljZW5zZW1pdA==&quot;</span>\n  <span class="token punctuation">}</span>\n  ...<span class="token comment">//省略其它字段</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成dart-model类" tabindex="-1"><a class="header-anchor" href="#生成dart-model类" aria-hidden="true">#</a> 生成Dart Model类</h3><p>现在，我们需要的Json数据已经定义完毕，现在只需要运行json_model package提供的命令来通过json文件生成相应的Dart类：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter packages pub run json_model\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行成功后，可以看到lib/models文件夹下会生成相应的Dart Model类：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── models\n│   ├── cacheConfig.dart\n│   ├── cacheConfig.g.dart\n│   ├── index.dart\n│   ├── profile.dart\n│   ├── profile.g.dart\n│   ├── repo.dart\n│   ├── repo.g.dart\n│   ├── user.dart\n│   └── user.g.dart\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据持久化" tabindex="-1"><a class="header-anchor" href="#数据持久化" aria-hidden="true">#</a> 数据持久化</h3><p>我们使用shared_preferences包来对登录用户的Profile信息进行持久化。shared_preferences是一个Flutter插件，它通过Android和iOS平台提供的机制来实现数据持久化。由于shared_preferences的使用非常简单，读者可以自行查看其文档，在此不再赘述。</p>',26)],o={},p=(0,a(18580).Z)(o,[["render",function(s,n){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},18580:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,t]of n)a[s]=t;return a}}}]);