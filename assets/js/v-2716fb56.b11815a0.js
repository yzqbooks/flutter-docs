"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[4857],{19914:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-2716fb56","path":"/chapter14/flutter_app_startup.html","title":"14.3 Flutter启动流程和渲染管线","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"14.3.1 启动","slug":"_14-3-1-启动","link":"#_14-3-1-启动","children":[]},{"level":2,"title":"14.3.2 渲染管线","slug":"_14-3-2-渲染管线","link":"#_14-3-2-渲染管线","children":[{"level":3,"title":"Frame","slug":"frame","link":"#frame","children":[]},{"level":3,"title":"Flutter 调度过程 SchedulerPhase","slug":"flutter-调度过程-schedulerphase","link":"#flutter-调度过程-schedulerphase","children":[]},{"level":3,"title":"渲染管线（rendering pipeline）","slug":"渲染管线-rendering-pipeline","link":"#渲染管线-rendering-pipeline","children":[]},{"level":3,"title":"setState 执行流","slug":"setstate-执行流","link":"#setstate-执行流","children":[]},{"level":3,"title":"setState 执行时机问题","slug":"setstate-执行时机问题","link":"#setstate-执行时机问题","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":14.44,"words":4332},"filePathRelative":"chapter14/flutter_app_startup.md","localizedDate":"2022年6月6日","excerpt":""}')},45957:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6808),t=a(70102);const p=[(0,e.uE)('<h1 id="_14-3-flutter启动流程和渲染管线" tabindex="-1"><a class="header-anchor" href="#_14-3-flutter启动流程和渲染管线" aria-hidden="true">#</a> 14.3 Flutter启动流程和渲染管线</h1><p>本节我们会先介绍一下Flutter的启动流程，然后再介绍一下 Flutter 的 rendering pipeline (渲染管线)。</p><h2 id="_14-3-1-启动" tabindex="-1"><a class="header-anchor" href="#_14-3-1-启动" aria-hidden="true">#</a> 14.3.1 启动</h2><p>Flutter的入口在&quot;lib/main.dart&quot;的<code>main()</code>函数中，它是Dart应用程序的起点。在Flutter应用中，<code>main()</code>函数最简单的实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看<code>main()</code>函数只调用了一个<code>runApp()</code>方法，我们看看<code>runApp()</code>方法中都做了什么：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> app<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">attachRootWidget</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scheduleWarmUpFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数<code>app</code>是一个 widget，它是 Flutter 应用启动后要展示的第一个组件。而<code>WidgetsFlutterBinding</code>正是绑定widget 框架和Flutter 引擎的桥梁，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">WidgetsFlutterBinding</span> <span class="token keyword">extends</span> <span class="token class-name">BindingBase</span> <span class="token keyword">with</span> <span class="token class-name">GestureBinding</span><span class="token punctuation">,</span> <span class="token class-name">ServicesBinding</span><span class="token punctuation">,</span> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">,</span> <span class="token class-name">PaintingBinding</span><span class="token punctuation">,</span> <span class="token class-name">SemanticsBinding</span><span class="token punctuation">,</span> <span class="token class-name">RendererBinding</span><span class="token punctuation">,</span> <span class="token class-name">WidgetsBinding</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token class-name">WidgetsBinding</span> <span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n      <span class="token class-name">WidgetsFlutterBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>WidgetsFlutterBinding</code>继承自<code>BindingBase</code> 并混入了很多<code>Binding</code>，在介绍这些<code>Binding</code>之前我们先介绍一下<code>Window</code>，下面是<code>Window</code>的官方解释：</p><blockquote><p>The most basic interface to the host operating system&#39;s user interface.</p></blockquote><p>很明显，<code>Window</code> 正是 Flutter Framework 连接宿主操作系统的接口。我们看一下 <code>Window </code>类的部分定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>\n    \n  <span class="token comment">// 当前设备的DPI，即一个逻辑像素显示多少物理像素，数字越大，显示效果就越精细保真。</span>\n  <span class="token comment">// DPI是设备屏幕的固件属性，如Nexus 6的屏幕DPI为3.5 </span>\n  double <span class="token keyword">get</span> devicePixelRatio <span class="token operator">=</span><span class="token operator">&gt;</span> _devicePixelRatio<span class="token punctuation">;</span>\n  \n  <span class="token comment">// Flutter UI绘制区域的大小</span>\n  <span class="token class-name">Size</span> <span class="token keyword">get</span> physicalSize <span class="token operator">=</span><span class="token operator">&gt;</span> _physicalSize<span class="token punctuation">;</span>\n\n  <span class="token comment">// 当前系统默认的语言Locale</span>\n  <span class="token class-name">Locale</span> <span class="token keyword">get</span> locale<span class="token punctuation">;</span>\n    \n  <span class="token comment">// 当前系统字体缩放比例。  </span>\n  double <span class="token keyword">get</span> textScaleFactor <span class="token operator">=</span><span class="token operator">&gt;</span> _textScaleFactor<span class="token punctuation">;</span>  \n    \n  <span class="token comment">// 当绘制区域大小改变回调</span>\n  <span class="token class-name">VoidCallback</span> <span class="token keyword">get</span> onMetricsChanged <span class="token operator">=</span><span class="token operator">&gt;</span> _onMetricsChanged<span class="token punctuation">;</span>  \n  <span class="token comment">// Locale发生变化回调</span>\n  <span class="token class-name">VoidCallback</span> <span class="token keyword">get</span> onLocaleChanged <span class="token operator">=</span><span class="token operator">&gt;</span> _onLocaleChanged<span class="token punctuation">;</span>\n  <span class="token comment">// 系统字体缩放变化回调</span>\n  <span class="token class-name">VoidCallback</span> <span class="token keyword">get</span> onTextScaleFactorChanged <span class="token operator">=</span><span class="token operator">&gt;</span> _onTextScaleFactorChanged<span class="token punctuation">;</span>\n  <span class="token comment">// 绘制前回调，一般会受显示器的垂直同步信号VSync驱动，当屏幕刷新时就会被调用</span>\n  <span class="token class-name">FrameCallback</span> <span class="token keyword">get</span> onBeginFrame <span class="token operator">=</span><span class="token operator">&gt;</span> _onBeginFrame<span class="token punctuation">;</span>\n  <span class="token comment">// 绘制回调  </span>\n  <span class="token class-name">VoidCallback</span> <span class="token keyword">get</span> onDrawFrame <span class="token operator">=</span><span class="token operator">&gt;</span> _onDrawFrame<span class="token punctuation">;</span>\n  <span class="token comment">// 点击或指针事件回调</span>\n  <span class="token class-name">PointerDataPacketCallback</span> <span class="token keyword">get</span> onPointerDataPacket <span class="token operator">=</span><span class="token operator">&gt;</span> _onPointerDataPacket<span class="token punctuation">;</span>\n  <span class="token comment">// 调度Frame，该方法执行后，onBeginFrame和onDrawFrame将紧接着会在合适时机被调用，</span>\n  <span class="token comment">// 此方法会直接调用Flutter engine的Window_scheduleFrame方法</span>\n  <span class="token keyword">void</span> <span class="token function">scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> native <span class="token string-literal"><span class="token string">&#39;Window_scheduleFrame&#39;</span></span><span class="token punctuation">;</span>\n  <span class="token comment">// 更新应用在GPU上的渲染,此方法会直接调用Flutter engine的Window_render方法</span>\n  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Scene</span> scene<span class="token punctuation">)</span> native <span class="token string-literal"><span class="token string">&#39;Window_render&#39;</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 发送平台消息</span>\n  <span class="token keyword">void</span> <span class="token function">sendPlatformMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span>\n                           <span class="token class-name">ByteData</span> data<span class="token punctuation">,</span>\n                           <span class="token class-name">PlatformMessageResponseCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">;</span>\n  <span class="token comment">// 平台通道消息处理回调  </span>\n  <span class="token class-name">PlatformMessageCallback</span> <span class="token keyword">get</span> onPlatformMessage <span class="token operator">=</span><span class="token operator">&gt;</span> _onPlatformMessage<span class="token punctuation">;</span>\n  \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//其它属性及回调</span>\n   \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>Window</code>类包含了当前设备和系统的一些信息以及Flutter Engine的一些回调。现在我们再回来看看<code>WidgetsFlutterBinding</code>混入的各种Binding。通过查看这些 Binding的源码，我们可以发现这些Binding中基本都是监听并处理<code>Window</code>对象的一些事件，然后将这些事件按照Framework的模型包装、抽象然后分发。可以看到<code>WidgetsFlutterBinding</code>正是粘连Flutter engine与上层Framework的“胶水”。</p><ul><li><code>GestureBinding</code>：提供了<code>window.onPointerDataPacket</code> 回调，绑定Framework手势子系统，是Framework事件模型与底层事件的绑定入口。</li><li><code>ServicesBinding</code>：提供了<code>window.onPlatformMessage</code> 回调， 用于绑定平台消息通道（message channel），主要处理原生和Flutter通信。</li><li><code>SchedulerBinding</code>：提供了<code>window.onBeginFrame</code>和<code>window.onDrawFrame</code>回调，监听刷新事件，绑定Framework绘制调度子系统。</li><li><code>PaintingBinding</code>：绑定绘制库，主要用于处理图片缓存。</li><li><code>SemanticsBinding</code>：语义化层与Flutter engine的桥梁，主要是辅助功能的底层支持。</li><li><code>RendererBinding</code>: 提供了<code>window.onMetricsChanged</code> 、<code>window.onTextScaleFactorChanged</code> 等回调。它是渲染树与Flutter engine的桥梁。</li><li><code>WidgetsBinding</code>：提供了<code>window.onLocaleChanged</code>、<code>onBuildScheduled </code> 等回调。它是Flutter widget层与engine的桥梁。</li></ul><p><code> WidgetsFlutterBinding.ensureInitialized()</code>负责初始化一个<code>WidgetsBinding</code>的全局单例，紧接着会调用<code>WidgetsBinding</code>的<code>attachRootWidget</code>方法，该方法负责将根Widget添加到<code>RenderView</code>上，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">attachRootWidget</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> rootWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  _renderViewElement <span class="token operator">=</span> <span class="token class-name">RenderObjectToWidgetAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    container<span class="token punctuation">:</span> renderView<span class="token punctuation">,</span> \n    debugShortDescription<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;[root]&#39;</span></span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> rootWidget\n  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attachToRenderTree</span><span class="token punctuation">(</span>buildOwner<span class="token punctuation">,</span> renderViewElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，代码中的有<code>renderView</code>和<code>renderViewElement</code>两个变量，<code>renderView</code>是一个<code>RenderObject</code>，它是渲染树的根，而<code>renderViewElement</code>是<code>renderView</code>对应的<code>Element</code>对象，可见该方法主要完成了根widget到根 <code>RenderObject</code>再到根<code>Element</code>的整个关联过程。我们看看<code>attachToRenderTree</code>的源码实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">attachToRenderTree</span><span class="token punctuation">(</span><span class="token class-name">BuildOwner</span> owner<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">RenderObjectToWidgetElement</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> element<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    owner<span class="token punctuation">.</span><span class="token function">lockState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">assert</span><span class="token punctuation">(</span>element <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      element<span class="token punctuation">.</span><span class="token function">assignOwner</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    owner<span class="token punctuation">.</span><span class="token function">buildScope</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      element<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    element<span class="token punctuation">.</span>_newWidget <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    element<span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法负责创建根element，即<code> RenderObjectToWidgetElement</code>，并且将element与widget 进行关联，即创建出 widget树对应的element树。如果element 已经创建过了，则将根element 中关联的widget 设为新的，由此可以看出element 只会创建一次，后面会进行复用。那么<code>BuildOwner</code>是什么呢？其实它就是widget framework的管理类，它跟踪哪些 widget 需要重新构建。</p><p>组件树在构建（build）完毕后，回到<code>runApp</code>的实现中，当调用完<code>attachRootWidget</code>后，最后一行会调用 <code>WidgetsFlutterBinding</code> 实例的 <code>scheduleWarmUpFrame()</code> 方法，该方法的实现在<code>SchedulerBinding</code> 中，它被调用后会立即进行一次绘制，在此次绘制结束前，该方法会锁定事件分发，也就是说在本次绘制结束完成之前 Flutter 将不会响应各种事件，这可以保证在绘制过程中不会再触发新的重绘。</p><h2 id="_14-3-2-渲染管线" tabindex="-1"><a class="header-anchor" href="#_14-3-2-渲染管线" aria-hidden="true">#</a> 14.3.2 渲染管线</h2><h3 id="frame" tabindex="-1"><a class="header-anchor" href="#frame" aria-hidden="true">#</a> Frame</h3><p>一次绘制过程，我们称其为一帧（frame）。我们之前说的 Flutter 可以实现60fps（Frame Per-Second）就是指一秒钟最多可以触发 60 次重绘，FPS 值越大，界面就越流畅。这里需要说明的是 Flutter中 的 frame 概念并不等同于屏幕刷新帧（frame），因为Flutter UI 框架的 frame 并不是每次屏幕刷新都会触发，这是因为，如果 UI 在一段时间不变，那么每次屏幕刷新都重新走一遍渲染流程是不必要的，因此，Flutter 在第一帧渲染结束后会采取一种主动请求 frame 的方式来实现只有当UI可能会改变时才会重新走渲染流程。</p><ol><li>Flutter 在 <code>window</code> 上注册一个 <code>onBeginFrame </code>和一个 <code>onDrawFrame</code> 回调，在<code>onDrawFrame</code> 回调中最终会调用 <code>drawFrame</code>。</li><li>当我们调用 <code>window.scheduleFrame()</code> 方法之后，Flutter引擎会在合适的时机（可以认为是在屏幕下一次刷新之前，具体取决于Flutter引擎的实现）来调用<code>onBeginFrame </code>和<code>onDrawFrame</code>。</li></ol><p>可以看见，只有主动调用<code>scheduleFrame() </code>，才会执行 <code>drawFrame</code>。所以，<strong>我们在Flutter 中的提到 frame 时，如无特别说明，则是和 <code>drawFrame()</code> 的调用对应，而不是和屏幕的刷新频率对应</strong>。</p><h3 id="flutter-调度过程-schedulerphase" tabindex="-1"><a class="header-anchor" href="#flutter-调度过程-schedulerphase" aria-hidden="true">#</a> Flutter 调度过程 SchedulerPhase</h3><p>Flutter 应用执行过程简单来讲分为 idle 和 frame 两种状态，idle 状态代表没有 frame 处理，如果应用状态改变需要刷新 UI，则需要通过<code>scheduleFrame()</code>去请求新的 frame，当 frame 到来时，就进入了frame状态，整个Flutter应用生命周期就是在 idle 和 frame 两种状态间切换。</p><h4 id="frame-处理流程" tabindex="-1"><a class="header-anchor" href="#frame-处理流程" aria-hidden="true">#</a> frame 处理流程</h4><p>当有新的 frame 到来时，具体处理过程就是依次执行四个任务队列：transientCallbacks、midFrameMicrotasks、persistentCallbacks、postFrameCallbacks，当四个任务队列执行完毕后当前 frame 结束。综上，Flutter 将整个生命周期分为五种状态，通过 SchedulerPhase 枚举类来表示它们：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">SchedulerPhase</span> <span class="token punctuation">{</span>\n  \n  <span class="token comment">/// 空闲状态，并没有 frame 在处理。这种状态代表页面未发生变化，并不需要重新渲染。</span>\n  <span class="token comment">/// 如果页面发生变化，需要调用`scheduleFrame()`来请求 frame。</span>\n  <span class="token comment">/// 注意，空闲状态只是指没有 frame 在处理，通常微任务、定时器回调或者用户事件回调都</span>\n  <span class="token comment">/// 可能被执行，比如监听了tap事件，用户点击后我们 onTap 回调就是在idle阶段被执行的。</span>\n  idle<span class="token punctuation">,</span>\n\n  <span class="token comment">/// 执行”临时“回调任务，”临时“回调任务只能被执行一次，执行后会被移出”临时“任务队列。</span>\n  <span class="token comment">/// 典型的代表就是动画回调会在该阶段执行。</span>\n  transientCallbacks<span class="token punctuation">,</span>\n\n  <span class="token comment">/// 在执行临时任务时可能会产生一些新的微任务，比如在执行第一个临时任务时创建了一个</span>\n  <span class="token comment">/// Future，且这个 Future 在所有临时任务执行完毕前就已经 resolve 了，这中情况</span>\n  <span class="token comment">/// Future 的回调将在[midFrameMicrotasks]阶段执行</span>\n  midFrameMicrotasks<span class="token punctuation">,</span>\n\n  <span class="token comment">/// 执行一些持久的任务（每一个frame都要执行的任务），比如渲染管线（构建、布局、绘制）</span>\n  <span class="token comment">/// 就是在该任务队列中执行的.</span>\n  persistentCallbacks<span class="token punctuation">,</span>\n\n  <span class="token comment">/// 在当前 frame 在结束之前将会执行 postFrameCallbacks，通常进行一些清理工作和</span>\n  <span class="token comment">/// 请求新的 frame。</span>\n  postFrameCallbacks<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，我们接下来要重点介绍的渲染管线就是在 persistentCallbacks 中执行的。</p><h3 id="渲染管线-rendering-pipeline" tabindex="-1"><a class="header-anchor" href="#渲染管线-rendering-pipeline" aria-hidden="true">#</a> 渲染管线（rendering pipeline）</h3><p>当新的 frame 到来时，调用到 WidgetsBinding 的 <code>drawFrame()</code> 方法，我们来看看它的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略无关代码</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    buildOwner<span class="token punctuation">.</span><span class="token function">buildScope</span><span class="token punctuation">(</span>renderViewElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先执行构建</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//然后调用父类的 drawFrame 方法</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上关键的代码就两行：先重新构建（build），然后再调用父类的 drawFrame 方法，我们将父类的 drawFrame方法展开后：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  buildOwner<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">buildScope</span><span class="token punctuation">(</span>renderViewElement<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.重新构建widget树</span>\n  <span class="token comment">//下面是 展开 super.drawFrame() 方法</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.更新布局</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushCompositingBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3.更新“层合成”信息</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4.重绘</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sendFramesToEngine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    renderView<span class="token punctuation">.</span><span class="token function">compositeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5. 上屏，会将绘制出的bit数据发送给GPU</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到主要做了5件事：</p><ol><li><p>重新构建widget树。</p></li><li><p>更新布局。</p></li><li><p>更新“层合成”信息。</p></li><li><p>重绘。</p></li><li><p>上屏：将绘制的产物显示在屏幕上</p></li></ol><p>我们称上面的5步为 rendering pipeline，中文翻译为 “渲染流水线” 或 “渲染管线”。而渲染管线的这 5 个步骤的具体过程便是本章重点要介绍的。下面我们以 setState 的执行更新的流程为例先对整个更新流程有一个大概的影响</p><h3 id="setstate-执行流" tabindex="-1"><a class="header-anchor" href="#setstate-执行流" aria-hidden="true">#</a> setState 执行流</h3><p>setState 调用后：</p><ol><li>首先调用当前 element 的 markNeedsBuild 方法，将当前 element标记为 dirty 。</li><li>接着调用 scheduleBuildFor，将当前 element 添加到pipelineOwner的 dirtyElements 列表。</li><li>最后请求一个新的 frame，随后会绘制新的 frame：onBuildScheduled-&gt;ensureVisualUpdate-&gt;scheduleFrame() 。当新的 frame 到来时执行渲染管线</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  buildOwner<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">buildScope</span><span class="token punctuation">(</span>renderViewElement<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新构建widget树</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新布局</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushCompositingBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新合成信息</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新绘制</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sendFramesToEngine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    renderView<span class="token punctuation">.</span><span class="token function">compositeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上屏，会将绘制出的bit数据发送给GPU</span>\n    pipelineOwner<span class="token punctuation">.</span><span class="token function">flushSemantics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this also sends the semantics to the OS.</span>\n    _firstFrameSent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>重新构建 widget 树：如果 dirtyElements 列表不为空，则遍历该列表，调用每一个element的rebuild方法重新构建新的widget（树），由于新的widget(树)使用新的状态构建，所以可能导致widget布局信息（占用的空间和位置）发生变化，如果发生变化，则会调用其renderObject的markNeedsLayout方法，该方法会从当前节点向父级查找，直到找到一个relayoutBoundary的节点，然后会将它添加到一个全局的nodesNeedingLayout列表中；如果直到根节点也没有找到relayoutBoundary，则将根节点添加到nodesNeedingLayout列表中。</li><li>更新布局：遍历nodesNeedingLayout数组，对每一个renderObject重新布局（调用其layout方法），确定新的大小和偏移。layout方法中会调用markNeedsPaint()，该方法和 markNeedsLayout 方法功能类似，也会从当前节点向父级查找，直到找到一个isRepaintBoundary属性为true的父节点，然后将它添加到一个全局的nodesNeedingPaint列表中；由于根节点（RenderView）的 isRepaintBoundary 为 true，所以必会找到一个。查找过程结束后会调用 buildOwner.requestVisualUpdate 方法，该方法最终会调用scheduleFrame()，该方法中会先判断是否已经请求过新的frame，如果没有则请求一个新的frame。</li><li>更新合成信息：先忽略，后面我们专门介绍。</li><li>更新绘制：遍历nodesNeedingPaint列表，调用每一个节点的paint方法进行重绘，绘制过程会生成Layer。需要说明一下，flutter中绘制结果是保存在Layer中的，也就是说只要Layer不释放，那么绘制的结果就会被缓存，因此，Layer可以跨frame来缓存绘制结果，避免不必要的重绘开销。Flutter框架绘制过程中，遇到isRepaintBoundary 为 true 的节点时，才会生成一个新的Layer。可见Layer和 renderObject 不是一一对应关系，父子节点可以共享，这个我们会在随后的一个试验中来验证。当然，如果是自定义组件，我们可以在renderObject中手动添加任意多个 Layer，这通常用于只需一次绘制而随后不会发生变化的绘制元素的缓存场景，这个随后我们也会通过一个例子来演示。</li><li>上屏：绘制完成后，我们得到的是一棵Layer树，最后我们需要将Layer树中的绘制信息在屏幕上显示。我们知道Flutter是自实现的渲染引擎，因此，我们需要将绘制信息提交给Flutter engine，而<code>renderView.compositeFrame</code> 正是完成了这个使命。</li></ol><p>以上，便是setState调用到UI更的大概更新过程，实际的流程会更复杂一些，比如在build过程中是不允许再调用setState的，框架需要做一些检查。又比如在frame中会涉及到动画的的调度、在上屏时会将所有的Layer添加到场景（Scene）对象后，再渲染Scene。上面的流程读者先有个映像即可，我们将在后面的小节中详细介绍。</p><h3 id="setstate-执行时机问题" tabindex="-1"><a class="header-anchor" href="#setstate-执行时机问题" aria-hidden="true">#</a> setState 执行时机问题</h3><p>setState 会触发 build，而 build 是在执行 <code>persistentCallbacks</code> 阶段执行的，因此只要不是在该阶段执行 setState 就绝对安全，但是这样的粒度太粗，比如在transientCallbacks 和 midFrameMicrotasks 阶段，如果应用状态发生变化，最好的方式是只将组件标记为 dirty，而不用再去请求新的 frame ，因为当前frame 还没有执行到 <code>persistentCallbacks</code>，因此后面执行到后就会在当前帧渲染管线中刷新UI。因此，setState 在标记完 dirty 后会先判断一下调度状态，如果是 idle 或 执行 postFrameCallbacks 阶段才会去请求新的 frame :</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">ensureVisualUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>schedulerPhase<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>idle<span class="token punctuation">:</span>\n    <span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>postFrameCallbacks<span class="token punctuation">:</span>\n      <span class="token function">scheduleFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请求新的frame</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>transientCallbacks<span class="token punctuation">:</span>\n    <span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>midFrameMicrotasks<span class="token punctuation">:</span>\n    <span class="token keyword">case</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>persistentCallbacks<span class="token punctuation">:</span> <span class="token comment">// 注意这一行</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码在大多数情况下是没有问题的，但是如果我们在 build 阶段又调用 setState 的话还是会有问题，因为如果我们在 build 阶段又调用 setState 的话就又会导致 build....这样将将导致循环调用，因此 flutter 框架发现在 build 阶段调用 setState 的话就会报错，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// build 阶段不能调用 setState, 会报错</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token operator">++</span>index<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;xx&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后会报错，控制台会打印：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>==== Exception caught by widgets library ====\nThe following assertion was thrown building LayoutBuilder:\nsetState() or markNeedsBuild() called during build.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，如果我们直接在 build 中调用<code>setState</code> ，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">++</span>index<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后是不会报错的，原因是在执行 build 时当前组件的 dirty 状态（对应的element中）为 true，只有 build 执行完后才会被置为 false。而 setState 执行的时候会会先判断当前 dirty 值，如果为 true 则会直接返回，因此就不会报错。</p><p>上面我们只讨论了在 build 阶段调用 setState 会导致错误，实际上在整个构建、布局和绘制阶段都不能同步调用 setState，这是因为，在这些阶段调用 setState 都有可能请求新的 frame，都可能会导致循环调用，因此如果要在这些阶段更新应用状态时，都不能直接调用 setState。</p><h4 id="安全更新" tabindex="-1"><a class="header-anchor" href="#安全更新" aria-hidden="true">#</a> 安全更新</h4><p>现在我们知道在 build 阶段不能调用 setState了，实际上在组件的布局阶段和绘制阶段也都不能直接再同步请求重新布局或重绘，道理是相同的，那在这些阶段正确的更新方式是什么呢，我们以 setState 为例，可以通过如下方式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 在build、布局、绘制阶段安全更新</span>\n<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，update 函数只应该在 frame 执行 <code>persistentCallbacks</code> 时执行，其它阶段直接调用 setState 即可。因为 idle 状态会是一个特例，如果 在idle 状态调用 update 的话，需要手动调用 <code>scheduleFrame()</code> 请求新的 frame，否则 postFrameCallbacks 在下一个frame （其它组件请求的 frame ）到来之前不会被执行，因此我们可以将 update 修改一下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> schedulerPhase <span class="token operator">=</span> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span>schedulerPhase<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>schedulerPhase <span class="token operator">==</span> <span class="token class-name">SchedulerPhase</span><span class="token punctuation">.</span>persistentCallbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setState</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们封装了一个可以安全更新状态的 update 函数。</p><p>现在我们回想一下，在第十章 “自绘组件：CustomCheckbox” 一节中，为了执行动画，我们在绘制完成之后通过如下代码请求重绘：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n   <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们并没有直接调用 markNeedsPaint()，而原因正如上面所述。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>本节介绍了Flutter App 从启动到显示到屏幕上的主流程，重点是 Flutter 的渲染流程，如图14-4：<img src="'+t+'" alt="图14-4"></p><p>需要说明的是 build 过程和 layout 过程是可以交替执行的，这个我们在介绍 LayoutBuilder 一节时已经解释过了。读者需要对整个渲染流程有个大概映像，后面我们会详细介绍，不过在深入介绍渲染管线之前，我们得仔细的了解一下 Element 、BuildContext 和 RenderObject 三个类。</p>',69)],c={},i=(0,a(18580).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},70102:(n,s,a)=>{n.exports=a.p+"assets/img/14-4.1cbf75e4.png"}}]);