"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[6336],{26109:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-144248ba","path":"/chapter3/radio_and_checkbox.html","title":"3.4 单选开关和复选框","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"属性及外观","slug":"属性及外观","link":"#属性及外观","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.98,"words":594},"filePathRelative":"chapter3/radio_and_checkbox.md","localizedDate":"2022年6月6日","excerpt":""}')},55002:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var e=a(6808);const t=a.p+"assets/img/3-17.936dc309.png",c=[(0,e.uE)('<h1 id="_3-4-单选开关和复选框" tabindex="-1"><a class="header-anchor" href="#_3-4-单选开关和复选框" aria-hidden="true">#</a> 3.4 单选开关和复选框</h1><p>Material 组件库中提供了 Material 风格的单选开关<code>Switch</code>和复选框<code>Checkbox</code>，虽然它们都是继承自<code>StatefulWidget</code>，但它们本身不会保存当前选中状态，选中状态都是由父组件来管理的。当<code>Switch</code>或<code>Checkbox</code>被点击时，会触发它们的<code>onChanged</code>回调，我们可以在此回调中处理选中状态改变逻辑。下面看一个简单的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SwitchAndCheckBoxTestRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _SwitchAndCheckBoxTestRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_SwitchAndCheckBoxTestRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _SwitchAndCheckBoxTestRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwitchAndCheckBoxTestRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool _switchSelected<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//维护单选开关状态</span>\n  bool _checkboxSelected<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//维护复选框状态</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n        <span class="token class-name">Switch</span><span class="token punctuation">(</span>\n          value<span class="token punctuation">:</span> _switchSelected<span class="token punctuation">,</span><span class="token comment">//当前状态</span>\n          onChanged<span class="token punctuation">:</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//重新构建页面  </span>\n            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              _switchSelected<span class="token operator">=</span>value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Checkbox</span><span class="token punctuation">(</span>\n          value<span class="token punctuation">:</span> _checkboxSelected<span class="token punctuation">,</span>\n          activeColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token comment">//选中时的颜色</span>\n          onChanged<span class="token punctuation">:</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              _checkboxSelected<span class="token operator">=</span>value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，由于需要维护<code>Switch</code>和<code>Checkbox</code>的选中状态，所以<code>SwitchAndCheckBoxTestRoute</code>继承自<code>StatefulWidget</code> 。在其<code>build</code>方法中分别构建了一个<code>Switch</code>和<code>Checkbox</code>，初始状态都为选中状态，当用户点击时，会将状态置反，然后回调用<code>setState()</code>通知 Flutter 框架重新构建UI，效果如图3-17所示：</p><p><img src="'+t+'" alt="图3-17"></p><h3 id="属性及外观" tabindex="-1"><a class="header-anchor" href="#属性及外观" aria-hidden="true">#</a> 属性及外观</h3><p><code>Switch</code>和<code>Checkbox</code>属性比较简单，读者可以查看API文档，它们都有一个<code>activeColor</code>属性，用于设置激活态的颜色。至于大小，到目前为止，<code>Checkbox</code>的大小是固定的，无法自定义，而<code>Switch</code>只能定义宽度，高度也是固定的。值得一提的是<code>Checkbox</code>有一个属性<code>tristate</code> ，表示是否为三态，其默认值为<code>false</code> ，这时 Checkbox 有两种状态即“选中”和“不选中”，对应的 value 值为<code>true</code>和<code>false</code> ；如果<code>tristate</code>值为<code>true</code>时，value 的值会增加一个状态<code>null</code>，读者可以自行测试。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>通过<code>Switch</code>和<code>Checkbox</code>我们可以看到，虽然它们本身是与状态（是否选中）关联的，但它们却不是自己来维护状态，而是需要父组件来管理状态，然后当用户点击时，再通过事件通知给父组件，这样是合理的，因为<code>Switch</code>和<code>Checkbox</code>是否选中本就和用户数据关联，而这些用户数据也不可能是它们的私有状态。我们在自定义组件时也应该思考一下哪种状态的管理方式最为合理。</p>',9)],o={},p=(0,a(18580).Z)(o,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);