"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[8550],{34126:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-841495fa","path":"/chapter8/notification.html","title":"8.6 通知 Notification","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"阻止冒泡","slug":"阻止冒泡","link":"#阻止冒泡","children":[]},{"level":3,"title":"冒泡原理","slug":"冒泡原理","link":"#冒泡原理","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.76,"words":2028},"filePathRelative":"chapter8/notification.md","localizedDate":"2022年6月6日","excerpt":""}')},54215:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6808);const e=a.p+"assets/img/8-7.bbcac2ac.png",o=[(0,t.uE)('<h1 id="_8-6-通知-notification" tabindex="-1"><a class="header-anchor" href="#_8-6-通知-notification" aria-hidden="true">#</a> 8.6 通知 Notification</h1><p>通知（Notification）是Flutter中一个重要的机制，在widget树中，每一个节点都可以分发通知，通知会沿着当前节点向上传递，所有父节点都可以通过<code>NotificationListener</code>来监听通知。Flutter中将这种由子向父的传递通知的机制称为<strong>通知冒泡</strong>（Notification Bubbling）。通知冒泡和用户触摸事件冒泡是相似的，但有一点不同：通知冒泡可以中止，但用户触摸事件不行。</p><blockquote><p>通知冒泡和Web开发中浏览器事件冒泡原理是相似的，都是事件从出发源逐层向上传递，我们可以在上层节点任意位置来监听通知/事件，也可以终止冒泡过程，终止冒泡后，通知将不会再向上传递。</p></blockquote><p>Flutter中很多地方使用了通知，如前面介绍的 Scrollable 组件，它在滑动时就会分发<strong>滚动通知</strong>（ScrollNotification），而 Scrollbar 正是通过监听 ScrollNotification 来确定滚动条位置的。</p><p>下面是一个监听可滚动组件滚动通知的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">NotificationListener</span><span class="token punctuation">(</span>\n  onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>notification<span class="token punctuation">.</span>runtimeType<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token class-name">ScrollStartNotification</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;开始滚动&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">ScrollUpdateNotification</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;正在滚动&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">ScrollEndNotification</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;滚动停止&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token class-name">OverscrollNotification</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;滚动到边界&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n    itemCount<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中的滚动通知如<code>ScrollStartNotification</code>、<code>ScrollUpdateNotification</code>等都是继承自<code>ScrollNotification</code>类，不同类型的通知子类会包含不同的信息，比如<code>ScrollUpdateNotification</code>有一个<code>scrollDelta</code>属性，它记录了移动的位移，其它通知属性读者可以自己查看SDK文档。</p><p>上例中，我们通过<code>NotificationListener</code>来监听子<code>ListView</code>的滚动通知的，<code>NotificationListener</code>定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Notification</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">NotificationListener</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>onNotification<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略无关代码 </span>\n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到：</p><ol><li><p><code>NotificationListener</code> 继承自<code>StatelessWidget </code>类，所以它可以直接嵌套到 Widget 树中。</p></li><li><p><code>NotificationListener</code> 可以指定一个模板参数，该模板参数类型必须是继承自<code>Notification</code>；当显式指定模板参数时，<code>NotificationListener</code> 便只会接收该参数类型的通知。举个例子，如果我们将上例子代码改为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//指定监听通知的类型为滚动结束通知(ScrollEndNotification)</span>\n<span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollEndNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n  onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//只会在滚动结束时才会触发此回调</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n    itemCount<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码运行后便只会在滚动结束时在控制台打印出通知的信息。</p></li><li><p><code>onNotification</code>回调为通知处理回调，其函数签名如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">NotificationListenerCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Notification</span><span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> bool <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">T</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的返回值类型为布尔值，当返回值为<code>true</code>时，阻止冒泡，其父级Widget将再也收不到该通知；当返回值为<code>false</code> 时继续向上冒泡通知。</p></li></ol><p>Flutter的UI框架实现中，除了在可滚动组件在滚动过程中会发出<code>ScrollNotification</code>之外，还有一些其它的通知，如<code>SizeChangedLayoutNotification</code>、<code>KeepAliveNotification</code> 、<code>LayoutChangedNotification</code>等，Flutter正是通过这种通知机制来使父元素可以在一些特定时机来做一些事情。</p><h4 id="自定义通知" tabindex="-1"><a class="header-anchor" href="#自定义通知" aria-hidden="true">#</a> 自定义通知</h4><p>除了 Flutter 内部通知，我们也可以自定义通知，下面我们看看如何实现自定义通知：</p><ol><li><p>定义一个通知类，要继承自Notification类；</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyNotification</span> <span class="token keyword">extends</span> <span class="token class-name">Notification</span> <span class="token punctuation">{</span>\n  <span class="token class-name">MyNotification</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分发通知。</p><p><code>Notification</code>有一个<code>dispatch(context)</code>方法，它是用于分发通知的，我们说过<code>context</code>实际上就是操作<code>Element</code>的一个接口，它与<code>Element</code>树上的节点是对应的，通知会从<code>context</code>对应的<code>Element</code>节点向上冒泡。</p></li></ol><p>下面我们看一个完整的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NotificationRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">NotificationRouteState</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">NotificationRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">NotificationRouteState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotificationRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> _msg<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//监听通知  </span>\n    <span class="token keyword">return</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span>notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          _msg<span class="token operator">+=</span>notification<span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token string-literal"><span class="token string">&quot;  &quot;</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n          mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n<span class="token comment">//           ElevatedButton(</span>\n<span class="token comment">//           onPressed: () =&gt; MyNotification(&quot;Hi&quot;).dispatch(context),</span>\n<span class="token comment">//           child: Text(&quot;Send Notification&quot;),</span>\n<span class="token comment">//          ),  </span>\n            <span class="token class-name">Builder</span><span class="token punctuation">(</span>\n              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n                  <span class="token comment">//按钮点击时分发通知  </span>\n                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">MyNotification</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Send Notification&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">Text</span><span class="token punctuation">(</span>_msg<span class="token punctuation">)</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyNotification</span> <span class="token keyword">extends</span> <span class="token class-name">Notification</span> <span class="token punctuation">{</span>\n  <span class="token class-name">MyNotification</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，我们每点一次按钮就会分发一个<code>MyNotification</code>类型的通知，我们在Widget根上监听通知，收到通知后我们将通知通过Text显示在屏幕上。</p><blockquote><p>注意：代码中注释的部分是不能正常工作的，因为这个<code>context</code>是根Context，而NotificationListener是监听的子树，所以我们通过<code>Builder</code>来构建ElevatedButton，来获得按钮位置的context。</p></blockquote><p>运行效果如图8-7所示：</p><p><img src="'+e+'" alt="图8-7"></p><h3 id="阻止冒泡" tabindex="-1"><a class="header-anchor" href="#阻止冒泡" aria-hidden="true">#</a> 阻止冒泡</h3><p>我们将上面的例子改为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NotificationRouteState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NotificationRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> _msg<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//监听通知</span>\n    <span class="token keyword">return</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印通知</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyNotification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n        onNotification<span class="token punctuation">:</span> <span class="token punctuation">(</span>notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            _msg<span class="token operator">+=</span>notification<span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token string-literal"><span class="token string">&quot;  &quot;</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//省略重复代码</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上列中两个<code>NotificationListener</code>进行了嵌套，子<code>NotificationListener</code>的<code>onNotification</code>回调返回了<code>false</code>，表示不阻止冒泡，所以父<code>NotificationListener</code>仍然会受到通知，所以控制台会打印出通知信息；如果将子<code>NotificationListener</code>的<code>onNotification</code>回调的返回值改为<code>true</code>，则父<code>NotificationListener</code>便不会再打印通知了，因为子<code>NotificationListener</code>已经终止通知冒泡了。</p><h3 id="冒泡原理" tabindex="-1"><a class="header-anchor" href="#冒泡原理" aria-hidden="true">#</a> 冒泡原理</h3><p>我们在上面介绍了通知冒泡的现象及使用，现在我们更深入一些，介绍一下Flutter框架中是如何实现通知冒泡的。为了搞清楚这个问题，就必须看一下源码，我们从通知分发的的源头出发，然后再顺藤摸瓜。由于通知是通过<code>Notification</code>的<code>dispatch(context)</code>方法发出的，那我们先看看<code>dispatch(context)</code>方法中做了什么，下面是相关源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">visitAncestorElements</span><span class="token punctuation">(</span>visitAncestor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dispatch(context)</code>中调用了当前context的<code>visitAncestorElements</code>方法，该方法会从当前Element开始向上遍历父级元素；<code>visitAncestorElements</code>有一个遍历回调参数，在遍历过程中对遍历到的父级元素都会执行该回调。遍历的终止条件是：已经遍历到根Element或某个遍历回调返回<code>false</code>。源码中传给<code>visitAncestorElements</code>方法的遍历回调为<code>visitAncestor</code>方法，我们看看<code>visitAncestor</code>方法的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//遍历回调，会对每一个父级Element执行此回调</span>\nbool <span class="token function">visitAncestor</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//判断当前element对应的Widget是否是NotificationListener。</span>\n  \n  <span class="token comment">//由于NotificationListener是继承自StatelessWidget，</span>\n  <span class="token comment">//故先判断是否是StatelessElement</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">is</span> <span class="token class-name">StatelessElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//是StatelessElement，则获取element对应的Widget，判断</span>\n    <span class="token comment">//是否是NotificationListener 。</span>\n    <span class="token keyword">final</span> <span class="token class-name">StatelessWidget</span> widget <span class="token operator">=</span> element<span class="token punctuation">.</span>widget<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget <span class="token operator">is</span> <span class="token class-name">NotificationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Notification</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//是NotificationListener，则调用该NotificationListener的_dispatch方法</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span><span class="token function">_dispatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">)</span> \n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>visitAncestor </code>会判断每一个遍历到的父级Widget是否是<code>NotificationListener</code>，如果不是，则返回<code>true</code>继续向上遍历，如果是，则调用<code>NotificationListener</code>的<code>_dispatch</code>方法，我们看看<code>_dispatch</code>方法的源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  bool <span class="token function">_dispatch</span><span class="token punctuation">(</span><span class="token class-name">Notification</span> notification<span class="token punctuation">,</span> <span class="token class-name">Element</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果通知监听器不为空，并且当前通知类型是该NotificationListener</span>\n    <span class="token comment">// 监听的通知类型，则调用当前NotificationListener的onNotification</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>onNotification <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> notification <span class="token operator">is</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> bool result <span class="token operator">=</span> <span class="token function">onNotification</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 返回值决定是否继续向上遍历</span>\n      <span class="token keyword">return</span> result <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到<code>NotificationListener</code>的<code>onNotification</code>回调最终是在<code>_dispatch</code>方法中执行的，然后会根据返回值来确定是否继续向上冒泡。上面的源码实现其实并不复杂，通过阅读这些源码，一些额外的点读者可以注意一下：</p><ol><li><code>Context</code>上也提供了遍历Element树的方法。</li><li>我们可以通过<code>Element.widget</code>得到<code>element</code>节点对应的widget；我们已经反复讲过 Widget 和Element的对应关系，读者通过这些源码来加深理解。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>Flutter 中通过通知冒泡实现了一套自低向上的消息传递机制，这个和 Web 开发中浏览器的事件冒泡原理类似，Web 开发者可以类比学习。另外我们通过源码了解了 Flutter 通知冒泡的流程和原理，便于读者加深理解和学习 Flutter 的框架设计思想，在此，再次建议读者在平时学习中能多看看源码，定会受益匪浅。</p>',36)],p={},c=(0,a(18580).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);