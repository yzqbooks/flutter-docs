"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[3402],{33166:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t=JSON.parse('{"key":"v-2fdda7f8","path":"/chapter14/update.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"试验一： RepaintBoundary 验证 。","slug":"试验一-repaintboundary-验证-。","link":"#试验一-repaintboundary-验证-。","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":4.59,"words":1378},"filePathRelative":"chapter14/update.md","localizedDate":"2022年6月6日","excerpt":""}')},74762:(n,a,s)=>{s.r(a),s.d(a,{default:()=>o});var t=s(6808);const e=[(0,t.uE)('<p>setState：</p><ol><li>调用markNeedsBuild，标记element为dirty 。</li><li>调用scheduleBuildFor，将当前element添加到一个全局的dirtyElements列表。</li><li>请求一个新的frame，随后会绘制新的frame，onBuildScheduled-&gt;ensureVisualUpdate-&gt;scheduleFrame()</li></ol><p>绘制过程：</p><p>WidgetsBinding.drawFrame：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n<span class="token keyword">void</span> <span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  buildOwner<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">buildScope</span><span class="token punctuation">(</span>renderViewElement<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新构建widget树</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新布局</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushCompositingBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新合成信息</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新绘制</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sendFramesToEngine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    renderView<span class="token punctuation">.</span><span class="token function">compositeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上屏，会将绘制出的bit数据发送给GPU</span>\n    pipelineOwner<span class="token punctuation">.</span><span class="token function">flushSemantics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this also sends the semantics to the OS.</span>\n    _firstFrameSent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>重新构建widget树：如果dirtyElements列表不为空，则遍历该列表，调用每一个element的rebuild方法重新构建新的widget（树），由于新的widget(树)使用新的状态构建，所以可能导致widget布局信息（占用的空间和位置）发生变化，如果发生变化，则会调用其renderObject的markNeedsLayout方法，该方法会从当前节点向父级查找，直到找到一个relayoutBoundary的节点，然后会将它添加到一个全局的nodesNeedingLayout列表中；如果直到根节点也没有找到relayoutBoundary，则将根节点添加到nodesNeedingLayout列表中。</li><li>更新布局：遍历nodesNeedingLayout数组，对每一个renderObject重新布局（调用其layout方法），确定新的大小和偏移。layout方法中会调用markNeedsPaint()，该方法和 markNeedsLayout 方法功能类似，也会从当前节点向父级查找，直到找到一个isRepaintBoundary属性为true的父节点，然后将它添加到一个全局的nodesNeedingPaint列表中；由于根节点（RenderView）的 isRepaintBoundary 为 true，所以必会找到一个。查找过程结束后会调用buildOwner.requestVisualUpdate方法，该方法最终会调用scheduleFrame()，该方法中会先判断是否已经请求过新的frame，如果没有则请求一个新的frame。</li><li>更新合成信息：</li><li>更新绘制：遍历nodesNeedingPaint列表，调用每一个节点的paint方法进行重绘，绘制过程会生成Layer。需要说明一下，flutter中绘制结果是保存在Layer中的，也就是说只要Layer不释放，那么绘制的结果就会被缓存，因此，Layer可以跨frame来缓存绘制结果，避免不必要的重绘开销。Flutter框架绘制过程中，遇到isRepaintBoundary 为 true 的节点时，才会生成一个新的Layer。可见Layer和 renderObject 不是一一对应关系，父子节点可以共享，这个我们会在随后的一个试验中来验证。当然，如果是自定义组件，我们可以在renderObject中手动添加任意多个 Layer，这通常用于只需一次绘制而随后不会发生变化的绘制元素的缓存场景，这个随后我们也会通过一个例子来演示。</li><li>上屏：绘制完成后，我们得到的是一棵Layer树，最后我们需要将Layer树中的绘制信息在屏幕上显示。我们知道Flutter是自实现的渲染引擎，因此，我们需要将绘制信息提交给Flutter engine，而<code>renderView.compositeFrame</code> 正是完成了这个使命。</li></ol><p>以上，便是setState调用到UI更的大概更新过程，实际的流程会更复杂一些，比如在build过程中是不允许再调用setState的，框架需要做一些检查；又比如在frame中会涉及到动画的的调度、在上屏时会将所有的Layer添加到场景（Scene）对象后，再渲染Scene，读者有兴趣可以自行查看源码或关注笔者博客（后续会有补充内容哦）。</p><h2 id="试验一-repaintboundary-验证-。" tabindex="-1"><a class="header-anchor" href="#试验一-repaintboundary-验证-。" aria-hidden="true">#</a> 试验一： RepaintBoundary 验证 。</h2><p>我们先定义一个绘制组件所占区域边框的画笔：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">OutlinePainter</span> <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;paint&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">2</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>style<span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span>\n    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">.</span>zero <span class="token operator">&amp;</span> size<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 本例中，rebuild时，painter会重新构建一个新实例，返回false,</span>\n  <span class="token comment">// 表示即使Painter实例发生变化也不需要重新绘制。</span>\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">CustomPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _RepaintBoundaryTestState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RepaintBoundaryTest</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>\n          size<span class="token punctuation">:</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          painter<span class="token punctuation">:</span> <span class="token class-name">OutlinePainter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;setState&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们点击“setState”按钮，会发现控制台输出了多次“paint”。这是因为ElevatedButton按钮点击时会执行水波动画，动画的每一帧都会触发一次ElevatedButton重绘（markNeedsRepaint），虽然重绘是ElevatedButton触发，但是我们前面说过markNeedsRepaint在执行过程中会向父级查找最近的一个 isRepaintBoundary 为 true 的节点，然后会在flushPaint时会创建一个layer，然后会从该父级节点出发向下绘制及其所有子节点，直到遇到一个 isRepaintBoundary为true的节点时停止向下查找绘制。所以在本例中，最终CustomPaint也重新绘制了。那如何防止CustomPaint被牵连呢？有两个方法：</p><ol><li>给ElevatedButton添加一个<code>RepaintBoundary</code>。</li><li>给CustomPaint添加一个<code>RepaintBoundary</code>。</li></ol><p>RepaintBoundary 是一个可以有单个孩子的widget，实现原理很简单，就是将自己renderObject的isRepaintBoundary设为true，这样在绘制的过程中就会为其（以及其子节点）单独生成一个layer，子节点触发重绘时，RepaintBoundary为其最近的isRepaintBoundary为true的父节点，所以会从RepaintBoundary向下绘制，如此，CustomPaint和 ElevatedButton的重绘就不会相互牵连了。其实从名字上也能看出来RepaintBoundary 的作用其实就是一个“绘制边界”。上述绘制逻辑的实现在PaintContext方法中，感兴趣的话可以自己查阅源码。</p><p>同理，在layout阶段，LayoutBoundary的效果也类似。</p>',16)],p={},o=(0,s(18580).Z)(p,[["render",function(n,a){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},18580:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);