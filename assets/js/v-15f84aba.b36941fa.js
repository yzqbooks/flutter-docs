"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[2459],{96890:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-15f84aba","path":"/chapter6/single_child_scrollview.html","title":"6.2 SingleChildScrollView","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.25,"words":376},"filePathRelative":"chapter6/single_child_scrollview.md","localizedDate":"2022年6月6日","excerpt":""}')},2461:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var e=a(6808);const t=a.p+"assets/img/6-2.640d6b85.png",c=[(0,e.uE)('<h1 id="_6-2-singlechildscrollview" tabindex="-1"><a class="header-anchor" href="#_6-2-singlechildscrollview" aria-hidden="true">#</a> 6.2 SingleChildScrollView</h1><p><code>SingleChildScrollView</code>类似于Android中的<code>ScrollView</code>，它只能接收一个子组件，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>scrollDirection <span class="token operator">=</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span> <span class="token comment">//滚动方向，默认是垂直方向</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>reverse <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>padding<span class="token punctuation">,</span> \n  bool primary<span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>physics<span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>controller<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上一节我们介绍过的可滚动组件的通用属性外，我们重点<code>primary</code>属性：它表示是否使用 widget 树中默认的<code>PrimaryScrollController</code>（MaterialApp 组件树中已经默认包含一个 PrimaryScrollController 了）；当滑动方向为垂直方向（<code>scrollDirection</code>值为<code>Axis.vertical</code>）并且没有指定<code>controller</code>时，<code>primary</code>默认为<code>true</code>。</p><p>需要注意的是，<strong>通常<code>SingleChildScrollView</code>只应在期望的内容不会超过屏幕太多时使用</strong>，这是因为<code>SingleChildScrollView</code>不支持基于 Sliver 的延迟加载模型，所以如果预计视口可能包含超出屏幕尺寸太多的内容时，那么使用<code>SingleChildScrollView</code>将会非常昂贵（性能差），此时应该使用一些支持Sliver延迟加载的可滚动组件，如<code>ListView</code>。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>下面是一个将大写字母 A-Z 沿垂直方向显示的例子，由于垂直方向空间会超过屏幕视口高度，所以我们使用<code>SingleChildScrollView</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SingleChildScrollViewTestRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Scrollbar</span><span class="token punctuation">(</span> <span class="token comment">// 显示进度条</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>\n        padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span> \n            <span class="token comment">//动态创建一个List&lt;Widget&gt;  </span>\n            children<span class="token punctuation">:</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> \n                <span class="token comment">//每一个字母都用一个Text显示,字体为原来的两倍</span>\n                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> textScaleFactor<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n                <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-2所示：</p><p><img src="'+t+'" alt="图6-2"></p>',10)],l={},p=(0,a(18580).Z)(l,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);