"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[3214],{70767:(e,d,c)=>{c.r(d),c.d(d,{data:()=>a});const a=JSON.parse('{"key":"v-34707529","path":"/chapter10/intro.html","title":"10.1 自定义组件方法简介","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"组合多个Widget","slug":"组合多个widget","link":"#组合多个widget","children":[]},{"level":3,"title":"自绘","slug":"自绘","link":"#自绘","children":[]},{"level":3,"title":"实现RenderObject","slug":"实现renderobject","link":"#实现renderobject","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"chapter10/intro.md","localizedDate":"2022年6月6日","excerpt":""}')},75532:(e,d,c)=>{c.r(d),c.d(d,{default:()=>n});var a=c(6808);const o=[(0,a.uE)('<h1 id="_10-1-自定义组件方法简介" tabindex="-1"><a class="header-anchor" href="#_10-1-自定义组件方法简介" aria-hidden="true">#</a> 10.1 自定义组件方法简介</h1><p>当Flutter提供的现有组件无法满足我们的需求，或者我们为了共享代码需要封装一些通用组件，这时我们就需要自定义组件。在Flutter中自定义组件有三种方式：通过组合其它组件、自绘和实现RenderObject。本节我们先分别介绍一下这三种方式的特点，后面章节中则详细介绍它们的细节。</p><h3 id="组合多个widget" tabindex="-1"><a class="header-anchor" href="#组合多个widget" aria-hidden="true">#</a> 组合多个Widget</h3><p>这种方式是通过拼装多个组件来组合成一个新的组件。例如我们之前介绍的<code>Container</code>就是一个组合组件，它是由<code>DecoratedBox</code>、<code>ConstrainedBox</code>、<code>Transform</code>、<code>Padding</code>、<code>Align</code>等组件组成。</p><p>在Flutter中，组合的思想非常重要，Flutter提供了非常多的基础组件，而我们的界面开发其实就是按照需要组合这些组件来实现各种不同的布局而已。</p><h3 id="自绘" tabindex="-1"><a class="header-anchor" href="#自绘" aria-hidden="true">#</a> 自绘</h3><p>如果遇到无法通过现有的组件来实现需要的UI时，我们可以通过自绘组件的方式来实现，例如我们需要一个颜色渐变的圆形进度条，而Flutter提供的<code>CircularProgressIndicator</code>并不支持在显示精确进度时对进度条应用渐变色（其<code>valueColor</code> 属性只支持执行旋转动画时变化Indicator的颜色），这时最好的方法就是通过自定义组件来绘制出我们期望的外观。我们可以通过Flutter中提供的<code>CustomPaint</code>和<code>Canvas</code>来实现UI自绘。</p><h3 id="实现renderobject" tabindex="-1"><a class="header-anchor" href="#实现renderobject" aria-hidden="true">#</a> 实现RenderObject</h3><p>Flutter提供的自身具有UI外观的组件，如文本<code>Text</code>、<code>Image</code>都是通过相应的<code>RenderObject</code>（我们将在“Flutter核心原理”一章中详细介绍<code>RenderObject</code>）渲染出来的，如Text是由<code>RenderParagraph</code>渲染；而<code>Image</code>是由<code>RenderImage</code>渲染。<code>RenderObject</code>是一个抽象类，它定义了一个抽象方法<code>paint(...)</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>PaintingContext</code>代表组件的绘制上下文，通过<code>PaintingContext.canvas</code>可以获得<code>Canvas</code>，而绘制逻辑主要是通过<code>Canvas</code> API来实现。子类需要重写此方法以实现自身的绘制逻辑，如<code>RenderParagraph</code>需要实现文本绘制逻辑，而<code>RenderImage</code>需要实现图片绘制逻辑。</p><p>可以发现，<code>RenderObject</code>中最终也是通过<code>Canvas</code> API来绘制的，那么通过实现<code>RenderObject</code>的方式和上面介绍的通过<code>CustomPaint</code>和<code>Canvas</code>自绘的方式有什么区别？其实答案很简单，<code>CustomPaint</code>只是为了方便开发者封装的一个代理类，它直接继承自<code>SingleChildRenderObjectWidget</code>，通过<code>RenderCustomPaint</code>的<code>paint</code>方法将<code>Canvas</code>和画笔<code>Painter</code>(需要开发者实现，后面章节介绍)连接起来实现了最终的绘制（绘制逻辑在<code>Painter</code>中）。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>“组合”是自定义组件最简单的方法，在任何需要自定义组件的场景下，我们都应该优先考虑是否能够通过组合来实现。而自绘和通过实现<code>RenderObject</code>的方法本质上是一样的，都需要开发者调用<code>Canvas</code> API手动去绘制UI，优点是强大灵活，理论上可以实现任何外观的UI，而缺点是必须了解<code>Canvas</code> API细节，并且得自己去实现绘制逻辑。</p><p>在本章接下来的小节中，我们将通过一些实例来详细介绍自定义UI的过程，由于后两种方法本质是相同的，并且Flutter中很多基础组件都是通过<code>RenderObject</code>的形式来实现的，所以后续我们只介绍<code>CustomPaint</code>和<code>Canvas</code>的方式，读者如果对自定义<code>RenderObject</code>的方法好奇，可以查看Flutter中相关基础组件对应的<code>RenderObject</code>的实现源码，如<code>RenderParagraph</code>或<code>RenderImage</code>。</p>',15)],t={},n=(0,c(18580).Z)(t,[["render",function(e,d){return(0,a.wg)(),(0,a.iD)("div",null,o)}]])},18580:(e,d)=>{d.Z=(e,d)=>{const c=e.__vccOpts||e;for(const[e,a]of d)c[e]=a;return c}}}]);