"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[7180],{79989:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-1f55288e","path":"/chapter7/futurebuilder_and_streambuilder.html","title":"7.6 异步UI更新（FutureBuilder、StreamBuilder）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"7.6.1 FutureBuilder","slug":"_7-6-1-futurebuilder","link":"#_7-6-1-futurebuilder","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"7.6.2 StreamBuilder","slug":"_7-6-2-streambuilder","link":"#_7-6-2-streambuilder","children":[{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.87,"words":1162},"filePathRelative":"chapter7/futurebuilder_and_streambuilder.md","localizedDate":"2022年6月6日","excerpt":""}')},71552:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var e=a(6808);const t=a.p+"assets/img/7-9.1f328b90.png",p=a.p+"assets/img/7-10.3cdfec37.png",c=[(0,e.uE)('<h1 id="_7-6-异步ui更新-futurebuilder、streambuilder" tabindex="-1"><a class="header-anchor" href="#_7-6-异步ui更新-futurebuilder、streambuilder" aria-hidden="true">#</a> 7.6 异步UI更新（FutureBuilder、StreamBuilder）</h1><p>很多时候我们会依赖一些异步数据来动态更新UI，比如在打开一个页面时我们需要先从互联网上获取数据，在获取数据的过程中我们显示一个加载框，等获取到数据时我们再渲染页面；又比如我们想展示Stream（比如文件流、互联网数据接收流）的进度。当然，通过 StatefulWidget 我们完全可以实现上述这些功能。但由于在实际开发中依赖异步数据更新UI的这种场景非常常见，因此Flutter专门提供了<code>FutureBuilder</code>和<code>StreamBuilder</code>两个组件来快速实现这种功能。</p><h2 id="_7-6-1-futurebuilder" tabindex="-1"><a class="header-anchor" href="#_7-6-1-futurebuilder" aria-hidden="true">#</a> 7.6.1 FutureBuilder</h2><p><code>FutureBuilder</code>会依赖一个<code>Future</code>，它会根据所依赖的<code>Future</code>的状态来动态构建自身。我们看一下<code>FutureBuilder</code>构造函数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FutureBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>future<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>initialData<span class="token punctuation">,</span>\n  required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>future</code>：<code>FutureBuilder</code>依赖的<code>Future</code>，通常是一个异步耗时任务。</p></li><li><p><code>initialData</code>：初始数据，用户设置默认数据。</p></li><li><p><code>builder</code>：Widget构建器；该构建器会在<code>Future</code>执行的不同阶段被多次调用，构建器签名如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Function</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span> snapshot<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>snapshot</code>会包含当前异步任务的状态信息及结果信息 ，比如我们可以通过<code>snapshot.connectionState</code>获取异步任务的状态信息、通过<code>snapshot.hasError</code>判断异步任务是否有错误等等，完整的定义读者可以查看<code>AsyncSnapshot</code>类定义。</p><p>另外，<code>FutureBuilder</code>的<code>builder</code>函数签名和<code>StreamBuilder</code>的<code>builder</code>是相同的。</p></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>我们实现一个路由，当该路由打开时我们从网上获取数据，获取数据时弹一个加载框；获取结束时，如果成功则显示获取到的数据，如果失败则显示错误。由于我们还没有介绍在flutter中如何发起网络请求，所以在这里我们不真正去网络请求数据，而是模拟一下这个过程，隔3秒后返回一个字符串：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">mockNetworkData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&quot;我是从互联网上获取的数据&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FutureBuilder</code>使用代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">FutureBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      future<span class="token punctuation">:</span> <span class="token function">mockNetworkData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 请求已结束</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState <span class="token operator">==</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 请求失败，显示错误</span>\n            <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Error: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">snapshot<span class="token punctuation">.</span>error</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 请求成功，显示数据</span>\n            <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Contents: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 请求未结束，显示loading</span>\n          <span class="token keyword">return</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如图7-9、7-10所示：</p><p><img src="'+t+'" alt="图7-9"><img src="'+p+'" alt="图7-10"></p><blockquote><p>注意：示例的代码中，每次组件重新build 都会重新发起请求，因为每次的 future 都是新的，实践中我们通常会有一些缓存策略，常见的处理方式是在 future 成功后将 future 缓存，这样下次build时，就不会再重新发起异步任务。</p></blockquote><p>上面代码中我们在<code>builder</code>中根据当前异步任务状态<code>ConnectionState</code>来返回不同的widget。<code>ConnectionState</code>是一个枚举类，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">ConnectionState</span> <span class="token punctuation">{</span>\n  <span class="token comment">/// 当前没有异步任务，比如[FutureBuilder]的[future]为null时</span>\n  none<span class="token punctuation">,</span>\n\n  <span class="token comment">/// 异步任务处于等待状态</span>\n  waiting<span class="token punctuation">,</span>\n\n  <span class="token comment">/// Stream处于激活状态（流上已经有数据传递了），对于FutureBuilder没有该状态。</span>\n  active<span class="token punctuation">,</span>\n\n  <span class="token comment">/// 异步任务已经终止.</span>\n  done<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>ConnectionState.active</code>只在<code>StreamBuilder</code>中才会出现。</p><h2 id="_7-6-2-streambuilder" tabindex="-1"><a class="header-anchor" href="#_7-6-2-streambuilder" aria-hidden="true">#</a> 7.6.2 StreamBuilder</h2><p>我们知道，在Dart中<code>Stream</code> 也是用于接收异步事件数据，和<code>Future</code> 不同的是，它可以接收多个异步操作的结果，它常用于会多次读取数据的异步任务场景，如网络内容下载、文件读写等。<code>StreamBuilder</code>正是用于配合<code>Stream</code>来展示流上事件（数据）变化的UI组件。下面看一下<code>StreamBuilder</code>的默认构造函数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">StreamBuilder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>initialData<span class="token punctuation">,</span>\n  <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">,</span>\n  required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到和<code>FutureBuilder</code>的构造函数只有一点不同：前者需要一个<code>future</code>，而后者需要一个<code>stream</code>。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例</h3><p>我们创建一个计时器的示例：每隔1秒，计数加1。这里，我们使用<code>Stream</code>来实现每隔一秒生成一个数字:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>StreamBuilder</code>使用代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  \n <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">StreamBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      stream<span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//</span>\n      <span class="token comment">//initialData: ,// a Stream&lt;int&gt; or null</span>\n      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span>\n          <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Error: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">snapshot<span class="token punctuation">.</span>error</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">case</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>none<span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;没有Stream&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">case</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>waiting<span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;等待数据...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">case</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>active<span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;active: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">case</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>done<span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Stream 已关闭&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// unreachable</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读者可以自己运行本示例查看运行结果。注意，本示例只是为了演示<code>StreamBuilder</code>的使用，在实战中，凡是UI会依赖多个异步数据而发生变化的场景都可以使用<code>StreamBuilder</code>。</p>',27)],o={},l=(0,a(18580).Z)(o,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);