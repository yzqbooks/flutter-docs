"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[6121],{58490:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-d50591d6","path":"/chapter9/hero.html","title":"9.4 Hero动画","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"自实现Hero动画","slug":"自实现hero动画","link":"#自实现hero动画","children":[]},{"level":2,"title":"Flutter Hero动画","slug":"flutter-hero动画","link":"#flutter-hero动画","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.63,"words":1688},"filePathRelative":"chapter9/hero.md","localizedDate":"2022年6月6日","excerpt":""}')},92635:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6808);const p=a.p+"assets/img/9-2.3bdcac3f.gif",e=[(0,t.uE)('<h1 id="_9-4-hero动画" tabindex="-1"><a class="header-anchor" href="#_9-4-hero动画" aria-hidden="true">#</a> 9.4 Hero动画</h1><h2 id="自实现hero动画" tabindex="-1"><a class="header-anchor" href="#自实现hero动画" aria-hidden="true">#</a> 自实现Hero动画</h2><p>比如现在有一个头像组件，初始的时候是一个圆形的小图，我们想实现点击后查看大图的功能，为了有较好的体验，小图变成大图和大图变回小图时我们分别执行一个“飞行”过渡动画，效果如图9-2所示：</p><p><img src="'+p+'" alt="图9-2"></p><p>要实现上面的动画效果，最简单的方式就是使用 Flutter 的 Hero 动画，但是为了让读者理解 Hero 动画原理，我先不使用Hero 动画，而是通过之前章节所学的知识来实现一下这个效果。</p><p>简单分析后有一个思路：首先我们先确定小图和大图的位置和大小，动画的话用一个Stack，然后通过 Positioned 来设置每一帧的组件位置和大小，实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n<span class="token keyword">class</span> <span class="token class-name">CustomHeroAnimation</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">CustomHeroAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _CustomHeroAnimationState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_CustomHeroAnimationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _CustomHeroAnimationState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomHeroAnimation</span><span class="token punctuation">&gt;</span></span>\n    <span class="token keyword">with</span> <span class="token class-name">SingleTickerProviderStateMixin</span> <span class="token punctuation">{</span>\n  late <span class="token class-name">AnimationController</span> _controller<span class="token punctuation">;</span>\n\n  bool _animating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token class-name">AnimationStatus</span><span class="token operator">?</span> _lastAnimationStatus<span class="token punctuation">;</span>\n  late <span class="token class-name">Animation</span> _animation<span class="token punctuation">;</span>\n\n  <span class="token comment">//两个组件在Stack中的rect</span>\n  <span class="token class-name">Rect</span><span class="token operator">?</span> child1Rect<span class="token punctuation">;</span>\n  <span class="token class-name">Rect</span><span class="token operator">?</span> child2Rect<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _controller <span class="token operator">=</span>\n        <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//应用curve</span>\n    _animation <span class="token operator">=</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>\n      parent<span class="token punctuation">:</span> _controller<span class="token punctuation">,</span>\n      curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>easeIn<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    _controller<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>_controller<span class="token punctuation">.</span>isCompleted <span class="token operator">||</span> _controller<span class="token punctuation">.</span>isDismissed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_animating<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            _animating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        _lastAnimationStatus <span class="token operator">=</span> _controller<span class="token punctuation">.</span>status<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _controller<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//小头像</span>\n    <span class="token keyword">final</span> <span class="token class-name">Widget</span> child1 <span class="token operator">=</span> <span class="token function">wChild1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//大头像</span>\n    <span class="token keyword">final</span> <span class="token class-name">Widget</span> child2 <span class="token operator">=</span> <span class="token function">wChild2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//是否展示小头像；只有在动画执行时、初始状态或者刚从大图变为小图时才应该显示小头像</span>\n    bool showChild1 <span class="token operator">=</span>\n        <span class="token operator">!</span>_animating <span class="token operator">&amp;&amp;</span> _lastAnimationStatus <span class="token operator">!=</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>\n\n    <span class="token comment">// 执行动画时的目标组件；如果是从小图变为大图，则目标组件是大图；反之则是小图</span>\n    <span class="token class-name">Widget</span> targetWidget<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>showChild1 <span class="token operator">||</span> _controller<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">AnimationStatus</span><span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      targetWidget <span class="token operator">=</span> child1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      targetWidget <span class="token operator">=</span> child2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token class-name">LayoutBuilder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n        <span class="token comment">//我们让Stack 填满屏幕剩余空间</span>\n        width<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth<span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxHeight<span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n          alignment<span class="token punctuation">:</span> <span class="token class-name">AlignmentDirectional</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span>\n          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>showChild1<span class="token punctuation">)</span>\n              <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span> \n                <span class="token comment">//获取小图在Stack中占用的Rect信息</span>\n                callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> child1Rect <span class="token operator">=</span> <span class="token function">_getRect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> child1<span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>showChild1<span class="token punctuation">)</span>\n              <span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>\n                animation<span class="token punctuation">:</span> _animation<span class="token punctuation">,</span>\n                builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token comment">//求出 rect 插值</span>\n                  <span class="token keyword">final</span> rect <span class="token operator">=</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">lerp</span><span class="token punctuation">(</span>\n                    child1Rect<span class="token punctuation">,</span>\n                    child2Rect<span class="token punctuation">,</span>\n                    _animation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n                  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                  <span class="token comment">// 通过 Positioned 设置组件大小和位置</span>\n                  <span class="token keyword">return</span> <span class="token class-name">Positioned</span><span class="token punctuation">.</span><span class="token function">fromRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">:</span> rect<span class="token operator">!</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> targetWidget<span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token comment">// 用于测量 child2 的大小，设置为全透明并且不能响应事件</span>\n            <span class="token class-name">IgnorePointer</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">Opacity</span><span class="token punctuation">(</span>\n                  opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                  child<span class="token punctuation">:</span> <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n                    <span class="token comment">//获取大图在Stack中占用的Rect信息</span>\n                    callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> child2Rect <span class="token operator">=</span> <span class="token function">_getRect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    child<span class="token punctuation">:</span> child2<span class="token punctuation">,</span>\n                  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Widget</span> <span class="token function">wChild1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//点击后执行正向动画</span>\n    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          _animating <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          _controller<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n        width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">ClipOval</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Widget</span> <span class="token function">wChild2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 点击后执行反向动画</span>\n    <span class="token keyword">return</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          _animating <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          _controller<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Rect</span> <span class="token function">_getRect</span><span class="token punctuation">(</span><span class="token class-name">RenderAfterLayout</span> renderAfterLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//我们需要获取的是AfterLayout子组件相对于Stack的Rect</span>\n    <span class="token keyword">return</span> renderAfterLayout<span class="token punctuation">.</span><span class="token function">localToGlobal</span><span class="token punctuation">(</span>\n          <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span>\n          <span class="token comment">//找到Stack对应的 RenderObject 对象</span>\n          ancestor<span class="token punctuation">:</span> context<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span> <span class="token operator">&amp;</span>\n        renderAfterLayout<span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后点击头像就可以实现上图中的动画效果，注意，我们是通过自定义的 AfterLayout 组件来获取组件的 Rect 信息的，该组件在第四章介绍过，我们将在后面 Flutter 布局原理相关章节中详细介绍该组件原理。</p><p>可以看到，整个飞行动画的实现还是比较复杂的，但由于这种飞行动画在交互上会经常被用到，因此 Flutter 在框架层抽象了上述实现飞行动画的逻辑，提供了一种通用且简单的实现 Hero 动画的方式。</p><h2 id="flutter-hero动画" tabindex="-1"><a class="header-anchor" href="#flutter-hero动画" aria-hidden="true">#</a> Flutter Hero动画</h2><p>Hero 指的是可以在路由(页面)之间“飞行”的 widget，简单来说 Hero 动画就是在路由切换时，有一个共享的widget 可以在新旧路由间切换。由于共享的 widget 在新旧路由页面上的位置、外观可能有所差异，所以在路由切换时会从旧路逐渐过渡到新路由中的指定位置，这样就会产生一个 Hero 动画。</p><p>你可能多次看到过 hero 动画。例如，一个路由中显示待售商品的缩略图列表，选择一个条目会将其跳转到一个新路由，新路由中包含该商品的详细信息和“购买”按钮。 在Flutter中将图片从一个路由“飞”到另一个路由称为<strong>hero动画</strong>，尽管相同的动作有时也称为 <strong>共享元素转换</strong>。下面我们通过一个示例来体验一下 hero 动画。</p><blockquote><p>为什么要将这种可飞行的共享组件称为hero（英雄），有一种说法是说美国文化中的超人是可以飞的，那是美国人心中的大英雄，还有漫威中的超级英雄基本上都是会飞的，所以Flutter开发人员就对这种“会飞的widget”就起了一个富有浪漫主义的名字hero。当然这种说法并非官方解释，但却很有意思。</p></blockquote><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><p>假设有两个路由A和B，他们的内容交互如下：</p><p>A：包含一个用户头像，圆形，点击后跳到B路由，可以查看大图。</p><p>B：显示用户头像原图，矩形。</p><p>在AB两个路由之间跳转的时候，用户头像会逐渐过渡到目标路由页的头像上，接下来我们先看看代码，然后再解析。</p><p>路由A：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">HeroAnimationRouteA</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">HeroAnimationRouteA</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">InkWell</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>\n              tag<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;avatar&quot;</span></span><span class="token punctuation">,</span> <span class="token comment">//唯一标记，前后两个路由页Hero的tag必须相同</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">ClipOval</span><span class="token punctuation">(</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>\n                  <span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">,</span>\n                  width<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">//打开B路由</span>\n              <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">PageRouteBuilder</span><span class="token punctuation">(</span>\n                pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>\n                  <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>\n                  animation<span class="token punctuation">,</span>\n                  secondaryAnimation<span class="token punctuation">,</span>\n                <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">return</span> <span class="token class-name">FadeTransition</span><span class="token punctuation">(</span>\n                    opacity<span class="token punctuation">:</span> animation<span class="token punctuation">,</span>\n                    child<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>\n                      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>\n                        title<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;原图&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                      body<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">HeroAnimationRouteB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token keyword">const</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n            padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;点击头像&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由B：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">HeroAnimationRouteB</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span>\n        tag<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;avatar&quot;</span></span><span class="token punctuation">,</span> <span class="token comment">//唯一标记，前后两个路由页Hero的tag必须相同</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;imgs/avatar.png&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，实现 Hero 动画只需要用<code>Hero</code>组件将要共享的 widget 包装起来，并提供一个相同的 tag 即可，中间的过渡帧都是 Flutter 框架自动完成的。必须要注意， 前后路由页的共享<code>Hero</code>的 tag 必须是相同的，Flutter 框架内部正是通过 tag 来确定新旧路由页widget的对应关系的。</p><p>Hero 动画的原理比较简单，Flutter 框架知道新旧路由页中共享元素的位置和大小，所以根据这两个端点，在动画执行过程中求出过渡时的插值（中间态）即可，而感到幸运的是，这些事情不需要我们自己动手，Flutter 已经帮我们做了，实际上，Flutter Hero 动画的实现原理和我们在本章开始自实现的原理是差不多的，读者有兴趣可以去看 Hero 动画相关的源码。</p>',24)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);