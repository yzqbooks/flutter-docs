"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[643],{74295:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-fedf38f4","path":"/chapter8/gesture_conflict.html","title":"8.4 手势原理与手势冲突","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"8.4.1 手势识别原理","slug":"_8-4-1-手势识别原理","link":"#_8-4-1-手势识别原理","children":[]},{"level":2,"title":"8.4.2 手势竞争","slug":"_8-4-2-手势竞争","link":"#_8-4-2-手势竞争","children":[]},{"level":2,"title":"8.4.3 多手势冲突","slug":"_8-4-3-多手势冲突","link":"#_8-4-3-多手势冲突","children":[]},{"level":2,"title":"8.4.5 解决手势冲突","slug":"_8-4-5-解决手势冲突","link":"#_8-4-5-解决手势冲突","children":[{"level":3,"title":"通过 Listener 解决手势冲突","slug":"通过-listener-解决手势冲突","link":"#通过-listener-解决手势冲突","children":[]},{"level":3,"title":"通过自定义 Recognizer 解决手势冲突","slug":"通过自定义-recognizer-解决手势冲突","link":"#通过自定义-recognizer-解决手势冲突","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":9.44,"words":2833},"filePathRelative":"chapter8/gesture_conflict.md","localizedDate":"2022年6月6日","excerpt":""}')},13385:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6808);const e=[(0,t.uE)('<h1 id="_8-4-手势原理与手势冲突" tabindex="-1"><a class="header-anchor" href="#_8-4-手势原理与手势冲突" aria-hidden="true">#</a> 8.4 手势原理与手势冲突</h1><h2 id="_8-4-1-手势识别原理" tabindex="-1"><a class="header-anchor" href="#_8-4-1-手势识别原理" aria-hidden="true">#</a> 8.4.1 手势识别原理</h2><p>手势的识别和处理都是在事件分发阶段的，GestureDetector 是一个 StatelessWidget， 包含了 RawGestureDetector，我们看一下它的 build 方法实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span>  gestures <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">GestureRecognizerFactory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 构建 TapGestureRecognizer </span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>onTapDown <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span>\n      onTapUp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span>\n      onTap <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gestures<span class="token punctuation">[</span><span class="token class-name">TapGestureRecognizer</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">GestureRecognizerFactoryWithHandlers</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TapGestureRecognizer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">TapGestureRecognizer</span><span class="token punctuation">(</span>debugOwner<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token class-name">TapGestureRecognizer</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        instance\n          <span class="token punctuation">.</span><span class="token punctuation">.</span>onTapDown <span class="token operator">=</span> onTapDown\n          <span class="token punctuation">.</span><span class="token punctuation">.</span>onTapUp <span class="token operator">=</span> onTapUp\n          <span class="token punctuation">.</span><span class="token punctuation">.</span>onTap <span class="token operator">=</span> onTap\n          <span class="token comment">//省略</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  \n  <span class="token keyword">return</span> <span class="token class-name">RawGestureDetector</span><span class="token punctuation">(</span>\n    gestures<span class="token punctuation">:</span> gestures<span class="token punctuation">,</span> <span class="token comment">// 传入手势识别器</span>\n    behavior<span class="token punctuation">:</span> behavior<span class="token punctuation">,</span> <span class="token comment">// 同 Listener 中的 HitTestBehavior</span>\n    child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，上面我们删除了很多代码，只保留了 TapGestureRecognizer（点击手势识别器） 相关代码，我们以点击手势识别为例讲一下整个过程。RawGestureDetector 中会通过 Listener 组件监听 PointerDownEvent 事件，相关源码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n<span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 省略无关代码</span>\n  <span class="token class-name">Widget</span> result <span class="token operator">=</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span>\n    onPointerDown<span class="token punctuation">:</span> _handlePointerDown<span class="token punctuation">,</span>\n    behavior<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>behavior <span class="token operator">?</span><span class="token operator">?</span> _defaultBehavior<span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n \n<span class="token keyword">void</span> <span class="token function">_handlePointerDown</span><span class="token punctuation">(</span><span class="token class-name">PointerDownEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">GestureRecognizer</span> recognizer <span class="token keyword">in</span> _recognizers<span class="token operator">!</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span>\n    recognizer<span class="token punctuation">.</span><span class="token function">addPointer</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们看一下 TapGestureRecognizer 的几个相关方法，由于 TapGestureRecognizer 有多层继承关系，笔者合并了一个简化版：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CustomTapGestureRecognizer1</span> <span class="token keyword">extends</span> <span class="token class-name">TapGestureRecognizer</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">void</span> <span class="token function">addPointer</span><span class="token punctuation">(</span><span class="token class-name">PointerDownEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//会将 handleEvent 回调添加到 pointerRouter 中</span>\n    <span class="token class-name">GestureBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span>pointerRouter<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pointer<span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token class-name">PointerEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//会进行手势识别，并决定是是调用 acceptGesture 还是 rejectGesture，</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">acceptGesture</span><span class="token punctuation">(</span>int pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 竞争胜出会调用</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">rejectGesture</span><span class="token punctuation">(</span>int pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 竞争失败会调用</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到当 PointerDownEvent 事件触发时，会调用 TapGestureRecognizer 的 addPointer，在 addPointer 中会将 handleEvent 方法添加到 pointerRouter 中保存起来。这样一来当手势发生变化时只需要在 pointerRouter中取出 GestureRecognizer 的 handleEvent 方法进行手势识别即可。</p><p>正常情况下应该是手势直接作用的对象应该来处理手势，所以一个简单的原则就是同一个手势应该只有一个手势识别器生效，为此，手势识别才映入了手势竞技场（Arena）的概念，简单来讲：</p><ol><li>每一个手势识别器（GestureRecognizer）都是一个“竞争者”（GestureArenaMember），当发生指针事件时，他们都要在“竞技场”去竞争本次事件的处理权，默认情况最终只有一个“竞争者”会胜出(win)。</li><li>GestureRecognizer 的 handleEvent 中会识别手势，如果手势发生了某个手势，竞争者可以宣布自己是否胜出，一旦有一个竞争者胜出，竞技场管理者（GestureArenaManager）就会通知其它竞争者失败。</li><li>胜出者的 acceptGesture 会被调用，其余的 rejectGesture 将会被调用。</li></ol><p>上一节我们说过命中测试是从 RenderBinding 的 hitTest 开始的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">hitTest</span><span class="token punctuation">(</span><span class="token class-name">HitTestResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Offset</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 从根节点开始进行命中测试</span>\n  renderView<span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> position<span class="token punctuation">:</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 会调用 GestureBinding 中的 hitTest()方法，我们将在下一节中介绍。</span>\n  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染树命中测试完成后会调用 GestureBinding 中的 hitTest() 方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span> <span class="token comment">// from HitTestable</span>\n<span class="token keyword">void</span> <span class="token function">hitTest</span><span class="token punctuation">(</span><span class="token class-name">HitTestResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Offset</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HitTestEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很简单， GestureBinding 也通过命中测试了，这样的话在事件分发阶段，GestureBinding 的 handleEvent 也便会被调用，由于它是最后被添加到 HitTestResult 中的，所以在事件分发阶段 GestureBinding 的 handleEvent：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span> \n<span class="token keyword">void</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token class-name">PointerEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">HitTestEntry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 会调用在 pointerRouter 中添加的 GestureRecognizer 的 handleEvent</span>\n  pointerRouter<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">is</span> <span class="token class-name">PointerDownEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 分发完毕后，关闭竞技场</span>\n    gestureArena<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">is</span> <span class="token class-name">PointerUpEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gestureArena<span class="token punctuation">.</span><span class="token function">sweep</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">is</span> <span class="token class-name">PointerSignalEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    pointerSignalResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gestureArena 是 GestureArenaManager 类实例，负责管理竞技场。</p><p>上面关键的代码就是第一行，功能是会调用之前在 pointerRouter 中添加的 GestureRecognizer 的 handleEvent，不同 GestureRecognizer 的 handleEvent 会识别不同的手势，然后它会和 gestureArena 交互（如果当前的 GestureRecognizer 胜出，需要 gestureArena 去通知其它竞争者它们失败了），最终，如果当前GestureRecognizer 胜出，则最终它的 acceptGesture 会被调用，如果失败则其 rejectGesture 将会被调用，因为这部分代码不同的 GestureRecognizer 会不同，知道做了什么就行，读者有兴趣可以自行查看源码。</p><h2 id="_8-4-2-手势竞争" tabindex="-1"><a class="header-anchor" href="#_8-4-2-手势竞争" aria-hidden="true">#</a> 8.4.2 手势竞争</h2><p>如果对一个组件同时监听水平和垂直方向的拖动手势，当我们斜着拖动时哪个方向的拖动手势回调会被触发？实际上取决于第一次移动时两个轴上的位移分量，哪个轴的大，哪个轴在本次滑动事件竞争中就胜出。上面已经说过，每一个手势识别器（<code>GestureRecognizer</code>）都是一个“竞争者”（<code>GestureArenaMember</code>），当发生指针事件时，他们都要在“竞技场”去竞争本次事件的处理权，默认情况最终只有一个“竞争者”会胜出(win)。例如，假设有一个<code>ListView</code>，它的第一个子组件也是<code>ListView</code>，如果现在滑动这个子<code>ListView</code>，父<code>ListView</code>会动吗？答案是否定的，这时只有子<code>ListView</code>会动，因为这时子<code>ListView</code>会胜出而获得滑动事件的处理权。</p><p>下面我们看一个简单的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GestureDetector</span><span class="token punctuation">(</span> <span class="token comment">//GestureDetector2</span>\n  onTapUp<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 监听父组件 tapUp 手势</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n    width<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span> <span class="token comment">//GestureDetector1</span>\n      onTapUp<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 监听子组件 tapUp 手势</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们点击子组件（灰色区域）时，控制台只会打印 “1”, 并不会打印 “2”，这是因为手指抬起后，GestureDetector1 和 GestureDetector 2 会发生竞争，判定获胜的规则是“子组件优先”，所以 GestureDetector1 获胜，因为只能有一个“竞争者”胜出，所以 GestureDetector 2 将被忽略。这个例子中想要解决冲突的方法很简单，将 GestureDetector 换为 Listener 即可，具体原因我们在后面解释。</p><p>我们再看一个例子，我们以拖动手势为例，同时识别水平和垂直方向的拖动手势，当用户按下手指时就会触发竞争（水平方向和垂直方向），一旦某个方向“获胜”，则直到当次拖动手势结束都会沿着该方向移动。代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _BothDirectionTest <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _BothDirectionTestState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_BothDirectionTestState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _BothDirectionTestState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span>_BothDirectionTest<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  double _top <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n  double _left <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n        <span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n          top<span class="token punctuation">:</span> _top<span class="token punctuation">,</span>\n          left<span class="token punctuation">:</span> _left<span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token comment">//垂直方向拖动事件</span>\n            onVerticalDragUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">DragUpdateDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                _top <span class="token operator">+=</span> details<span class="token punctuation">.</span>delta<span class="token punctuation">.</span>dy<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            onHorizontalDragUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">DragUpdateDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                _left <span class="token operator">+=</span> details<span class="token punctuation">.</span>delta<span class="token punctuation">.</span>dx<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例运行后，每次拖动只会沿一个方向移动（水平或垂直），而竞争发生在手指按下后首次移动（move）时，此例中具体的“获胜”条件是：首次移动时的位移在水平和垂直方向上的分量大的一个获胜。</p><h2 id="_8-4-3-多手势冲突" tabindex="-1"><a class="header-anchor" href="#_8-4-3-多手势冲突" aria-hidden="true">#</a> 8.4.3 多手势冲突</h2><p>由于手势竞争最终只有一个胜出者，所以，当我们通过一个 GestureDetector 监听多种手势时，也可能会产生冲突。假设有一个widget，它可以左右拖动，现在我们也想检测在它上面手指按下和抬起的事件，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">GestureConflictTestRouteState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GestureConflictTestRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  double _left <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n        <span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n          left<span class="token punctuation">:</span> _left<span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//要拖动和点击的widget</span>\n              onHorizontalDragUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">DragUpdateDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  _left <span class="token operator">+=</span> details<span class="token punctuation">.</span>delta<span class="token punctuation">.</span>dx<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              onHorizontalDragEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;onHorizontalDragEnd&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              onTapDown<span class="token punctuation">:</span> <span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;down&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              onTapUp<span class="token punctuation">:</span> <span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;up&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们按住圆形“A”拖动然后抬起手指，控制台日志如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter (17539): down\nI/flutter (17539): onHorizontalDragEnd\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现没有打印&quot;up&quot;，这是因为在拖动时，刚开始按下手指且没有移动时，拖动手势还没有完整的语义，此时TapDown手势胜出(win)，此时打印&quot;down&quot;，而拖动时，拖动手势会胜出，当手指抬起时，<code>onHorizontalDragEnd</code> 和 <code>onTapUp</code>发生了冲突，但是因为是在拖动的语义中，所以<code>onHorizontalDragEnd</code>胜出，所以就会打印 “onHorizontalDragEnd”。</p><p>如果我们的代码逻辑中，对于手指按下和抬起是强依赖的，比如在一个轮播图组件中，我们希望手指按下时，暂停轮播，而抬起时恢复轮播，但是由于轮播图组件中本身可能已经处理了拖动手势（支持手动滑动切换），甚至可能也支持了缩放手势，这时我们如果在外部再用<code>onTapDown</code>、<code>onTapUp</code>来监听的话是不行的。这时我们应该怎么做？其实很简单，通过Listener监听原始指针事件就行：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n  top<span class="token punctuation">:</span><span class="token number">80.0</span><span class="token punctuation">,</span>\n  left<span class="token punctuation">:</span> _leftB<span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span>\n    onPointerDown<span class="token punctuation">:</span> <span class="token punctuation">(</span>details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;down&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    onPointerUp<span class="token punctuation">:</span> <span class="token punctuation">(</span>details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//会触发</span>\n      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;up&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;B&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onHorizontalDragUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">DragUpdateDetails</span> details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          _leftB <span class="token operator">+=</span> details<span class="token punctuation">.</span>delta<span class="token punctuation">.</span>dx<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      onHorizontalDragEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;onHorizontalDragEnd&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-4-5-解决手势冲突" tabindex="-1"><a class="header-anchor" href="#_8-4-5-解决手势冲突" aria-hidden="true">#</a> 8.4.5 解决手势冲突</h2><p>手势是对原始指针的语义化的识别，<strong>手势冲突只是手势级别的，也就是说只会在组件树中的多个 GestureDetector 之间才有冲突的场景，如果压根就没有使用 GestureDetector 则不存在所谓的冲突，因为每一个节点都能收到事件</strong>，只是在 GestureDetector 中为了识别语义，它会去决定哪些子节点应该忽略事件，哪些节点应该生效。</p><p>解决手势冲突的方法有两种：</p><ol><li>使用 Listener。这相当于跳出了手势识别那套规则。</li><li>自定义手势手势识别器（ Recognizer）。</li></ol><h3 id="通过-listener-解决手势冲突" tabindex="-1"><a class="header-anchor" href="#通过-listener-解决手势冲突" aria-hidden="true">#</a> 通过 Listener 解决手势冲突</h3><p>通过 Listener 解决手势冲突的原因是竞争只是针对手势的，而 Listener 是监听原始指针事件，原始指针事件并非语义话的手势，所以根本不会走手势竞争的逻辑，所以也就不会相互影响。拿上面两个 Container 嵌套的例子来说，通过Listener的解决方式为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Listener</span><span class="token punctuation">(</span>  <span class="token comment">// 将 GestureDetector 换位 Listener 即可</span>\n  onPointerUp<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很简单，只需将 GestureDetector 换位 Listener 即可，可以两个都换，也可以只换一个。可以看见，通过<code>Listener</code>直接识别原始指针事件来解决冲突的方法很简单，因此，当遇到手势冲突时，我们应该优先考虑 Listener 。</p><h3 id="通过自定义-recognizer-解决手势冲突" tabindex="-1"><a class="header-anchor" href="#通过自定义-recognizer-解决手势冲突" aria-hidden="true">#</a> 通过自定义 Recognizer 解决手势冲突</h3><p>自定义手势识别器的方式比较麻烦，原理时当确定手势竞争胜出者时，会调用胜出者的<code>acceptGesture</code> 方法，表示“宣布成功”，然后会调用其它手势识别其的<code> rejectGesture</code> 方法，表示“宣布失败”。既然如此，我们可以自定义手势识别器（Recognizer），然后去重写它的<code> rejectGesture</code> 方法：在里面调用<code>acceptGesture</code> 方法，这就相当于它失败是强制将它也变成竞争的成功者了，这样它的回调也就会执行。</p><p>我们先自定义tap手势识别器（Recognizer）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CustomTapGestureRecognizer</span> <span class="token keyword">extends</span> <span class="token class-name">TapGestureRecognizer</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">rejectGesture</span><span class="token punctuation">(</span>int pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//不，我不要失败，我要成功</span>\n    <span class="token comment">//super.rejectGesture(pointer);</span>\n    <span class="token comment">//宣布成功</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">acceptGesture</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//创建一个新的GestureDetector，用我们自定义的 CustomTapGestureRecognizer 替换默认的</span>\n<span class="token class-name">RawGestureDetector</span> <span class="token function">customGestureDetector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">GestureTapCallback</span><span class="token operator">?</span> onTap<span class="token punctuation">,</span>\n  <span class="token class-name">GestureTapDownCallback</span><span class="token operator">?</span> onTapDown<span class="token punctuation">,</span>\n  <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">RawGestureDetector</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n    gestures<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token class-name">CustomTapGestureRecognizer</span><span class="token punctuation">:</span>\n          <span class="token class-name">GestureRecognizerFactoryWithHandlers</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomTapGestureRecognizer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">CustomTapGestureRecognizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span>detector<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          detector<span class="token punctuation">.</span>onTap <span class="token operator">=</span> onTap<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过 RawGestureDetector 来自定义 customGestureDetector，GestureDetector 中也是通过 RawGestureDetector 来包装各种Recognizer 来实现的，我们需要自定义哪个 Recognizer，就添加哪个即可。</p><p>现在我们看看修改调用代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">customGestureDetector</span><span class="token punctuation">(</span> <span class="token comment">// 替换 GestureDetector</span>\n  onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就 OK 了，需要注意，这个例子同时说明了一次手势处理过程也是可以有多个胜出者的。</p>',51)],p={},c=(0,a(18580).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);