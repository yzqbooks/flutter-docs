"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[304],{34800:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-536a5901","path":"/chapter6/gridview.html","title":"6.6 GridView","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.6.1 默认构造函数","slug":"_6-6-1-默认构造函数","link":"#_6-6-1-默认构造函数","children":[{"level":3,"title":"SliverGridDelegateWithFixedCrossAxisCount","slug":"slivergriddelegatewithfixedcrossaxiscount","link":"#slivergriddelegatewithfixedcrossaxiscount","children":[]},{"level":3,"title":"SliverGridDelegateWithMaxCrossAxisExtent","slug":"slivergriddelegatewithmaxcrossaxisextent","link":"#slivergriddelegatewithmaxcrossaxisextent","children":[]}]},{"level":2,"title":"6.6.2 GridView.count","slug":"_6-6-2-gridview-count","link":"#_6-6-2-gridview-count","children":[]},{"level":2,"title":"6.6.3 GridView.extent","slug":"_6-6-3-gridview-extent","link":"#_6-6-3-gridview-extent","children":[]},{"level":2,"title":"6.6.4 GridView.builder","slug":"_6-6-4-gridview-builder","link":"#_6-6-4-gridview-builder","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":4.19,"words":1257},"filePathRelative":"chapter6/gridview.md","localizedDate":"2022年6月6日","excerpt":""}')},58869:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6808);const t=a.p+"assets/img/6-14.73e4a90d.png",p=a.p+"assets/img/6-15.2439ddf5.png",c=[(0,e.uE)('<h1 id="_6-6-gridview" tabindex="-1"><a class="header-anchor" href="#_6-6-gridview" aria-hidden="true">#</a> 6.6 GridView</h1><h2 id="_6-6-1-默认构造函数" tabindex="-1"><a class="header-anchor" href="#_6-6-1-默认构造函数" aria-hidden="true">#</a> 6.6.1 默认构造函数</h2><p><code>GridView</code>可以构建一个二维网格列表，其默认构造函数定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">GridView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token class-name">Axis</span> scrollDirection <span class="token operator">=</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span>\n    bool reverse <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token class-name">ScrollController</span><span class="token operator">?</span> controller<span class="token punctuation">,</span>\n    bool<span class="token operator">?</span> primary<span class="token punctuation">,</span>\n    <span class="token class-name">ScrollPhysics</span><span class="token operator">?</span> physics<span class="token punctuation">,</span>\n    bool shrinkWrap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token class-name">EdgeInsetsGeometry</span><span class="token operator">?</span> padding<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>gridDelegate<span class="token punctuation">,</span>  <span class="token comment">//下面解释</span>\n    bool addAutomaticKeepAlives <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    bool addRepaintBoundaries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    double<span class="token operator">?</span> cacheExtent<span class="token punctuation">,</span> \n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>GridView</code>和<code>ListView</code>的大多数参数都是相同的，它们的含义也都相同的，如有疑惑读者可以翻阅ListView一节，在此不再赘述。我们唯一需要关注的是<code>gridDelegate</code>参数，类型是<code>SliverGridDelegate</code>，它的作用是控制<code>GridView</code>子组件如何排列(layout)。</p><p><code>SliverGridDelegate</code>是一个抽象类，定义了<code>GridView</code> Layout相关接口，子类需要通过实现它们来实现具体的布局算法。Flutter中提供了两个<code>SliverGridDelegate</code>的子类<code>SliverGridDelegateWithFixedCrossAxisCount</code>和<code>SliverGridDelegateWithMaxCrossAxisExtent</code>，我们可以直接使用，下面我们分别来介绍一下它们。</p><h3 id="slivergriddelegatewithfixedcrossaxiscount" tabindex="-1"><a class="header-anchor" href="#slivergriddelegatewithfixedcrossaxiscount" aria-hidden="true">#</a> SliverGridDelegateWithFixedCrossAxisCount</h3><p>该子类实现了一个横轴为固定数量子元素的layout算法，其构造函数为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">SliverGridDelegateWithFixedCrossAxisCount</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token metadata function">@required</span> double crossAxisCount<span class="token punctuation">,</span> \n  double mainAxisSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  double crossAxisSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  double childAspectRatio <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>crossAxisCount</code>：横轴子元素的数量。此属性值确定后子元素在横轴的长度就确定了，即ViewPort横轴长度除以<code>crossAxisCount</code>的商。</li><li><code>mainAxisSpacing</code>：主轴方向的间距。</li><li><code>crossAxisSpacing</code>：横轴方向子元素的间距。</li><li><code>childAspectRatio</code>：子元素在横轴长度和主轴长度的比例。由于<code>crossAxisCount</code>指定后，子元素横轴长度就确定了，然后通过此参数值就可以确定子元素在主轴的长度。</li></ul><p>可以发现，子元素的大小是通过<code>crossAxisCount</code>和<code>childAspectRatio</code>两个参数共同决定的。注意，这里的子元素指的是子组件的最大显示空间，注意确保子组件的实际大小不要超出子元素的空间。</p><p>下面看一个例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">(</span>\n  gridDelegate<span class="token punctuation">:</span> <span class="token class-name">SliverGridDelegateWithFixedCrossAxisCount</span><span class="token punctuation">(</span>\n      crossAxisCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//横轴三个子widget</span>\n      childAspectRatio<span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token comment">//宽高比为1时，子widget</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>ac_unit<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>airport_shuttle<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>all_inclusive<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>beach_access<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>free_breakfast<span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-14所示：</p><p><img src="'+t+'" alt="图6-14"></p><h3 id="slivergriddelegatewithmaxcrossaxisextent" tabindex="-1"><a class="header-anchor" href="#slivergriddelegatewithmaxcrossaxisextent" aria-hidden="true">#</a> SliverGridDelegateWithMaxCrossAxisExtent</h3><p>该子类实现了一个横轴子元素为固定最大长度的layout算法，其构造函数为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">SliverGridDelegateWithMaxCrossAxisExtent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  double maxCrossAxisExtent<span class="token punctuation">,</span>\n  double mainAxisSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  double crossAxisSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n  double childAspectRatio <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>maxCrossAxisExtent</code>为子元素在横轴上的最大长度，之所以是“最大”长度，是<strong>因为横轴方向每个子元素的长度仍然是等分的</strong>，举个例子，如果ViewPort的横轴长度是450，那么当<code>maxCrossAxisExtent</code>的值在区间[450/4，450/3)内的话，子元素最终实际长度都为112.5，而<code>childAspectRatio</code>所指的子元素横轴和主轴的长度比为<strong>最终的长度比</strong>。其它参数和<code>SliverGridDelegateWithFixedCrossAxisCount</code>相同。</p><p>下面我们看一个例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">(</span>\n  padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span>\n  gridDelegate<span class="token punctuation">:</span> <span class="token class-name">SliverGridDelegateWithMaxCrossAxisExtent</span><span class="token punctuation">(</span>\n      maxCrossAxisExtent<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>\n      childAspectRatio<span class="token punctuation">:</span> <span class="token number">2.0</span> <span class="token comment">//宽高比为2</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>ac_unit<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>airport_shuttle<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>all_inclusive<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>beach_access<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>free_breakfast<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-15所示：</p><p><img src="'+p+'" alt="图6-15"></p><h2 id="_6-6-2-gridview-count" tabindex="-1"><a class="header-anchor" href="#_6-6-2-gridview-count" aria-hidden="true">#</a> 6.6.2 GridView.count</h2><p><code>GridView.count</code>构造函数内部使用了<code>SliverGridDelegateWithFixedCrossAxisCount</code>，我们通过它可以快速的创建横轴固定数量子元素的<code>GridView</code>，我们可以通过以下代码实现和上面例子相同的效果等：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span> \n  crossAxisCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  childAspectRatio<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>ac_unit<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>airport_shuttle<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>all_inclusive<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>beach_access<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>free_breakfast<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-6-3-gridview-extent" tabindex="-1"><a class="header-anchor" href="#_6-6-3-gridview-extent" aria-hidden="true">#</a> 6.6.3 GridView.extent</h2><p>GridView.extent构造函数内部使用了SliverGridDelegateWithMaxCrossAxisExtent，我们通过它可以快速的创建横轴子元素为固定最大长度的的GridView，上面的示例代码等价于：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">extent</span><span class="token punctuation">(</span>\n   maxCrossAxisExtent<span class="token punctuation">:</span> <span class="token number">120.0</span><span class="token punctuation">,</span>\n   childAspectRatio<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span>\n   children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n     <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>ac_unit<span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>airport_shuttle<span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>all_inclusive<span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>beach_access<span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span><span class="token punctuation">,</span>\n     <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>free_breakfast<span class="token punctuation">)</span><span class="token punctuation">,</span>\n   <span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-6-4-gridview-builder" tabindex="-1"><a class="header-anchor" href="#_6-6-4-gridview-builder" aria-hidden="true">#</a> 6.6.4 GridView.builder</h2><p>上面我们介绍的GridView都需要一个widget数组作为其子元素，这些方式都会提前将所有子widget都构建好，所以只适用于子widget数量比较少时，当子widget比较多时，我们可以通过<code>GridView.builder</code>来动态创建子widget。<code>GridView.builder</code> 必须指定的参数有两个：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n required <span class="token class-name">SliverGridDelegate</span> gridDelegate<span class="token punctuation">,</span> \n required <span class="token class-name">IndexedWidgetBuilder</span> itemBuilder<span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>itemBuilder</code>为子widget构建器。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>假设我们需要从一个异步数据源（如网络）分批获取一些<code>Icon</code>，然后用<code>GridView</code>来展示：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">InfiniteGridView</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _InfiniteGridViewState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_InfiniteGridViewState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _InfiniteGridViewState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InfiniteGridView</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IconData</span><span class="token punctuation">&gt;</span></span> _icons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//保存Icon数据</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 初始化数据</span>\n    <span class="token function">_retrieveIcons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">GridView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n      gridDelegate<span class="token punctuation">:</span> <span class="token class-name">SliverGridDelegateWithFixedCrossAxisCount</span><span class="token punctuation">(</span>\n        crossAxisCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//每行三列</span>\n        childAspectRatio<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token comment">//显示区域宽高相等</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      itemCount<span class="token punctuation">:</span> _icons<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n      itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//如果显示到最后一个并且Icon总数小于200时继续获取数据</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> _icons<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> _icons<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">_retrieveIcons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>_icons<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//模拟异步获取数据</span>\n  <span class="token keyword">void</span> <span class="token function">_retrieveIcons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _icons<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n          <span class="token class-name">Icons</span><span class="token punctuation">.</span>ac_unit<span class="token punctuation">,</span>\n          <span class="token class-name">Icons</span><span class="token punctuation">.</span>airport_shuttle<span class="token punctuation">,</span>\n          <span class="token class-name">Icons</span><span class="token punctuation">.</span>all_inclusive<span class="token punctuation">,</span>\n          <span class="token class-name">Icons</span><span class="token punctuation">.</span>beach_access<span class="token punctuation">,</span>\n          <span class="token class-name">Icons</span><span class="token punctuation">.</span>cake<span class="token punctuation">,</span>\n          <span class="token class-name">Icons</span><span class="token punctuation">.</span>free_breakfast<span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>_retrieveIcons()</code>：在此方法中我们通过<code>Future.delayed</code>来模拟从异步数据源获取数据，每次获取数据需要200毫秒，获取成功后将新数据添加到_icons，然后调用setState重新构建。</li><li>在 itemBuilder 中，如果显示到最后一个时，判断是否需要继续获取数据，然后返回一个Icon。</li></ul>',37)],i={},o=(0,a(18580).Z)(i,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);