"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[8239],{88310:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-b36c5d4c","path":"/chapter8/listener.html","title":"8.1 原始指针事件处理","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"忽略指针事件","slug":"忽略指针事件","link":"#忽略指针事件","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.49,"words":1046},"filePathRelative":"chapter8/listener.md","localizedDate":"2022年6月6日","excerpt":""}')},41182:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6808);const e=a.p+"assets/img/8-1.8a42e98b.png",o=[(0,t.uE)('<h1 id="_8-1-原始指针事件处理" tabindex="-1"><a class="header-anchor" href="#_8-1-原始指针事件处理" aria-hidden="true">#</a> 8.1 原始指针事件处理</h1><p>本节先来介绍一下原始指针事件(Pointer Event，在移动设备上通常为触摸事件)，下一节再介绍手势处理。</p><p>在移动端，各个平台或UI系统的原始指针事件模型基本都是一致，即：一次完整的事件分为三个阶段：手指按下、手指移动、和手指抬起，而更高级别的手势（如点击、双击、拖动等）都是基于这些原始事件的。</p><p>当指针按下时，Flutter会对应用程序执行<strong>命中测试(Hit Test)</strong>，以确定指针与屏幕接触的位置存在哪些组件（widget）， 指针按下事件（以及该指针的后续事件）然后被分发到由命中测试发现的最内部的组件，然后从那里开始，事件会在组件树中向上冒泡，这些事件会从最内部的组件被分发到组件树根的路径上的所有组件，这和Web开发中浏览器的<strong>事件冒泡</strong>机制相似， 但是Flutter中没有机制取消或停止“冒泡”过程，而浏览器的冒泡是可以停止的。注意，只有通过命中测试的组件才能触发事件。</p><blockquote><p>属于“Hit Test ”的中文翻译比较多，如 “命中测试”、“点击测试” ，对于名字我们不用较真，知道它们代表的是 “Hit Test ” 即可。</p></blockquote><p>Flutter中可以使用<code>Listener</code>来监听原始触摸事件，按照本书对组件的分类，则<code>Listener</code>也是一个功能性组件。下面是<code>Listener</code>的构造函数定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Key</span> key<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>onPointerDown<span class="token punctuation">,</span> <span class="token comment">//手指按下回调</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>onPointerMove<span class="token punctuation">,</span> <span class="token comment">//手指移动回调</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>onPointerUp<span class="token punctuation">,</span><span class="token comment">//手指抬起回调</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>onPointerCancel<span class="token punctuation">,</span><span class="token comment">//触摸事件取消回调</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>behavior <span class="token operator">=</span> <span class="token class-name">HitTestBehavior</span><span class="token punctuation">.</span>deferToChild<span class="token punctuation">,</span> <span class="token comment">//先忽略此参数，后面小节会专门介绍</span>\n  <span class="token class-name">Widget</span> child\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先看一个示例，下面代码功能是： 手指在一个容器上移动时查看手指相对于容器的位置。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _PointerMoveIndicatorState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointerMoveIndicator</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">PointerEvent</span><span class="token operator">?</span> _event<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> <span class="token number">300.0</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">150.0</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n          &#39;$<span class="token punctuation">{</span>_event<span class="token operator">?</span><span class="token punctuation">.</span>localPosition <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">}</span>&#39;<span class="token punctuation">,</span>\n          style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPointerDown<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">PointerDownEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _event <span class="token operator">=</span> event<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPointerMove<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">PointerMoveEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _event <span class="token operator">=</span> event<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPointerUp<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">PointerUpEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _event <span class="token operator">=</span> event<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图8-1所示：</p><p><img src="'+e+'" alt="图8-1"></p><p>手指在蓝色矩形区域内移动即可看到当前指针偏移，当触发指针事件时，参数 <code>PointerDownEvent</code>、 <code>PointerMoveEvent</code>、 <code>PointerUpEvent</code> 都是<code>PointerEvent</code>的子类，<code>PointerEvent</code>类中包括当前指针的一些信息，注意 Pointer，即“指针”， 指事件的触发者，可以是鼠标、触摸板、手指。</p><p>如：</p><ul><li><code>position</code>：它是指针相对于当对于全局坐标的偏移。</li><li><code>localPosition</code>: 它是指针相对于当对于本身布局坐标的偏移。</li><li><code>delta</code>：两次指针移动事件（<code>PointerMoveEvent</code>）的距离。</li><li><code>pressure</code>：按压力度，如果手机屏幕支持压力传感器(如iPhone的3D Touch)，此属性会更有意义，如果手机不支持，则始终为1。</li><li><code>orientation</code>：指针移动方向，是一个角度值。</li></ul><p>上面只是<code>PointerEvent</code>一些常用属性，除了这些它还有很多属性，读者可以查看API文档。</p><p>还有一个<code>behavior</code>属性，它决定子组件如何响应命中测试，关于该属性我们将在后面 “事件处理流程” 一节中详细介绍。</p><h3 id="忽略指针事件" tabindex="-1"><a class="header-anchor" href="#忽略指针事件" aria-hidden="true">#</a> 忽略指针事件</h3><p>假如我们不想让某个子树响应<code>PointerEvent</code>的话，我们可以使用<code>IgnorePointer</code>和<code>AbsorbPointer</code>，这两个组件都能阻止子树接收指针事件，不同之处在于<code>AbsorbPointer</code>本身会参与命中测试，而<code>IgnorePointer</code>本身不会参与，这就意味着<code>AbsorbPointer</code>本身是可以接收指针事件的(但其子树不行)，而<code>IgnorePointer</code>不可以。一个简单的例子如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Listener</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">AbsorbPointer</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n        width<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPointerDown<span class="token punctuation">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;in&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  onPointerDown<span class="token punctuation">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;up&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击<code>Container</code>时，由于它在<code>AbsorbPointer</code>的子树上，所以不会响应指针事件，所以日志不会输出&quot;in&quot;，但<code>AbsorbPointer</code>本身是可以接收指针事件的，所以会输出&quot;up&quot;。如果将<code>AbsorbPointer</code>换成<code>IgnorePointer</code>，那么两个都不会输出。</p>',20)],p={},c=(0,a(18580).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);