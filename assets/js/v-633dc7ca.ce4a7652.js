"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[9480],{52480:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-633dc7ca","path":"/chapter14/image_and_cache.html","title":"14.5 图片加载原理与缓存","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"14.5.1 ImageProvider","slug":"_14-5-1-imageprovider","link":"#_14-5-1-imageprovider","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"14.5.2 Image组件原理","slug":"_14-5-2-image组件原理","link":"#_14-5-2-image组件原理","children":[]},{"level":2,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":10.88,"words":3264},"filePathRelative":"chapter14/image_and_cache.md","localizedDate":"2022年6月6日","excerpt":""}')},67416:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(6808),t=a(70102);const p=[(0,e.uE)('<h1 id="_14-5-图片加载原理与缓存" tabindex="-1"><a class="header-anchor" href="#_14-5-图片加载原理与缓存" aria-hidden="true">#</a> 14.5 图片加载原理与缓存</h1><p>在本书前面章节已经介绍过<code>Image</code> 组件，并提到Flutter框架对加载过的图片是有缓存的（内存），默认最大缓存数量是1000，最大缓存空间为100M。本节便详细介绍Image的原理及图片缓存机制，下面我们先看看<code>ImageProvider</code> 类。</p><h2 id="_14-5-1-imageprovider" tabindex="-1"><a class="header-anchor" href="#_14-5-1-imageprovider" aria-hidden="true">#</a> 14.5.1 ImageProvider</h2><p>我们已经知道<code>Image</code> 组件的<code>image</code> 参数是一个必选参数，它是<code>ImageProvider</code>类型。下面我们便详细介绍一下<code>ImageProvider</code>，<code>ImageProvider</code>是一个抽象类，定义了图片数据获取和加载的相关接口。它的主要职责有两个：</p><ol><li>提供图片数据源</li><li>缓存图片</li></ol><p>我们看看<code>ImageProvider</code>抽象类的详细定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ImageProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n  <span class="token class-name">ImageStream</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ImageConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 实现代码省略</span>\n  <span class="token punctuation">}</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">evict</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ImageCache</span> cache<span class="token punctuation">,</span>\n                      <span class="token class-name">ImageConfiguration</span> configuration <span class="token operator">=</span> <span class="token class-name">ImageConfiguration</span><span class="token punctuation">.</span>empty <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 实现代码省略</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">obtainKey</span><span class="token punctuation">(</span><span class="token class-name">ImageConfiguration</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token metadata function">@protected</span>\n  <span class="token class-name">ImageStreamCompleter</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需子类实现</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="load-t-key-方法" tabindex="-1"><a class="header-anchor" href="#load-t-key-方法" aria-hidden="true">#</a> <code>load(T key)</code>方法</h4><p>加载图片数据源的接口，不同的数据源的加载方法不同，每个<code>ImageProvider</code>的子类必须实现它。比如<code>NetworkImage</code>类和<code>AssetImage</code>类，它们都是<code>ImageProvider</code>的子类，但它们需要从不同的数据源来加载图片数据：<code>NetworkImage</code>是从网络来加载图片数据，而<code>AssetImage</code>则是从最终的应用包里来加载（加载打到应用安装包里的资源图片）。 我们以<code>NetworkImage</code>为例，看看其load方法的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n<span class="token metadata function">@override</span>\n<span class="token class-name">ImageStreamCompleter</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">image_provider<span class="token punctuation">.</span></span>NetworkImage</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span> chunkEvents <span class="token operator">=</span> <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">return</span> <span class="token class-name">MultiFrameImageStreamCompleter</span><span class="token punctuation">(</span>\n    codec<span class="token punctuation">:</span> <span class="token function">_loadAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> chunkEvents<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//调用</span>\n    chunkEvents<span class="token punctuation">:</span> chunkEvents<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>\n    scale<span class="token punctuation">:</span> key<span class="token punctuation">.</span>scale<span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，<code>load</code>方法的返回值类型是<code>ImageStreamCompleter</code> ，它是一个抽象类，定义了管理图片加载过程的一些接口，<code>Image</code> Widget中正是通过它来监听图片加载状态的（我们将在下面介绍<code>Image</code> 原理时详细介绍）。</p><p><code>MultiFrameImageStreamCompleter</code> 是 <code>ImageStreamCompleter</code>的一个子类，是flutter sdk预置的类，通过该类，我们以方便、轻松地创建出一个<code>ImageStreamCompleter</code>实例来做为<code>load</code>方法的返回值。</p><p>我们可以看到，<code>MultiFrameImageStreamCompleter</code> 需要一个<code>codec</code>参数，该参数类型为<code>Future&lt;ui.Codec&gt; </code>。<code>Codec </code> 是处理图片编解码的类的一个handler，实际上，它只是一个flutter engine API 的包装类，也就是说图片的编解码逻辑不是在Dart 代码部分实现，而是在flutter engine中实现的。<code>Codec</code>类部分定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;vm:entry-point&#39;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token keyword">extends</span> <span class="token class-name">NativeFieldWrapperClass2</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 此类由flutter engine创建，不应该手动实例化此类或直接继承此类。</span>\n  <span class="token metadata function">@pragma</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;vm:entry-point&#39;</span></span><span class="token punctuation">)</span>\n  <span class="token class-name">Codec</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">/// 图片中的帧数(动态图会有多帧)</span>\n  int <span class="token keyword">get</span> frameCount native <span class="token string-literal"><span class="token string">&#39;Codec_frameCount&#39;</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">/// 动画重复的次数</span>\n  <span class="token comment">/// * 0 表示只执行一次</span>\n  <span class="token comment">/// * -1 表示循环执行</span>\n  int <span class="token keyword">get</span> repetitionCount native <span class="token string-literal"><span class="token string">&#39;Codec_repetitionCount&#39;</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">/// 获取下一个动画帧</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FrameInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNextFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">_futurize</span><span class="token punctuation">(</span>_getNextFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">String</span> <span class="token function">_getNextFrame</span><span class="token punctuation">(</span>_Callback<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FrameInfo</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">)</span> native <span class="token string-literal"><span class="token string">&#39;Codec_getNextFrame&#39;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到<code>Codec</code>最终的结果是一个或多个（动图）帧，而这些帧最终会绘制到屏幕上。</p><p><code>MultiFrameImageStreamCompleter 的</code> <code>codec</code>参数值为<code>_loadAsync</code>方法的返回值，我们继续看<code>_loadAsync</code>方法的实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Codec</span><span class="token punctuation">&gt;</span></span> <span class="token function">_loadAsync</span><span class="token punctuation">(</span>\n    <span class="token class-name">NetworkImage</span> key<span class="token punctuation">,</span>\n    <span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">&gt;</span></span> chunkEvents<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">//下载图片</span>\n      <span class="token keyword">final</span> <span class="token class-name">Uri</span> resolved <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span>base<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">final</span> <span class="token class-name">HttpClientRequest</span> request <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span>resolved<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      headers<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">final</span> <span class="token class-name">HttpClientResponse</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">!=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>ok<span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 接收图片数据 </span>\n      <span class="token keyword">final</span> <span class="token class-name">Uint8List</span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">consolidateHttpClientResponseBytes</span><span class="token punctuation">(</span>\n        response<span class="token punctuation">,</span>\n        onBytesReceived<span class="token punctuation">:</span> <span class="token punctuation">(</span>int cumulative<span class="token punctuation">,</span> int total<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          chunkEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ImageChunkEvent</span><span class="token punctuation">(</span>\n            cumulativeBytesLoaded<span class="token punctuation">:</span> cumulative<span class="token punctuation">,</span>\n            expectedTotalBytes<span class="token punctuation">:</span> total<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>lengthInBytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;NetworkImage is an empty file: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">resolved</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 对图片数据进行解码</span>\n      <span class="token keyword">return</span> <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">instantiateImageCodec</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      chunkEvents<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>_loadAsync</code>方法主要做了两件事：</p><ol><li>下载图片。</li><li>对下载的图片数据进行解码。</li></ol><p>下载逻辑比较简单：通过<code>HttpClient</code>从网上下载图片，另外下载请求会设置一些自定义的header，开发者可以通过<code>NetworkImage</code>的<code>headers</code>命名参数来传递。</p><p>在图片下载完成后调用了<code>PaintingBinding.instance.instantiateImageCodec(bytes)</code>对图片进行解码，值得注意的是<code>instantiateImageCodec(...)</code>也是一个Native API的包装，实际上会调用Flutter engine的<code>instantiateImageCodec</code>方法，源码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">_instantiateImageCodec</span><span class="token punctuation">(</span><span class="token class-name">Uint8List</span> list<span class="token punctuation">,</span> _Callback<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Codec</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span> _ImageInfo imageInfo<span class="token punctuation">,</span> int targetWidth<span class="token punctuation">,</span> int targetHeight<span class="token punctuation">)</span>\n  native <span class="token string-literal"><span class="token string">&#39;instantiateImageCodec&#39;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="obtainkey-imageconfiguration-方法" tabindex="-1"><a class="header-anchor" href="#obtainkey-imageconfiguration-方法" aria-hidden="true">#</a> <code>obtainKey(ImageConfiguration)</code>方法</h4><p>该接口主要是为了配合实现图片缓存，<code>ImageProvider</code>从数据源加载完数据后，会在全局的<code>ImageCache</code>中缓存图片数据，而图片数据缓存是一个Map，而Map的key便是调用此方法的返回值，不同的key代表不同的图片数据缓存。</p><h4 id="resolve-imageconfiguration-方法" tabindex="-1"><a class="header-anchor" href="#resolve-imageconfiguration-方法" aria-hidden="true">#</a> <code>resolve(ImageConfiguration)</code> 方法</h4><p><code>resolve</code>方法是<code>ImageProvider</code>的暴露的给<code>Image</code>的主入口方法，它接受一个<code>ImageConfiguration</code>参数，返回<code>ImageStream</code>，即图片数据流。我们重点看一下<code>resolve</code>执行流程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ImageStream</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ImageConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  <span class="token keyword">final</span> <span class="token class-name">ImageStream</span> stream <span class="token operator">=</span> <span class="token class-name">ImageStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">T</span> obtainedKey<span class="token punctuation">;</span> <span class="token comment">//</span>\n  <span class="token comment">//定义错误处理函数</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> exception<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stack<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n    stream<span class="token punctuation">.</span><span class="token function">setCompleter</span><span class="token punctuation">(</span>imageCompleter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    imageCompleter<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 创建一个新Zone，主要是为了当发生错误时不会干扰MainZone</span>\n  <span class="token keyword">final</span> <span class="token class-name">Zone</span> dangerZone <span class="token operator">=</span> <span class="token class-name">Zone</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  dangerZone<span class="token punctuation">.</span><span class="token function">runGuarded</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> key<span class="token punctuation">;</span>\n    <span class="token comment">// 先验证是否已经有缓存</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 生成缓存key，后面会根据此key来检测是否有缓存</span>\n      key <span class="token operator">=</span> <span class="token function">obtainKey</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    key<span class="token punctuation">.</span>then<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      obtainedKey <span class="token operator">=</span> key<span class="token punctuation">;</span>\n      <span class="token comment">// 缓存的处理逻辑在这里，记为A，下面详细介绍</span>\n      <span class="token keyword">final</span> <span class="token class-name">ImageStreamCompleter</span> completer <span class="token operator">=</span> <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance\n          <span class="token punctuation">.</span>imageCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">load</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> handleError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>completer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        stream<span class="token punctuation">.</span><span class="token function">setCompleter</span><span class="token punctuation">(</span>completer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> stream<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ImageConfiguration</code> 包含图片和设备的相关信息，如图片的大小、所在的<code>AssetBundle </code>(只有打到安装包的图片存在)以及当前的设备平台、devicePixelRatio（设备像素比等）。Flutter SDK提供了一个便捷函数<code>createLocalImageConfiguration</code>来创建<code>ImageConfiguration</code> 对象：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ImageConfiguration</span> <span class="token function">createLocalImageConfiguration</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token class-name">Size</span> size <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">ImageConfiguration</span><span class="token punctuation">(</span>\n    bundle<span class="token punctuation">:</span> <span class="token class-name">DefaultAssetBundle</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    devicePixelRatio<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> nullOk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>devicePixelRatio <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n    locale<span class="token punctuation">:</span> <span class="token class-name">Localizations</span><span class="token punctuation">.</span><span class="token function">localeOf</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> nullOk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    textDirection<span class="token punctuation">:</span> <span class="token class-name">Directionality</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    size<span class="token punctuation">:</span> size<span class="token punctuation">,</span>\n    platform<span class="token punctuation">:</span> defaultTargetPlatform<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以发现这些信息基本都是通过<code>Context</code>来获取。</p><p>上面代码A处就是处理缓存的主要代码，这里的<code>PaintingBinding.instance.imageCache</code> 是 <code>ImageCache</code>的一个实例，它是<code>PaintingBinding</code>的一个属性，而Flutter框架中的<code>PaintingBinding.instance</code>是一个单例，<code>imageCache</code>事实上也是一个单例，也就是说图片缓存是全局的，统一由<code>PaintingBinding.instance.imageCache</code> 来管理。</p><p>下面我们看看<code>ImageCache</code>类定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> int _kDefaultSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> int _kDefaultSizeBytes <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 100 MiB</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ImageCache</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 正在加载中的图片队列</span>\n  <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _PendingImage<span class="token punctuation">&gt;</span></span> _pendingImages <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _PendingImage<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 缓存队列</span>\n  <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _CachedImage<span class="token punctuation">&gt;</span></span> _cache <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> _CachedImage<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 缓存数量上限(1000)</span>\n  int _maximumSize <span class="token operator">=</span> _kDefaultSize<span class="token punctuation">;</span>\n  <span class="token comment">// 缓存容量上限 (100 MB)</span>\n  int _maximumSizeBytes <span class="token operator">=</span> _kDefaultSizeBytes<span class="token punctuation">;</span>\n  \n  <span class="token comment">// 缓存上限设置的setter</span>\n  <span class="token keyword">set</span> <span class="token function">maximumSize</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n  <span class="token keyword">set</span> <span class="token function">maximumSizeBytes</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 省略部分定义</span>\n\n  <span class="token comment">// 清除所有缓存</span>\n  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...省略具体实现代码</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 清除指定key对应的图片缓存</span>\n  bool <span class="token function">evict</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// ...省略具体实现代码</span>\n  <span class="token punctuation">}</span>\n\n \n  <span class="token class-name">ImageStreamCompleter</span> <span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">ImageStreamCompleter</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token class-name">ImageErrorListener</span> onError <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">assert</span><span class="token punctuation">(</span>loader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ImageStreamCompleter</span> result <span class="token operator">=</span> _pendingImages<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>completer<span class="token punctuation">;</span>\n    <span class="token comment">// 图片还未加载成功，直接返回</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n \n    <span class="token comment">// 有缓存，继续往下走</span>\n    <span class="token comment">// 先移除缓存，后再添加，可以让最新使用过的缓存在_map中的位置更近一些，清理时会LRU来清除</span>\n    <span class="token keyword">final</span> _CachedImage image <span class="token operator">=</span> _cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>image <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> image<span class="token punctuation">.</span>completer<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>onError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">onError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">rethrow</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">ImageInfo</span> info<span class="token punctuation">,</span> bool syncCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> int imageSize <span class="token operator">=</span> info<span class="token operator">?</span><span class="token punctuation">.</span>image <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> info<span class="token punctuation">.</span>image<span class="token punctuation">.</span>height <span class="token operator">*</span> info<span class="token punctuation">.</span>image<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>\n      <span class="token keyword">final</span> _CachedImage image <span class="token operator">=</span> <span class="token function">_CachedImage</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> imageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 下面是缓存处理的逻辑</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>maximumSizeBytes <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> imageSize <span class="token operator">&gt;</span> maximumSizeBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _maximumSizeBytes <span class="token operator">=</span> imageSize <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      _currentSizeBytes <span class="token operator">+=</span> imageSize<span class="token punctuation">;</span>\n      <span class="token keyword">final</span> _PendingImage pendingImage <span class="token operator">=</span> _pendingImages<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingImage <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pendingImage<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      _cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">;</span>\n      <span class="token function">_checkCacheSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>maximumSize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maximumSizeBytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token class-name">ImageStreamListener</span> streamListener <span class="token operator">=</span> <span class="token class-name">ImageStreamListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _pendingImages<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_PendingImage</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> streamListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// Listener is removed in [_PendingImage.removeListener].</span>\n      result<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>streamListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 当缓存数量超过最大值或缓存的大小超过最大缓存容量，会调用此方法清理到缓存上限以内</span>\n  <span class="token keyword">void</span> <span class="token function">_checkCacheSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">while</span> <span class="token punctuation">(</span>_currentSizeBytes <span class="token operator">&gt;</span> _maximumSizeBytes <span class="token operator">||</span> _cache<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> _maximumSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token class-name">Object</span> key <span class="token operator">=</span> _cache<span class="token punctuation">.</span>keys<span class="token punctuation">.</span>first<span class="token punctuation">;</span>\n      <span class="token keyword">final</span> _CachedImage image <span class="token operator">=</span> _cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      _currentSizeBytes <span class="token operator">-=</span> image<span class="token punctuation">.</span>sizeBytes<span class="token punctuation">;</span>\n      _cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有缓存则使用缓存，没有缓存则调用load方法加载图片，加载成功后:</p><ol><li>先判断图片数据有没有缓存，如果有，则直接返回<code>ImageStream</code>。</li><li>如果没有缓存，则调用<code>load(T key)</code>方法从数据源加载图片数据，加载成功后先缓存，然后返回ImageStream。</li></ol><p>另外，我们可以看到<code>ImageCache</code>类中有设置缓存上限的setter，所以，如果我们可以自定义缓存上限：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>imageCache<span class="token punctuation">.</span>maximumSize<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">//最多2000张</span>\n <span class="token class-name">PaintingBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>imageCache<span class="token punctuation">.</span>maximumSizeBytes <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//最大200M</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们看一下缓存的key，因为Map中相同key的值会被覆盖，也就是说key是图片缓存的一个唯一标识，只要是不同key，那么图片数据就会分别缓存（即使事实上是同一张图片）。那么图片的唯一标识是什么呢？跟踪源码，很容易发现key正是<code>ImageProvider.obtainKey()</code>方法的返回值，而此方法需要<code>ImageProvider</code>子类去重写，这也就意味着不同的<code>ImageProvider</code>对key的定义逻辑会不同。其实也很好理解，比如对于<code>NetworkImage</code>，将图片的url作为key会很合适，而对于<code>AssetImage</code>，则应该将“包名+路径”作为唯一的key。下面我们以<code>NetworkImage</code>为例，看一下它的<code>obtainKey()</code>实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NetworkImage</span><span class="token punctuation">&gt;</span></span> <span class="token function">obtainKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">image_provider<span class="token punctuation">.</span></span>ImageConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">SynchronousFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NetworkImage</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很简单，创建了一个同步的future，然后直接将自身做为key返回。因为Map中在判断key（此时是<code>NetworkImage</code>对象）是否相等时会使用“==”运算符，那么定义key的逻辑就是<code>NetworkImage</code>的“==”运算符：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\nbool <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  <span class="token keyword">final</span> <span class="token class-name">NetworkImage</span> typedOther <span class="token operator">=</span> other<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> url <span class="token operator">==</span> typedOther<span class="token punctuation">.</span>url\n      <span class="token operator">&amp;&amp;</span> scale <span class="token operator">==</span> typedOther<span class="token punctuation">.</span>scale<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很清晰，对于网络图片来说，会将其“url+缩放比例”作为缓存的key。也就是说<strong>如果两张图片的url或scale只要有一个不同，便会重新下载并分别缓存</strong>。</p><p>另外，我们需要注意的是，图片缓存是在内存中，并没有进行本地文件持久化存储，这也是为什么网络图片在应用重启后需要重新联网下载的原因。</p><p>同时也意味着在应用生命周期内，如果缓存没有超过上限，相同的图片只会被下载一次。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>上面主要结合源码，探索了<code>ImageProvider</code>的主要功能和原理，如果要用一句话来总结<code>ImageProvider</code>功能，那么应该是：加载图片数据并进行缓存、解码。在此再次提醒读者，Flutter的源码是非常好的第一手资料，建议读者多多探索，另外，在阅读源码学习的同时一定要有总结，这样才不至于在源码中迷失。</p><h2 id="_14-5-2-image组件原理" tabindex="-1"><a class="header-anchor" href="#_14-5-2-image组件原理" aria-hidden="true">#</a> 14.5.2 Image组件原理</h2><p>前面章节中我们介绍过<code>Image</code>的基础用法，现在我们更深入一些，研究一下<code>Image</code>是如何和<code>ImageProvider</code>配合来获取最终解码后的数据，然后又如何将图片绘制到屏幕上的。</p><p>本节换一个思路，我们先不去直接看<code>Image</code>的源码，而根据已经掌握的知识来实现一个简版的“<code>Image</code>组件” <code>MyImage</code>，代码大致如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyImage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">MyImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>\n    <span class="token metadata function">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imageProvider<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>imageProvider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">ImageProvider</span> imageProvider<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  _MyImageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_MyImageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _MyImageState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyImage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token class-name">ImageStream</span> _imageStream<span class="token punctuation">;</span>\n  <span class="token class-name">ImageInfo</span> _imageInfo<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didChangeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 依赖改变时，图片的配置信息可能会发生改变</span>\n    <span class="token function">_getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">MyImage</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>imageProvider <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>imageProvider<span class="token punctuation">)</span>\n      <span class="token function">_getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">ImageStream</span> oldImageStream <span class="token operator">=</span> _imageStream<span class="token punctuation">;</span>\n    <span class="token comment">// 调用imageProvider.resolve方法，获得ImageStream。</span>\n    _imageStream <span class="token operator">=</span>\n        widget<span class="token punctuation">.</span>imageProvider<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">createLocalImageConfiguration</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//判断新旧ImageStream是否相同，如果不同，则需要调整流的监听器</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>_imageStream<span class="token punctuation">.</span>key <span class="token operator">!=</span> oldImageStream<span class="token operator">?</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token class-name">ImageStreamListener</span> listener <span class="token operator">=</span> <span class="token class-name">ImageStreamListener</span><span class="token punctuation">(</span>_updateImage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      oldImageStream<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _imageStream<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_updateImage</span><span class="token punctuation">(</span><span class="token class-name">ImageInfo</span> imageInfo<span class="token punctuation">,</span> bool synchronousCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Trigger a build whenever the image changes.</span>\n      _imageInfo <span class="token operator">=</span> imageInfo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _imageStream<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">ImageStreamListener</span><span class="token punctuation">(</span>_updateImage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RawImage</span><span class="token punctuation">(</span>\n      image<span class="token punctuation">:</span> _imageInfo<span class="token operator">?</span><span class="token punctuation">.</span>image<span class="token punctuation">,</span> <span class="token comment">// this is a dart:ui Image object</span>\n      scale<span class="token punctuation">:</span> _imageInfo<span class="token operator">?</span><span class="token punctuation">.</span>scale <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码流程如下：</p><ol><li>通过<code>imageProvider.resolve</code>方法可以得到一个<code>ImageStream</code>（图片数据流），然后监听<code>ImageStream</code>的变化。当图片数据源发生变化时，<code>ImageStream</code>会触发相应的事件，而本例中我们只设置了图片成功的监听器<code>_updateImage</code>，而<code>_updateImage</code>中只更新了<code>_imageInfo</code>。值得注意的是，如果是静态图，<code>ImageStream</code>只会触发一次时间，如果是动态图，则会触发多次事件，每一次都会有一个解码后的图片帧。</li><li><code>_imageInfo</code> 更新后会rebuild，此时会创建一个<code>RawImage</code> Widget。<code>RawImage</code>最终会通过<code>RenderImage</code>来将图片绘制在屏幕上。如果继续跟进<code>RenderImage</code>类，我们会发现<code>RenderImage</code>的<code>paint</code> 方法中调用了<code>paintImage</code>方法，而<code>paintImage</code>方法中通过<code>Canvas</code>的<code>drawImageRect(…)</code>、<code>drawImageNine(...)</code>等方法来完成最终的绘制。</li><li>最终的绘制由<code>RawImage</code>来完成。</li></ol><p>下面测试一下<code>MyImage</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ImageInternalTestRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n        <span class="token class-name">MyImage</span><span class="token punctuation">(</span>\n          imageProvider<span class="token punctuation">:</span> <span class="token class-name">NetworkImage</span><span class="token punctuation">(</span>\n            <span class="token string-literal"><span class="token string">&quot;https://avatars2.githubusercontent.com/u/20411648?s=460&amp;v=4&quot;</span></span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图14-4所示：</p><p><img src="'+t+'" alt="图14-4"></p><p>成功了！ 现在，想必<code>Image</code> Widget的源码已经没必要在花费篇章去介绍了，读者有兴趣可以自行去阅读。</p><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h2><p>本节主要介绍了Flutter 图片的加载、缓存和绘制流程。其中<code>ImageProvider</code>主要负责图片数据的加载和缓存，而绘制部分逻辑主要是由<code>RawImage</code>来完成。 而<code>Image</code>正是连接起<code>ImageProvider</code>和<code>RawImage</code> 的桥梁。</p>',59)],c={},o=(0,a(18580).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,p)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},70102:(n,s,a)=>{n.exports=a.p+"assets/img/14-4.1cbf75e4.png"}}]);