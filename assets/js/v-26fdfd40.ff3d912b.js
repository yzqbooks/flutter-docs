"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[6607],{45410:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-26fdfd40","path":"/chapter4/stack.html","title":"4.6 层叠布局 Stack、Positioned","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Stack","slug":"stack","link":"#stack","children":[]},{"level":3,"title":"Positioned","slug":"positioned","link":"#positioned","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.33,"words":998},"filePathRelative":"chapter4/stack.md","localizedDate":"2022年6月6日","excerpt":""}')},47281:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6808);const e=a.p+"assets/img/4-17.71f8ae7d.png",c=a.p+"assets/img/4-18.6eb54693.png",o=[(0,t.uE)('<h1 id="_4-6-层叠布局-stack、positioned" tabindex="-1"><a class="header-anchor" href="#_4-6-层叠布局-stack、positioned" aria-hidden="true">#</a> 4.6 层叠布局 Stack、Positioned</h1><p>层叠布局和 Web 中的绝对定位、Android 中的 Frame 布局是相似的，子组件可以根据距父容器四个角的位置来确定自身的位置。层叠布局允许子组件按照代码中声明的顺序堆叠起来。Flutter中使用<code>Stack</code>和<code>Positioned</code>这两个组件来配合实现绝对定位。<code>Stack</code>允许子组件堆叠，而<code>Positioned</code>用于根据<code>Stack</code>的四个角来确定子组件的位置。</p><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> Stack</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> <span class="token class-name">AlignmentDirectional</span><span class="token punctuation">.</span>topStart<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>fit <span class="token operator">=</span> <span class="token class-name">StackFit</span><span class="token punctuation">.</span>loose<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>clipBehavior <span class="token operator">=</span> <span class="token class-name">Clip</span><span class="token punctuation">.</span>hardEdge<span class="token punctuation">,</span>\n  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>alignment</code>：此参数决定如何去对齐没有定位（没有使用<code>Positioned</code>）或部分定位的子组件。所谓部分定位，在这里<strong>特指没有在某一个轴上定位：</strong><code>left</code>、<code>right</code>为横轴，<code>top</code>、<code>bottom</code>为纵轴，只要包含某个轴上的一个定位属性就算在该轴上有定位。</li><li><code>textDirection</code>：和<code>Row</code>、<code>Wrap</code>的<code>textDirection</code>功能一样，都用于确定<code>alignment</code>对齐的参考系，即：<code>textDirection</code>的值为<code>TextDirection.ltr</code>，则<code>alignment</code>的<code>start</code>代表左，<code>end</code>代表右，即<code>从左往右</code>的顺序；<code>textDirection</code>的值为<code>TextDirection.rtl</code>，则alignment的<code>start</code>代表右，<code>end</code>代表左，即<code>从右往左</code>的顺序。</li><li><code>fit</code>：此参数用于确定<strong>没有定位</strong>的子组件如何去适应<code>Stack</code>的大小。<code>StackFit.loose</code>表示使用子组件的大小，<code>StackFit.expand</code>表示扩伸到<code>Stack</code>的大小。</li><li><code>clipBehavior</code>：此属性决定对超出<code>Stack</code>显示空间的部分如何剪裁，Clip枚举类中定义了剪裁的方式，Clip.hardEdge 表示直接剪裁，不应用抗锯齿，更多信息可以查看源码注释。</li></ul><h3 id="positioned" tabindex="-1"><a class="header-anchor" href="#positioned" aria-hidden="true">#</a> Positioned</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">Positioned</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n  required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>left</code>、<code>top</code> 、<code>right</code>、 <code>bottom</code>分别代表离<code>Stack</code>左、上、右、底四边的距离。<code>width</code>和<code>height</code>用于指定需要定位元素的宽度和高度。注意，<code>Positioned</code>的<code>width</code>、<code>height</code> 和其它地方的意义稍微有点区别，此处用于配合<code>left</code>、<code>top</code> 、<code>right</code>、 <code>bottom</code>来定位组件，举个例子，在水平方向时，你只能指定<code>left</code>、<code>right</code>、<code>width</code>三个属性中的两个，如指定<code>left</code>和<code>width</code>后，<code>right</code>会自动算出(<code>left</code>+<code>width</code>)，如果同时指定三个属性则会报错，垂直方向同理。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>在下面的例子中，我们通过对几个<code>Text</code>组件的定位来演示<code>Stack</code>和<code>Positioned</code>的特性：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//通过ConstrainedBox来确保Stack占满屏幕</span>\n<span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>\n  constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n    alignment<span class="token punctuation">:</span><span class="token class-name">Alignment</span><span class="token punctuation">.</span>center <span class="token punctuation">,</span> <span class="token comment">//指定未定位或部分定位widget的对齐方式</span>\n    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n      <span class="token class-name">Container</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello world&quot;</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n        left<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am Jack&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n        top<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your friend&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span>        \n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果见图4-17：</p><p><img src="'+e+'" alt="图4-17"></p><p>由于第一个子文本组件<code>Text(&quot;Hello world&quot;)</code>没有指定定位，并且<code>alignment</code>值为<code>Alignment.center</code>，所以它会居中显示。第二个子文本组件<code>Text(&quot;I am Jack&quot;)</code>只指定了水平方向的定位(<code>left</code>)，所以属于部分定位，即垂直方向上没有定位，那么它在垂直方向的对齐方式则会按照<code>alignment</code>指定的对齐方式对齐，即垂直方向居中。对于第三个子文本组件<code>Text(&quot;Your friend&quot;)</code>，和第二个<code>Text</code>原理一样，只不过是水平方向没有定位，则水平方向居中。</p><p>我们给上例中的<code>Stack</code>指定一个<code>fit</code>属性，然后将三个子文本组件的顺序调整一下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Stack</span><span class="token punctuation">(</span>\n  alignment<span class="token punctuation">:</span><span class="token class-name">Alignment</span><span class="token punctuation">.</span>center <span class="token punctuation">,</span>\n  fit<span class="token punctuation">:</span> <span class="token class-name">StackFit</span><span class="token punctuation">.</span>expand<span class="token punctuation">,</span> <span class="token comment">//未定位widget占满Stack整个空间</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n      left<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am Jack&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Container</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello world&quot;</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Positioned</span><span class="token punctuation">(</span>\n      top<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your friend&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如图4-18所示：</p><p><img src="'+c+'" alt="图4-18"></p><p>可以看到，由于第二个子文本组件没有定位，所以<code>fit</code>属性会对它起作用，就会占满<code>Stack</code>。由于<code>Stack</code>子元素是堆叠的，所以第一个子文本组件被第二个遮住了，而第三个在最上层，所以可以正常显示。</p>',19)],p={},i=(0,a(18580).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);