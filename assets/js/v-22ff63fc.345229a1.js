"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[481],{55403:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-22ff63fc","path":"/chapter7/provider.html","title":"7.3 跨组件状态共享（Provider）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"7.3.1 Provider","slug":"_7-3-1-provider","link":"#_7-3-1-provider","children":[{"level":3,"title":"购物车示例","slug":"购物车示例","link":"#购物车示例","children":[]}]},{"level":2,"title":"7.3.2 优化","slug":"_7-3-2-优化","link":"#_7-3-2-优化","children":[]},{"level":2,"title":"7.3.3 其它状态管理包","slug":"_7-3-3-其它状态管理包","link":"#_7-3-3-其它状态管理包","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":12.72,"words":3817},"filePathRelative":"chapter7/provider.md","localizedDate":"2022年6月6日","excerpt":""}')},32042:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var t=a(6808);const e=a.p+"assets/img/7-2.db9051f0.png",p=a.p+"assets/img/7-3.02fbadc0.png",c=(0,t.uE)('<h1 id="_7-3-跨组件状态共享-provider" tabindex="-1"><a class="header-anchor" href="#_7-3-跨组件状态共享-provider" aria-hidden="true">#</a> 7.3 跨组件状态共享（Provider）</h1><p>在 Flutter 开发中，状态管理是一个永恒的话题。一般的原则是：如果状态是组件私有的，则应该由组件自己管理；如果状态要跨组件共享，则该状态应该由各个组件共同的父元素来管理。对于组件私有的状态管理很好理解，但对于跨组件共享的状态，管理的方式就比较多了，如使用全局事件总线EventBus（将在下一章中介绍），它是一个观察者模式的实现，通过它就可以实现跨组件状态同步：状态持有方（发布者）负责更新、发布状态，状态使用方（观察者）监听状态改变事件来执行一些操作。下面我们看一个登录状态同步的简单示例：</p><p>定义事件：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Event</span><span class="token punctuation">{</span>\n  login<span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略其它事件</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录页代码大致如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 登录状态改变后发布状态改变事件</span>\nbus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖登录状态的页面：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">onLoginChanged</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">//登录状态变化处理逻辑</span>\n<span class="token punctuation">}</span>\n\n<span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//订阅登录状态改变事件</span>\n  bus<span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">.</span>login<span class="token punctuation">,</span>onLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//取消订阅</span>\n  bus<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">.</span>login<span class="token punctuation">,</span>onLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以发现，通过观察者模式来实现跨组件状态共享有一些明显的缺点：</p><ol><li>必须显式定义各种事件，不好管理。</li><li>订阅者必须需显式注册状态改变回调，也必须在组件销毁时手动去解绑回调以避免内存泄露。</li></ol><p>在Flutter当中有没有更好的跨组件状态管理方式了呢？答案是肯定的，那怎么做的？我们想想前面介绍的<code>InheritedWidget</code>，它的天生特性就是能绑定<code>InheritedWidget</code>与依赖它的子孙组件的依赖关系，并且当<code>InheritedWidget</code>数据发生变化时，可以自动更新依赖的子孙组件！利用这个特性，我们可以将需要跨组件共享的状态保存在<code>InheritedWidget</code>中，然后在子组件中引用<code>InheritedWidget</code>即可，Flutter社区著名的Provider包正是基于这个思想实现的一套跨组件状态共享解决方案，接下来我们便详细介绍一下Provider的用法及原理。</p><h2 id="_7-3-1-provider" tabindex="-1"><a class="header-anchor" href="#_7-3-1-provider" aria-hidden="true">#</a> 7.3.1 Provider</h2><p>为了加强读者的理解，我们不直接去看Provider包的源代码，相反，我会带着你根据上面描述的通过<code>InheritedWidget</code>实现的思路来一步一步地实现一个最小功能的Provider。</p><p>首先，我们需要一个保存需要共享的数据<code>InheritedWidget</code>，由于具体业务数据类型不可预期，为了通用性，我们使用泛型，定义一个通用的<code>InheritedProvider</code>类，它继承自<code>InheritedWidget</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 一个通用的InheritedWidget，保存需要跨组件共享的状态</span>\n<span class="token keyword">class</span> <span class="token class-name">InheritedProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">InheritedProvider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">updateShouldNotify</span><span class="token punctuation">(</span><span class="token class-name">InheritedProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//在此简单返回true，则每次更新都会调用依赖其的子孙节点的`didChangeDependencies`。</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据保存的地方有了，那么接下来我们需要做的就是在数据发生变化的时候来重新构建<code>InheritedProvider</code>，那么现在就面临两个问题：</p><ol><li>数据发生变化怎么通知？</li><li>谁来重新构建<code>InheritedProvider</code>？</li></ol><p>第一个问题其实很好解决，我们当然可以使用之前介绍的eventBus来进行事件通知，但是为了更贴近Flutter开发，我们使用Flutter SDK中提供的<code>ChangeNotifier</code>类 ，它继承自<code>Listenable</code>，也实现了一个Flutter风格的发布者-订阅者模式，<code>ChangeNotifier</code>定义大致如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ChangeNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">Listenable</span> <span class="token punctuation">{</span>\n  <span class="token class-name">List</span> listeners<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token comment">//添加监听器</span>\n     listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//移除监听器</span>\n    listeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">void</span> <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//通知所有监听器，触发监听器回调 </span>\n    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n   \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过调用<code>addListener()</code>和<code>removeListener()</code>来添加、移除监听器（订阅者）；通过调用<code>notifyListeners()</code> 可以触发所有监听器回调。</p><p>现在，我们将要共享的状态放到一个Model类中，然后让它继承自<code>ChangeNotifier</code>，这样当共享的状态改变时，我们只需要调用<code>notifyListeners()</code> 来通知订阅者，然后由订阅者来重新构建<code>InheritedProvider</code>，这也是第二个问题的答案！接下来我们便实现这个订阅者类：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>\n<span class="token keyword">class</span> <span class="token class-name">ChangeNotifierProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span> child<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n\n  <span class="token comment">//定义一个便捷方法，方便子树中的widget获取共享数据</span>\n  <span class="token keyword">static</span> <span class="token class-name">T</span> of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> type <span class="token operator">=</span> _typeOf<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedProvider</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> provider <span class="token operator">=</span>  context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedProvider</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> provider<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  _ChangeNotifierProviderState<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _ChangeNotifierProviderState<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该类继承<code>StatefulWidget</code>，然后定义了一个<code>of()</code>静态方法供子类方便获取Widget树中的<code>InheritedProvider</code>中保存的共享状态(model)，下面我们实现该类对应的<code>_ChangeNotifierProviderState</code>类：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _ChangeNotifierProviderState<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//如果数据发生变化（model类调用了notifyListeners），重新构建InheritedProvider</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">didUpdateWidget</span><span class="token punctuation">(</span><span class="token class-name">ChangeNotifierProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//当Provider更新时，如果新旧数据不&quot;==&quot;，则解绑旧数据监听，同时添加新数据监听</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>data <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      oldWidget<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      widget<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">didUpdateWidget</span><span class="token punctuation">(</span>oldWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 给model添加监听器</span>\n    widget<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 移除model的监听器</span>\n    widget<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">InheritedProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      data<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>child<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>_ChangeNotifierProviderState</code>类的主要作用就是监听到共享状态（model）改变时重新构建Widget树。注意，在<code>_ChangeNotifierProviderState</code>类中调用<code>setState()</code>方法，<code>widget.child</code>始终是同一个，所以执行build时，<code>InheritedProvider</code>的child引用的始终是同一个子widget，所以<code>widget.child</code>并不会重新<code>build</code>，这也就相当于对<code>child</code>进行了缓存！当然如果<code>ChangeNotifierProvider</code>父级Widget重新build时，则其传入的<code>child</code>便有可能会发生变化。</p><p>现在我们所需要的各个工具类都已完成，下面我们通过一个购物车的例子来看看怎么使用上面的这些类。</p><h3 id="购物车示例" tabindex="-1"><a class="header-anchor" href="#购物车示例" aria-hidden="true">#</a> 购物车示例</h3><p>我们需要实现一个显示购物车中所有商品总价的功能：</p><ol><li>向购物车中添加新商品时总价更新</li></ol><p>定义一个<code>Item</code>类，用于表示商品信息：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  double price<span class="token punctuation">;</span> <span class="token comment">//商品单价</span>\n  int count<span class="token punctuation">;</span> <span class="token comment">// 商品份数</span>\n  <span class="token comment">//... 省略其它属性</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个保存购物车内商品数据的<code>CartModel</code>类:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CartModel</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 用于保存购物车中商品列表</span>\n  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> _items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 禁止改变购物车里的商品信息</span>\n  <span class="token class-name">UnmodifiableListView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span> items <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">UnmodifiableListView</span><span class="token punctuation">(</span>_items<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 购物车中商品的总价</span>\n  double <span class="token keyword">get</span> totalPrice <span class="token operator">=</span><span class="token operator">&gt;</span>\n      _items<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> value <span class="token operator">+</span> item<span class="token punctuation">.</span>count <span class="token operator">*</span> item<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 将 [item] 添加到购物车。这是唯一一种能从外部改变购物车的方法。</span>\n  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 通知监听器（订阅者），重新构建InheritedProvider， 更新状态。</span>\n    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CartModel </code>即要跨组件共享的model类。最后我们构建示例页面：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ProviderRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _ProviderRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_ProviderRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _ProviderRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProviderRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">ChangeNotifierProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n        data<span class="token punctuation">:</span> <span class="token class-name">CartModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n            children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n              <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">var</span> cart<span class="token operator">=</span><span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;总价: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">cart<span class="token punctuation">.</span>totalPrice</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ElevatedButton build&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在后面优化部分会用到</span>\n                <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;添加商品&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//给购物车中添加商品，添加后总价会更新</span>\n                    <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行示例后效果如图7-2所示：</p><p><img src="'+e+'" alt="provider"></p><p>每次点击”添加商品“按钮，总价就会增加20，我们期望的功能实现了！可能有些读者会疑惑，我们饶了一大圈实现这么简单的功能有意义么？其实，就这个例子来看，只是更新同一个路由页中的一个状态，我们使用<code>ChangeNotifierProvider</code>的优势并不明显，但是如果我们是做一个购物APP呢？由于购物车数据是通常是会在整个APP中共享的，比如会跨路由共享。如果我们将<code>ChangeNotifierProvider</code>放在整个应用的Widget树的根上，那么整个APP就可以共享购物车的数据了，这时<code>ChangeNotifierProvider</code>的优势将会非常明显。</p><p>虽然上面的例子比较简单，但它却将Provider的原理和流程体现的很清楚，图7-3是Provider的原理图：</p><p><img src="'+p+'" alt="图7-3"></p><p>Model变化后会自动通知<code>ChangeNotifierProvider</code>（订阅者），<code>ChangeNotifierProvider</code>内部会重新构建<code>InheritedWidget</code>，而依赖该<code>InheritedWidget</code>的子孙Widget就会更新。</p><p>我们可以发现使用Provider，将会带来如下收益：</p><ol><li>我们的业务代码更关注数据了，只要更新Model，则UI会自动更新，而不用在状态改变后再去手动调用<code>setState()</code>来显式更新页面。</li><li>数据改变的消息传递被屏蔽了，我们无需手动去处理状态改变事件的发布和订阅了，这一切都被封装在Provider中了。这真的很棒，帮我们省掉了大量的工作！</li><li>在大型复杂应用中，尤其是需要全局共享的状态非常多时，使用Provider将会大大简化我们的代码逻辑，降低出错的概率，提高开发效率。</li></ol><h2 id="_7-3-2-优化" tabindex="-1"><a class="header-anchor" href="#_7-3-2-优化" aria-hidden="true">#</a> 7.3.2 优化</h2><p>我们上面实现的<code>ChangeNotifierProvider</code>是有两个明显缺点：代码组织问题和性能问题，下面我们一一讨论。</p><h4 id="代码组织问题" tabindex="-1"><a class="header-anchor" href="#代码组织问题" aria-hidden="true">#</a> 代码组织问题</h4><p>我们先看一下构建显示总价Text的代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> cart<span class="token operator">=</span><span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;总价: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">cart<span class="token punctuation">.</span>totalPrice</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码有两点可以优化：</p><ol><li>需要显式调用<code>ChangeNotifierProvider.of</code>，当APP内部依赖<code>CartModel</code>很多时，这样的代码将很冗余。</li><li>语义不明确；由于<code>ChangeNotifierProvider</code>是订阅者，那么依赖<code>CartModel</code>的Widget自然就是订阅者，其实也就是状态的消费者，如果我们用<code>Builder</code> 来构建，语义就不是很明确；如果我们能使用一个具有明确语义的Widget，比如就叫<code>Consumer</code>，这样最终的代码语义将会很明确，只要看到<code>Consumer</code>，我们就知道它是依赖某个跨组件或全局的状态。</li></ol><p>为了优化这两个问题，我们可以封装一个<code>Consumer</code> Widget，实现如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 这是一个便捷类，会获得当前context和指定数据类型的Provider</span>\n<span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> <span class="token class-name">Widget</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">?</span> value<span class="token punctuation">)</span> builder<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">builder</span><span class="token punctuation">(</span>\n      context<span class="token punctuation">,</span>\n      <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Consumer</code>实现非常简单，它通过指定模板参数，然后再内部自动调用<code>ChangeNotifierProvider.of</code>获取相应的Model，并且<code>Consumer</code>这个名字本身也是具有确切语义（消费者）。现在上面的代码块可以优化为如下这样：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> cart<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;总价: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">cart<span class="token punctuation">.</span>totalPrice</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是很优雅！</p><h4 id="性能问题" tabindex="-1"><a class="header-anchor" href="#性能问题" aria-hidden="true">#</a> 性能问题</h4><p>上面的代码还有一个性能问题，就在构建”添加按钮“的代码处：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ElevatedButton build&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构建时输出日志</span>\n  <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;添加商品&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们点击”添加商品“按钮后，由于购物车商品总价会变化，所以显示总价的Text更新是符合预期的，但是”添加商品“按钮本身没有变化，是不应该被重新build的。但是我们运行示例，每次点击”添加商品“按钮，控制台都会输出&quot;ElevatedButton build&quot;日志，也就是说”添加商品“按钮在每次点击时其自身都会重新build！这是为什么呢？如果你已经理解了<code>InheritedWidget</code>的更新机制，那么答案一眼就能看出：这是因为构建<code>ElevatedButton</code>的<code>Builder</code>中调用了<code>ChangeNotifierProvider.of</code>，也就是说依赖了Widget树上面的<code>InheritedWidget</code>（即<code>InheritedProvider</code> ）Widget，所以当添加完商品后，<code>CartModel</code>发生变化，会通知<code>ChangeNotifierProvider</code>, 而<code>ChangeNotifierProvider</code>则会重新构建子树，所以<code>InheritedProvider</code>将会更新，此时依赖它的子孙Widget就会被重新构建。</p><p>问题的原因搞清楚了，那么我们如何避免这不必要重构呢？既然按钮重新被build是因为按钮和<code>InheritedWidget</code>建立了依赖关系，那么我们只要打破或解除这种依赖关系就可以了。那么如何解除按钮和<code>InheritedWidget</code>的依赖关系呢？我们上一节介绍<code>InheritedWidget</code>时已经讲过了：调用<code>dependOnInheritedWidgetOfExactType()</code> 和 <code>getElementForInheritedWidgetOfExactType()</code>的区别就是前者会注册依赖关系，而后者不会。所以我们只需要将<code>ChangeNotifierProvider.of</code>的实现改为下面这样即可：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token comment">//添加一个listen参数，表示是否建立依赖关系</span>\n  <span class="token keyword">static</span> <span class="token class-name">T</span> of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token punctuation">{</span>bool listen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> type <span class="token operator">=</span> _typeOf<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedProvider</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> provider <span class="token operator">=</span> listen\n        <span class="token operator">?</span> context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedProvider</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> context<span class="token punctuation">.</span>getElementForInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InheritedProvider</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>widget\n            <span class="token operator">as</span> <span class="token class-name">InheritedProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> provider<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将调用部分代码改为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Column</span><span class="token punctuation">(</span>\n    children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n      <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> cart<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;总价: </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">cart<span class="token punctuation">.</span>totalPrice</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">Builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ElevatedButton build&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;添加商品&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// listen 设为false，不建立依赖关系</span>\n            <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后再次运行上面的示例，我们会发现点击”添加商品“按钮后，控制台不会再输出&quot;ElevatedButton build&quot;了，即按钮不会被重新构建了。而总价仍然会更新，这是因为<code>Consumer</code>中调用<code>ChangeNotifierProvider.of</code>时<code>listen</code>值为默认值true，所以还是会建立依赖关系。</p><p>至此我们便实现了一个迷你的Provider，它具备Pub上Provider Package中的核心功能；但是我们的迷你版功能并不全面，如只实现了一个可监听的ChangeNotifierProvider，并没有实现只用于数据共享的Provider；另外，我们的实现有些边界也没有考虑的到，比如如何保证在Widget树重新build时Model始终是单例等。所以建议读者在实战中还是使用Provider Package，而本节实现这个迷你Provider的主要目的主要是为了帮助读者了解Provider Package底层的原理。</p><h2 id="_7-3-3-其它状态管理包" tabindex="-1"><a class="header-anchor" href="#_7-3-3-其它状态管理包" aria-hidden="true">#</a> 7.3.3 其它状态管理包</h2><p>现在Flutter社区已经有很多专门用于状态管理的包了，在此我们列出几个相对评分比较高的：</p>',67),o=(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",null,"包名"),(0,t._)("th",null,"介绍")])],-1),i={href:"https://pub.flutter-io.cn/packages/provider",target:"_blank",rel:"noopener noreferrer"},l={href:"https://pub.flutter-io.cn/packages/scoped_model",target:"_blank",rel:"noopener noreferrer"},u=(0,t._)("td",null,[(0,t.Uk)("这两个包都是基于"),(0,t._)("code",null,"InheritedWidget"),(0,t.Uk)("的，原理相似")],-1),d={href:"https://pub.flutter-io.cn/packages/flutter_redux",target:"_blank",rel:"noopener noreferrer"},r=(0,t._)("td",null,"是Web开发中React生态链中Redux包的Flutter实现",-1),k={href:"https://pub.dev/packages/flutter_mobx",target:"_blank",rel:"noopener noreferrer"},v=(0,t._)("td",null,"是Web开发中React生态链中MobX包的Flutter实现",-1),m={href:"https://pub.dev/packages/flutter_bloc",target:"_blank",rel:"noopener noreferrer"},b=(0,t._)("td",null,"是BLoC模式的Flutter实现",-1),g=(0,t.uE)('<p>在此笔者不对这些包做推荐，读者有兴趣都可以研究一下，了解它们各自的思想。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>本节通过介绍事件总线在跨组件共享中的一些缺点引出了通过<code>InheritedWidget</code>来实现状态的共享的思想，然后基于该思想实现了一个简单的 Provider，在实现的过程中也更深入的探索了<code>InheritedWidget</code>与其依赖项的注册机制和更新机制。通过本节的学习，读者应该达到两个目标，首先是对<code>InheritedWidget</code>彻底吃透，其次是 Provider 的设计思想。</p><p><code>InheritedWidget</code>是Flutter中非常重要的一个Widget，像国际化、主题等都是通过它来实现，所以我们也不惜篇幅，通过好几节来介绍它的，在下一节中，我们将介绍另一个基于<code>InheritedWidget</code>的组件Theme(主题)。</p>',4),h={},f=(0,a(18580).Z)(h,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[c,(0,t._)("table",null,[o,(0,t._)("tbody",null,[(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",i,[(0,t.Uk)("Provider"),(0,t.Wm)(a)]),(0,t.Uk)(" & "),(0,t._)("a",l,[(0,t.Uk)("Scoped Model"),(0,t.Wm)(a)])]),u]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",d,[(0,t.Uk)("Redux"),(0,t.Wm)(a)])]),r]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",k,[(0,t.Uk)("MobX"),(0,t.Wm)(a)])]),v]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",m,[(0,t.Uk)("BLoC"),(0,t.Wm)(a)])]),b])])]),g])}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);