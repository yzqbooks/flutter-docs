"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[5924],{45650:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-34921e64","path":"/chapter2/flutter_package_mgr.html","title":"2.5 包管理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Pub仓库","slug":"pub仓库","link":"#pub仓库","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"其它依赖方式","slug":"其它依赖方式","link":"#其它依赖方式","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.18,"words":1554},"filePathRelative":"chapter2/flutter_package_mgr.md","localizedDate":"2022年6月6日","excerpt":""}')},106:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6808);const t=a.p+"assets/img/2-12.b8731007.png",l=a.p+"assets/img/2-13.70174534.png",p=a.p+"assets/img/2-14.47075bfc.png",i=[(0,e.uE)('<h1 id="_2-5-包管理" tabindex="-1"><a class="header-anchor" href="#_2-5-包管理" aria-hidden="true">#</a> 2.5 包管理</h1><p>在软件开发中，很多时候有一些公共的库或 SDK 可能会被很多项目用到，因此，将这些代码单独抽到一个独立模块，然后哪个项目需要使用时再直接集成这个模块，便可大大提高开发效率。很多编程语言或开发工具都支持这种“模块共享”机制，如 Java 语言中这种独立模块会被打成一个 jar 包，Android 中的 aar 包，Web开发中的 npm 包等。为了方便表述，我们将这种可共享的独立模块统一称为“包”（ Package）。</p><p>一个 App 在实际开发中往往会依赖很多包，而这些包通常都有交叉依赖关系、版本依赖等，如果由开发者手动来管理应用中的依赖包将会非常麻烦。因此，各种开发生态或编程语言官方通常都会提供一些包管理工具，比如在 Android 提供了 Gradle 来管理依赖，iOS 用 Cocoapods 或 Carthage 来管理依赖，Node 中通过 npm 等。而在 Flutter 开发中也有自己的包管理工具。本节我们主要介绍一下 Flutter 如何使用配置文件<code>pubspec.yaml</code>（位于项目根目录）来管理第三方依赖包。</p><p>YAML 是一种直观、可读性高并且容易被人类阅读的文件格式，和 xml 或 Json 相比它语法简单并非常容易解析，所以 YAML 常用于配置文件，Flutter 也是用 yaml 文件作为其配置文件。Flutter 项目默认的配置文件是<code>pubspec.yaml</code>，我们看一个简单的示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> flutter_in_action\n<span class="token key atrule">description</span><span class="token punctuation">:</span> First Flutter Application.\n\n<span class="token key atrule">version</span><span class="token punctuation">:</span> 1.0.0+1\n\n<span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">flutter</span><span class="token punctuation">:</span>\n    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter\n  <span class="token key atrule">cupertino_icons</span><span class="token punctuation">:</span> ^0.1.2\n\n<span class="token key atrule">dev_dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">flutter_test</span><span class="token punctuation">:</span>\n    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter\n    \n<span class="token key atrule">flutter</span><span class="token punctuation">:</span>\n  <span class="token key atrule">uses-material-design</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，我们逐一解释一下各个字段的意义：</p><ul><li><code>name</code>：应用或包名称。</li><li><code>description</code>: 应用或包的描述、简介。</li><li><code>version</code>：应用或包的版本号。</li><li><code>dependencies</code>：应用或包依赖的其它包或插件。</li><li><code>dev_dependencies</code>：开发环境依赖的工具包（而不是flutter应用本身依赖的包）。</li><li><code>flutter</code>：flutter相关的配置选项。</li></ul><p>如果我们的Flutter应用本身依赖某个包，我们需要将所依赖的包添加到<code>dependencies</code> 下，接下来我们通过一个例子来演示一下如何添加、下载并使用第三方包。</p><h2 id="pub仓库" tabindex="-1"><a class="header-anchor" href="#pub仓库" aria-hidden="true">#</a> Pub仓库</h2><p>Pub（https://pub.dev/ ）是 Google 官方的 Dart Packages 仓库，类似于 node 中的 npm仓库、Android中的 jcenter。我们可以在 Pub 上面查找我们需要的包和插件，也可以向 Pub 发布我们的包和插件。我们将在后面的章节中介绍如何向 Pub 发布我们的包和插件。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>接下来，我们实现一个显示随机字符串的 widget。有一个名为 “english_words” 的开源软件包，其中包含数千个常用的英文单词以及一些实用功能。我们首先在 pub 上找到 english_words 这个包（如图2-12所示），确定其最新的版本号和是否支持 Flutter。</p><p><img src="'+t+'" alt="图2-12"></p><p>我们看到“english_words”包最新的版本是4.0.0，并且支持flutter，接下来：</p><ol><li><p>将“english_words” 添加到依赖项列表，如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">flutter</span><span class="token punctuation">:</span>\n    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter\n  <span class="token comment"># 新添加的依赖</span>\n  <span class="token key atrule">english_words</span><span class="token punctuation">:</span> ^4.0.0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>下载包。在Android Studio的编辑器视图中查看pubspec.yaml时（图2-13），单击右上角的 <strong>Pub get</strong> 。</p><p><img src="'+l+'" alt="图2-13"></p><p>这会将依赖包安装到您的项目。我们可以在控制台中看到以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter packages get\nRunning <span class="token string">&quot;flutter packages get&quot;</span> <span class="token keyword">in</span> flutter_in_action<span class="token punctuation">..</span>.\nProcess finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以在控制台，定位到当前工程目录，然后手动运行<code>flutter packages get</code> 命令来下载依赖包。另外，需要注意<code>dependencies</code>和<code>dev_dependencies</code>的区别，前者的依赖包将作为App的源码的一部分参与编译，生成最终的安装包。而后者的依赖包只是作为开发阶段的一些工具包，主要是用于帮助我们提高开发、测试效率，比如 flutter 的自动化测试包等。</p></li><li><p>引入<code>english_words</code>包。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:english_words/english_words.dart&#39;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在输入时，Android Studio会自动提供有关库导入的建议选项。导入后该行代码将会显示为灰色，表示导入的库尚未使用。</p></li><li><p>使用<code>english_words</code>包来生成随机字符串。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">RandomWordsWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 生成随机字符串</span>\n    <span class="token keyword">final</span> wordPair <span class="token operator">=</span> <span class="token class-name">WordPair</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n      padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>wordPair<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将<code>RandomWordsWidget</code> 添加到 <code>_MyHomePageState.build</code> 的<code>Column</code>的子widget中。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Column</span><span class="token punctuation">(</span>\n  mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n    <span class="token class-name">RandomWordsWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果应用程序正在运行，请使用热重载按钮（⚡️图标） 更新正在运行的应用程序。每次单击热重载或保存项目时，都会在正在运行的应用程序中随机选择不同的单词对。 这是因为单词对是在 <code>build</code> 方法内部生成的。每次热更新时，<code>build</code>方法都会被执行，运行效果如图2-14所示。</p><p><img src="'+p+'" alt="图2-14"></p></li></ol><h2 id="其它依赖方式" tabindex="-1"><a class="header-anchor" href="#其它依赖方式" aria-hidden="true">#</a> 其它依赖方式</h2><p>上文所述的依赖方式是依赖Pub仓库的。但我们还可以依赖本地包和git仓库。</p><ul><li><p>依赖本地包</p><p>如果我们正在本地开发一个包，包名为pkg1，我们可以通过下面方式依赖：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n\t<span class="token key atrule">pkg1</span><span class="token punctuation">:</span>\n        <span class="token key atrule">path</span><span class="token punctuation">:</span> ../../code/pkg1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路径可以是相对的，也可以是绝对的。</p></li><li><p>依赖Git：你也可以依赖存储在Git仓库中的包。如果软件包位于仓库的根目录中，请使用以下语法</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pkg1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">git</span><span class="token punctuation">:</span>\n      <span class="token key atrule">url</span><span class="token punctuation">:</span> git<span class="token punctuation">:</span>//github.com/xxx/pkg1.git\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面假定包位于Git存储库的根目录中。如果不是这种情况，可以使用path参数指定相对位置，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">package1</span><span class="token punctuation">:</span>\n    <span class="token key atrule">git</span><span class="token punctuation">:</span>\n      <span class="token key atrule">url</span><span class="token punctuation">:</span> git<span class="token punctuation">:</span>//github.com/flutter/packages.git\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> packages/package1        \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>上面介绍的这些依赖方式是Flutter开发中常用的，但还有一些其它依赖方式，完整的内容读者可以自行查看：https://www.dartlang.org/tools/pub/dependencies 。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节介绍了Flutter中包管理、引用、下载的整体流程，我们将在后面的章节中介绍如何开发并发布我们自己的包。</p>',21)],c={},d=(0,a(18580).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,i)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);