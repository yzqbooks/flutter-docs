"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[4046],{68731:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-42fac37c","path":"/chapter2/flutter_router.html","title":"2.4 路由管理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"2.4.1 一个简单示例","slug":"_2-4-1-一个简单示例","link":"#_2-4-1-一个简单示例","children":[]},{"level":2,"title":"2.4.2 MaterialPageRoute","slug":"_2-4-2-materialpageroute","link":"#_2-4-2-materialpageroute","children":[]},{"level":2,"title":"2.4.3 Navigator","slug":"_2-4-3-navigator","link":"#_2-4-3-navigator","children":[{"level":3,"title":"Future  push(BuildContext context, Route route)","slug":"future-push-buildcontext-context-route-route","link":"#future-push-buildcontext-context-route-route","children":[]},{"level":3,"title":"bool  pop(BuildContext context, [ result ])","slug":"bool-pop-buildcontext-context-result","link":"#bool-pop-buildcontext-context-result","children":[]},{"level":3,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[]}]},{"level":2,"title":"2.4.4 路由传值","slug":"_2-4-4-路由传值","link":"#_2-4-4-路由传值","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"2.4.5 命名路由","slug":"_2-4-5-命名路由","link":"#_2-4-5-命名路由","children":[{"level":3,"title":"路由表","slug":"路由表","link":"#路由表","children":[]},{"level":3,"title":"注册路由表","slug":"注册路由表","link":"#注册路由表","children":[]},{"level":3,"title":"通过路由名打开新路由页","slug":"通过路由名打开新路由页","link":"#通过路由名打开新路由页","children":[]},{"level":3,"title":"命名路由参数传递","slug":"命名路由参数传递","link":"#命名路由参数传递","children":[]},{"level":3,"title":"适配","slug":"适配","link":"#适配","children":[]}]},{"level":2,"title":"2.4.6 路由生成钩子","slug":"_2-4-6-路由生成钩子","link":"#_2-4-6-路由生成钩子","children":[]},{"level":2,"title":"2.4.7 总结","slug":"_2-4-7-总结","link":"#_2-4-7-总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":11.65,"words":3494},"filePathRelative":"chapter2/flutter_router.md","localizedDate":"2022年6月6日","excerpt":""}')},13042:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6808);const e=a.p+"assets/img/2-9.aaeda64f.png",p=a.p+"assets/img/2-10.ccafd540.png",c=a.p+"assets/img/2-11.b4f0318b.png",o=[(0,t.uE)('<h1 id="_2-4-路由管理" tabindex="-1"><a class="header-anchor" href="#_2-4-路由管理" aria-hidden="true">#</a> 2.4 路由管理</h1><p>路由（Route）在移动开发中通常指页面（Page），这跟 Web 开发中单页应用的 Route 概念意义是相同的，Route 在 Android中 通常指一个 Activity，在 iOS 中指一个 ViewController。所谓路由管理，就是管理页面之间如何跳转，通常也可被称为导航管理。Flutter 中的路由管理和原生开发类似，无论是 Android 还是 iOS，导航管理都会维护一个路由栈，路由入栈（push）操作对应打开一个新页面，路由出栈（pop）操作对应页面关闭操作，而路由管理主要是指如何来管理路由栈。</p><h2 id="_2-4-1-一个简单示例" tabindex="-1"><a class="header-anchor" href="#_2-4-1-一个简单示例" aria-hidden="true">#</a> 2.4.1 一个简单示例</h2><p>我们在上一节“计数器”示例的基础上，做如下修改：</p><ol><li><p>创建一个新路由，命名“NewRoute”</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">NewRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>\n      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New route&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is new route&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新路由继承自<code>StatelessWidget</code>，界面很简单，在页面中间显示一句&quot;This is new route&quot;。</p></li><li><p>在<code>_MyHomePageState.build</code>方法中的<code>Column</code>的子widget中添加一个按钮（<code>TextButton</code>） :</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Column</span><span class="token punctuation">(</span>\n  mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n    <span class="token class-name">TextButton</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;open new route&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//导航到新路由   </span>\n        <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> \n          context<span class="token punctuation">,</span>\n          <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">NewRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们添加了一个打开新路由的按钮，点击该按钮后就会打开新的路由页面，效果如图 2-9 和 2-10 所示。</p><p><img src="'+e+'" alt="图2-9"> <img src="'+p+'" alt="图2-10"></p></li></ol><h2 id="_2-4-2-materialpageroute" tabindex="-1"><a class="header-anchor" href="#_2-4-2-materialpageroute" aria-hidden="true">#</a> 2.4.2 MaterialPageRoute</h2><p><code>MaterialPageRoute</code>继承自<code>PageRoute</code>类，<code>PageRoute</code>类是一个抽象类，表示占有整个屏幕空间的一个模态路由页面，它还定义了路由构建及切换时过渡动画的相关接口及属性。<code>MaterialPageRoute</code> 是 Material组件库提供的组件，它可以针对不同平台，实现与平台页面切换动画风格一致的路由切换动画：</p><ul><li>对于 Android，当打开新页面时，新的页面会从屏幕底部滑动到屏幕顶部；当关闭页面时，当前页面会从屏幕顶部滑动到屏幕底部后消失，同时上一个页面会显示到屏幕上。</li><li>对于 iOS，当打开页面时，新的页面会从屏幕右侧边缘一直滑动到屏幕左边，直到新页面全部显示到屏幕上，而上一个页面则会从当前屏幕滑动到屏幕左侧而消失；当关闭页面时，正好相反，当前页面会从屏幕右侧滑出，同时上一个页面会从屏幕左侧滑入。</li></ul><p>下面我们介绍一下<code>MaterialPageRoute</code> 构造函数的各个参数的意义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">WidgetBuilder</span> builder<span class="token punctuation">,</span>\n    <span class="token class-name">RouteSettings</span> settings<span class="token punctuation">,</span>\n    bool maintainState <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    bool fullscreenDialog <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>builder</code> 是一个WidgetBuilder类型的回调函数，它的作用是构建路由页面的具体内容，返回值是一个widget。我们通常要实现此回调，返回新路由的实例。</li><li><code>settings</code> 包含路由的配置信息，如路由名称、是否初始路由（首页）。</li><li><code>maintainState</code>：默认情况下，当入栈一个新路由时，原来的路由仍然会被保存在内存中，如果想在路由没用的时候释放其所占用的所有资源，可以设置<code>maintainState</code>为 <code>false</code>。</li><li><code>fullscreenDialog</code>表示新的路由页面是否是一个全屏的模态对话框，在 iOS 中，如果<code>fullscreenDialog</code>为<code>true</code>，新页面将会从屏幕底部滑入（而不是水平方向）。</li></ul><blockquote><p>如果想自定义路由切换动画，可以自己继承 PageRoute 来实现，我们将在后面介绍动画时，实现一个自定义的路由组件。</p></blockquote><h2 id="_2-4-3-navigator" tabindex="-1"><a class="header-anchor" href="#_2-4-3-navigator" aria-hidden="true">#</a> 2.4.3 Navigator</h2><p><code>Navigator</code>是一个路由管理的组件，它提供了打开和退出路由页方法。<code>Navigator</code>通过一个栈来管理活动路由集合。通常当前屏幕显示的页面就是栈顶的路由。<code>Navigator</code>提供了一系列方法来管理路由栈，在此我们只介绍其最常用的两个方法：</p><h3 id="future-push-buildcontext-context-route-route" tabindex="-1"><a class="header-anchor" href="#future-push-buildcontext-context-route-route" aria-hidden="true">#</a> Future push(BuildContext context, Route route)</h3><p>将给定的路由入栈（即打开新的页面），返回值是一个<code>Future</code>对象，用以接收新路由出栈（即关闭）时的返回数据。</p><h3 id="bool-pop-buildcontext-context-result" tabindex="-1"><a class="header-anchor" href="#bool-pop-buildcontext-context-result" aria-hidden="true">#</a> bool pop(BuildContext context, [ result ])</h3><p>将栈顶路由出栈，<code>result</code> 为页面关闭时返回给上一个页面的数据。</p><p><code>Navigator</code> 还有很多其它方法，如<code>Navigator.replace</code>、<code>Navigator.popUntil</code>等，详情请参考API文档或SDK 源码注释，在此不再赘述。下面我们还需要介绍一下路由相关的另一个概念“命名路由”。</p><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h3><p>Navigator类中第一个参数为context的<strong>静态方法</strong>都对应一个Navigator的<strong>实例方法</strong>， 比如<code>Navigator.push(BuildContext context, Route route) </code>等价于<code>Navigator.of(context).push(Route route)</code> ，下面命名路由相关的方法也是一样的。</p><h2 id="_2-4-4-路由传值" tabindex="-1"><a class="header-anchor" href="#_2-4-4-路由传值" aria-hidden="true">#</a> 2.4.4 路由传值</h2><p>很多时候，在路由跳转时我们需要带一些参数，比如打开商品详情页时，我们需要带一个商品id，这样商品详情页才知道展示哪个商品信息；又比如我们在填写订单时需要选择收货地址，打开地址选择页并选择地址后，可以将用户选择的地址返回到订单页等等。下面我们通过一个简单的示例来演示新旧路由如何传参。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>我们创建一个<code>TipRoute</code>路由，它接受一个提示文本参数，负责将传入它的文本显示在页面上，另外<code>TipRoute</code>中我们添加一个“返回”按钮，点击后在返回上一个路由的同时会带上一个返回参数，下面我们看一下实现代码。</p><p><code>TipRoute</code>实现代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">TipRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">TipRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>\n    <span class="token metadata function">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>  <span class="token comment">// 接收一个text参数</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>\n      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>\n        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;提示&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      body<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n        padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n            children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n              <span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n                onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;我是返回值&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;返回&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是打开新路由<code>TipRoute</code>的代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">RouterTestRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n        onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 打开`TipRoute`，并等待返回结果</span>\n          <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n            context<span class="token punctuation">,</span>\n            <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>\n              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token class-name">TipRoute</span><span class="token punctuation">(</span>\n                  <span class="token comment">// 路由参数</span>\n                  text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;我是提示xxxx&quot;</span></span><span class="token punctuation">,</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">//输出`TipRoute`路由返回结果</span>\n          <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;路由返回值: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;打开提示页&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面代码，点击<code>RouterTestRoute</code>页的“打开提示页”按钮，会打开<code>TipRoute</code>页，运行效果如图2-11所示下：</p><p><img src="'+c+'" alt="图2-11"></p><p>需要说明：</p><ol><li><p>提示文案“我是提示xxxx”是通过<code>TipRoute</code>的<code>text</code>参数传递给新路由页的。我们可以通过等待<code>Navigator.push(…)</code>返回的<code>Future</code>来获取新路由的返回数据。</p></li><li><p>在<code>TipRoute</code>页中有两种方式可以返回到上一页；第一种方式是直接点击导航栏返回箭头，第二种方式是点击页面中的“返回”按钮。这两种返回方式的区别是前者不会返回数据给上一个路由，而后者会。下面是分别点击页面中的返回按钮和导航栏返回箭头后，<code>RouterTestRoute</code>页中<code>print</code>方法在控制台输出的内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter (27896): 路由返回值: 我是返回值\nI/flutter (27896): 路由返回值: null\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>上面介绍的是非命名路由的传值方式，命名路由的传值方式会有所不同，我们会在下面介绍命名路由时介绍。</p><h2 id="_2-4-5-命名路由" tabindex="-1"><a class="header-anchor" href="#_2-4-5-命名路由" aria-hidden="true">#</a> 2.4.5 命名路由</h2><p>所谓“命名路由”（Named Route）即有名字的路由，我们可以先给路由起一个名字，然后就可以通过路由名字直接打开新的路由了，这为路由管理带来了一种直观、简单的方式。</p><h3 id="路由表" tabindex="-1"><a class="header-anchor" href="#路由表" aria-hidden="true">#</a> 路由表</h3><p>要想使用命名路由，我们必须先提供并注册一个路由表（routing table），这样应用程序才知道哪个名字与哪个路由组件相对应。其实注册路由表就是给路由起名字，路由表的定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">WidgetBuilder</span><span class="token punctuation">&gt;</span></span> routes<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它是一个<code>Map</code>，key为路由的名字，是个字符串；value是个<code>builder</code>回调函数，用于生成相应的路由widget。我们在通过路由名字打开新路由时，应用会根据路由名字在路由表中查找到对应的<code>WidgetBuilder</code>回调函数，然后调用该回调函数生成路由widget并返回。</p><h3 id="注册路由表" tabindex="-1"><a class="header-anchor" href="#注册路由表" aria-hidden="true">#</a> 注册路由表</h3><p>路由表的注册方式很简单，我们回到之前“计数器”的示例，然后在<code>MyApp</code>类的<code>build</code>方法中找到<code>MaterialApp</code>，添加<code>routes</code>属性，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>\n  title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter Demo&#39;</span></span><span class="token punctuation">,</span>\n  theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>\n    primarySwatch<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">//注册路由表</span>\n  routes<span class="token punctuation">:</span><span class="token punctuation">{</span>\n   <span class="token string-literal"><span class="token string">&quot;new_page&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">NewRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 省略其它路由注册信息</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">,</span>\n  home<span class="token punctuation">:</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter Demo Home Page&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们就完成了路由表的注册。上面的代码中<code>home</code>路由并没有使用命名路由，如果我们也想将<code>home</code>注册为命名路由应该怎么做呢？其实很简单，直接看代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>\n  title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter Demo&#39;</span></span><span class="token punctuation">,</span>\n  initialRoute<span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">,</span> <span class="token comment">//名为&quot;/&quot;的路由作为应用的home(首页)</span>\n  theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>\n    primarySwatch<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">//注册路由表</span>\n  routes<span class="token punctuation">:</span><span class="token punctuation">{</span>\n   <span class="token string-literal"><span class="token string">&quot;new_page&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">NewRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n   <span class="token string-literal"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">MyHomePage</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Flutter Demo Home Page&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//注册首页路由</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们只需在路由表中注册一下<code>MyHomePage</code>路由，然后将其名字作为<code>MaterialApp</code>的<code>initialRoute</code>属性值即可，该属性决定应用的初始路由页是哪一个命名路由。</p><h3 id="通过路由名打开新路由页" tabindex="-1"><a class="header-anchor" href="#通过路由名打开新路由页" aria-hidden="true">#</a> 通过路由名打开新路由页</h3><p>要通过路由名称来打开新路由，可以使用<code>Navigator</code> 的<code>pushNamed</code>方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span> <span class="token function">pushNamed</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> routeName<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token class-name">Object</span> arguments<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Navigator</code> 除了<code>pushNamed</code>方法，还有<code>pushReplacementNamed</code>等其他管理命名路由的方法，读者可以自行查看API文档。接下来我们通过路由名来打开新的路由页，修改<code>TextButton</code>的<code>onPressed</code>回调代码，改为：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;new_page&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//Navigator.push(context,</span>\n  <span class="token comment">//  MaterialPageRoute(builder: (context) {</span>\n  <span class="token comment">//  return NewRoute();</span>\n  <span class="token comment">//}));  </span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>热重载应用，再次点击“open new route”按钮，依然可以打开新的路由页。</p><h3 id="命名路由参数传递" tabindex="-1"><a class="header-anchor" href="#命名路由参数传递" aria-hidden="true">#</a> 命名路由参数传递</h3><p>在Flutter最初的版本中，命名路由是不能传递参数的，后来才支持了参数；下面展示命名路由如何传递并获取路由参数：</p><p>我们先注册一个路由：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> routes<span class="token punctuation">:</span><span class="token punctuation">{</span>\n   <span class="token string-literal"><span class="token string">&quot;new_page&quot;</span></span><span class="token punctuation">:</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">EchoRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在路由页通过<code>RouteSetting</code>对象获取路由参数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">EchoRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//获取路由参数  </span>\n    <span class="token keyword">var</span> args<span class="token operator">=</span><span class="token class-name">ModalRoute</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>\n    <span class="token comment">//...省略无关代码</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在打开路由时传递参数</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;new_page&quot;</span></span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hi&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="适配" tabindex="-1"><a class="header-anchor" href="#适配" aria-hidden="true">#</a> 适配</h3><p>假设我们也想将上面路由传参示例中的<code>TipRoute</code>路由页注册到路由表中，以便也可以通过路由名来打开它。但是，由于<code>TipRoute</code>接受一个<code>text</code> 参数，我们如何在不改变<code>TipRoute</code>源码的前提下适配这种情况？其实很简单：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n   <span class="token string-literal"><span class="token string">&quot;tip2&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token class-name">TipRoute</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">ModalRoute</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-6-路由生成钩子" tabindex="-1"><a class="header-anchor" href="#_2-4-6-路由生成钩子" aria-hidden="true">#</a> 2.4.6 路由生成钩子</h2><p>假设我们要开发一个电商App，当用户没有登录时可以看店铺、商品等信息，但交易记录、购物车、用户个人信息等页面需要登录后才能看。为了实现上述功能，我们需要在打开每一个路由页前判断用户登录状态！如果每次打开路由前我们都需要去判断一下将会非常麻烦，那有什么更好的办法吗？答案是有！</p><p><code>MaterialApp</code>有一个<code>onGenerateRoute</code>属性，它在打开命名路由时可能会被调用，之所以说可能，是因为当调用<code>Navigator.pushNamed(...)</code>打开命名路由时，如果指定的路由名在路由表中已注册，则会调用路由表中的<code>builder</code>函数来生成路由组件；如果路由表中没有注册，才会调用<code>onGenerateRoute</code>来生成路由。<code>onGenerateRoute</code>回调签名如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Route</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">RouteSettings</span> settings<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了<code>onGenerateRoute</code>回调，要实现上面控制页面权限的功能就非常容易：我们放弃使用路由表，取而代之的是提供一个<code>onGenerateRoute</code>回调，然后在该回调中进行统一的权限控制，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n  onGenerateRoute<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token class-name">RouteSettings</span> settings<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t  <span class="token keyword">return</span> <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t   <span class="token class-name">String</span> routeName <span class="token operator">=</span> settings<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n       <span class="token comment">// 如果访问的路由页需要登录，但当前未登录，则直接返回登录页路由，</span>\n       <span class="token comment">// 引导用户登录；其它情况则正常打开路由。</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，<code>onGenerateRoute</code> 只会对命名路由生效。</p></blockquote><h2 id="_2-4-7-总结" tabindex="-1"><a class="header-anchor" href="#_2-4-7-总结" aria-hidden="true">#</a> 2.4.7 总结</h2><p>本章先介绍了Flutter中路由管理、传参的方式，然后又着重介绍了命名路由相关内容。在此需要说明一点，由于命名路由只是一种可选的路由管理方式，在实际开发中，读者可能心中会犹豫到底使用哪种路由管理方式。在此，根据笔者经验，建议读者最好统一使用命名路由的管理方式，这将会带来如下好处：</p><ol><li>语义化更明确。</li><li>代码更好维护；如果使用匿名路由，则必须在调用<code>Navigator.push</code>的地方创建新路由页，这样不仅需要import新路由页的dart文件，而且这样的代码将会非常分散。</li><li>可以通过<code>onGenerateRoute</code>做一些全局的路由跳转前置处理逻辑。</li></ol><p>综上所述，笔者比较建议使用命名路由，当然这并不是什么金科玉律，读者可以根据自己偏好或实际情况来决定。</p><p>另外，还有一些关于路由管理的内容我们没有介绍，比如路由MaterialApp中还有<code>navigatorObservers</code>和<code>onUnknownRoute</code>两个回调属性，前者可以监听所有路由跳转动作，后者在打开一个不存在的命名路由时会被调用，由于这些功能并不常用，而且也比较简单，我们便不再花费篇幅来介绍了，读者可以自行查看API文档。</p>',75)],l={},i=(0,a(18580).Z)(l,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);