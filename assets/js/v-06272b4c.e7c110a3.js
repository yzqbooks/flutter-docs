"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[9226],{2631:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-06272b4c","path":"/chapter11/json_model.html","title":"11.7 Json转Dart Model类","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"11.7.1 Json转Dart类","slug":"_11-7-1-json转dart类","link":"#_11-7-1-json转dart类","children":[{"level":3,"title":"自动生成Model","slug":"自动生成model","link":"#自动生成model","children":[]},{"level":3,"title":"在项目中设置 json_serializable","slug":"在项目中设置-json-serializable","link":"#在项目中设置-json-serializable","children":[]},{"level":3,"title":"以json_serializable的方式创建model类","slug":"以json-serializable的方式创建model类","link":"#以json-serializable的方式创建model类","children":[]},{"level":3,"title":"运行代码生成程序","slug":"运行代码生成程序","link":"#运行代码生成程序","children":[]}]},{"level":2,"title":"11.7.2 自动化生成模板","slug":"_11-7-2-自动化生成模板","link":"#_11-7-2-自动化生成模板","children":[{"level":3,"title":"Json_model 包","slug":"json-model-包","link":"#json-model-包","children":[]},{"level":3,"title":"使用IDE插件生成model","slug":"使用ide插件生成model","link":"#使用ide插件生成model","children":[]},{"level":3,"title":"FAQ","slug":"faq","link":"#faq","children":[]}]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":13.1,"words":3929},"filePathRelative":"chapter11/json_model.md","localizedDate":"2022年6月6日","excerpt":""}')},86938:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var t=a(6808);const p=a.p+"assets/img/11-4.83817d17.png",e=(0,t.uE)('<h1 id="_11-7-json转dart-model类" tabindex="-1"><a class="header-anchor" href="#_11-7-json转dart-model类" aria-hidden="true">#</a> 11.7 Json转Dart Model类</h1><h2 id="_11-7-1-json转dart类" tabindex="-1"><a class="header-anchor" href="#_11-7-1-json转dart类" aria-hidden="true">#</a> 11.7.1 Json转Dart类</h2><p>在实战中，后台接口往往会返回一些结构化数据，如 JSON、XML 等，如之前我们请求 Github API 的示例，它返回的数据就是 JSON 格式的字符串，为了方便我们在代码中操作 JSON，我们先将 JSON 格式的字符串转为 Dart 对象，这个可以通过 <code>dart:convert</code> 中内置的 JSON 解码器<code>json.decode()</code>来实现，该方法可以根据 JSON 字符串具体内容将其转为 List 或 Map，这样我们就可以通过他们来查找所需的值，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//一个JSON格式的用户列表字符串</span>\n<span class="token class-name">String</span> jsonStr<span class="token operator">=</span><span class="token string-literal"><span class="token string">&#39;[{&quot;name&quot;:&quot;Jack&quot;},{&quot;name&quot;:&quot;Rose&quot;}]&#39;</span></span><span class="token punctuation">;</span>`\n<span class="token comment">//将JSON字符串转为Dart对象(此处是List)</span>\n<span class="token class-name">List</span> items<span class="token operator">=</span>json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//输出第一个用户的姓名</span>\n<span class="token function">print</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>json.decode()</code> 将 JSON 字符串转为 List/Map 的方法比较简单，它没有外部依赖或其它的设置，对于小项目很方便。但当项目变大时，这种手动编写序列化逻辑可能变得难以管理且容易出错，例如有如下JSON：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john@example.com&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过调用<code>json.decode</code>方法来解码 JSON ，使用 JSON 字符串作为参数:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Howdy, ${user[&#39;</span></span>name<span class="token string-literal"><span class="token string">&#39;]}!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;We sent the verification link to ${user[&#39;</span></span>email<span class="token string-literal"><span class="token string">&#39;]}.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>json.decode()</code>仅返回一个<code>Map&lt;String, dynamic&gt;</code>，这意味着直到运行时我们才知道值的类型。 通过这种方法，我们失去了大部分静态类型语言特性：类型安全、自动补全和最重要的编译时异常。这样一来，我们的代码可能会变得非常容易出错。例如，当我们访问<code>name</code>或<code>email</code>字段时，我们输入的很快，导致字段名打错了。但由于这个 JSON 在 map 结构中，所以编译器不知道这个错误的字段名，所以编译时不会报错。</p><p>其实，这个问题在很多平台上都会遇到，而也早就有了好的解决方法即“Json Model化”，具体做法就是，通过预定义一些与 Json 结构对应的 Model 类，然后在请求到数据后再动态根据数据创建出 Model 类的实例。这样一来，在开发阶段我们使用的是 Model 类的实例，而不再是 Map/List，这样访问内部属性时就不会发生拼写错误。例如，我们可以通过引入一个简单的模型类（Model class）来解决前面提到的问题，我们称之为<code>User</code>。在User类内部，我们有：</p><ul><li>一个<code>User.fromJson</code> 构造函数, 用于从一个 map 构造出一个 <code>User</code>实例 map 结构。</li><li>一个<code>toJson</code> 方法, 将 <code>User</code> 实例转化为一个 map。</li></ul><p>这样，调用代码现在可以具有类型安全、自动补全字段（name和email）以及编译时异常。如果我们将拼写错误字段视为<code>int</code>类型而不是<code>String</code>， 那么我们的代码就不会通过编译，而不是在运行时崩溃。</p><p><strong>user.dart</strong></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n\n  <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> name <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        email <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;email&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>\n      <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>\n      <span class="token string-literal"><span class="token string">&#39;email&#39;</span></span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，序列化逻辑移到了模型本身内部。采用这种新方法，我们可以非常容易地反序列化user.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Map</span> userMap <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Howdy, </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">user<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string">!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;We sent the verification link to </span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression">user<span class="token punctuation">.</span>email</span><span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要序列化一个user，我们只是将该<code>User</code>对象传递给该<code>json.encode</code>方法。我们不需要手动调用<code>toJson</code>这个方法，因为`JSON.encode内部会自动调用。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> json <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，调用代码就不用担心JSON序列化了，但是，Model类还是必须的。在实践中，<code>User.fromJson</code>和<code>User.toJson</code>方法都需要单元测试到位，以验证正确的行为。</p><p>另外，实际场景中，JSON对象很少会这么简单，嵌套的JSON对象并不罕见，如果有什么能为我们自动处理JSON序列化，那将会非常好。幸运的是，有！</p><h3 id="自动生成model" tabindex="-1"><a class="header-anchor" href="#自动生成model" aria-hidden="true">#</a> 自动生成Model</h3>',21),o={href:"https://pub.dartlang.org/packages/json_serializable",target:"_blank",rel:"noopener noreferrer"},c=(0,t.uE)('<h3 id="在项目中设置-json-serializable" tabindex="-1"><a class="header-anchor" href="#在项目中设置-json-serializable" aria-hidden="true">#</a> 在项目中设置 json_serializable</h3><p>要包含<code>json_serializable</code>到我们的项目中，我们需要一个常规和两个<strong>开发依赖</strong>项。简而言之，<strong>开发依赖项</strong>是不包含在我们的应用程序源代码中的依赖项，它是开发过程中的一些辅助工具、脚本，和 node 中的开发依赖项相似。</p><p><strong>pubspec.yaml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">json_annotation</span><span class="token punctuation">:</span> &lt;最新版本<span class="token punctuation">&gt;</span>\n\n<span class="token key atrule">dev_dependencies</span><span class="token punctuation">:</span>\n  <span class="token key atrule">build_runner</span><span class="token punctuation">:</span> &lt;最新版本<span class="token punctuation">&gt;</span>\n  <span class="token key atrule">json_serializable</span><span class="token punctuation">:</span> &lt;最新版本<span class="token punctuation">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在您的项目根文件夹中运行 <code>flutter packages get</code> (或者在编辑器中点击 “Packages Get”) 以在项目中使用这些新的依赖项.</p><h3 id="以json-serializable的方式创建model类" tabindex="-1"><a class="header-anchor" href="#以json-serializable的方式创建model类" aria-hidden="true">#</a> 以json_serializable的方式创建model类</h3><p>让我们看看如何将我们的<code>User</code>类转换为一个<code>json_serializable</code>。为了简单起见，我们使用前面示例中的简化JSON model。</p><p><strong>user.dart</strong></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// user.g.dart 将在我们运行生成命令后自动生成</span>\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;user.g.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">///这个标注是告诉生成器，这个类是需要生成Model类的</span>\n<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>\n  <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n  <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n  <span class="token comment">//不同的类使用不同的mixin即可</span>\n  <span class="token keyword">factory</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了上面的设置，源码生成器将生成用于序列化<code>name</code>和<code>email</code>字段的JSON代码。</p><p>如果需要，自定义命名策略也很容易。例如，如果我们正在使用的API返回带有_snake_case_的对象，但我们想在我们的模型中使用_lowerCamelCase_， 那么我们可以使用@JsonKey标注：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//显式关联JSON字段名与Model属性的对应关系 </span>\n<span class="token metadata function">@JsonKey</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;registration_date_millis&#39;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">final</span> int registrationDateMillis<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行代码生成程序" tabindex="-1"><a class="header-anchor" href="#运行代码生成程序" aria-hidden="true">#</a> 运行代码生成程序</h3><p><code>json_serializable</code>第一次创建类时，您会看到与图11-4类似的错误。</p><p><img src="'+p+'" alt="图11-4"></p><p>这些错误是完全正常的，这是因为Model类的生成代码还不存在。为了解决这个问题，我们必须运行代码生成器来为我们生成序列化模板。有两种运行代码生成器的方法：</p><h4 id="一次性生成" tabindex="-1"><a class="header-anchor" href="#一次性生成" aria-hidden="true">#</a> 一次性生成</h4><p>通过在我们的项目根目录下运行:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter packages pub run build_runner build\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这触发了一次性构建，我们可以在需要时为我们的 Model 生成 json 序列化代码，它通过我们的源文件，找出需要生成 Model 类的源文件（包含@JsonSerializable 标注的）来生成对应的 .g.dart 文件。一个好的建议是将所有 Model 类放在一个单独的目录下，然后在该目录下执行命令。</p><p>虽然这非常方便，但如果我们不需要每次在Model类中进行更改时都要手动运行构建命令的话会更好。</p><h4 id="持续生成" tabindex="-1"><a class="header-anchor" href="#持续生成" aria-hidden="true">#</a> 持续生成</h4><p>使用_watcher_可以使我们的源代码生成的过程更加方便。它会监视我们项目中文件的变化，并在需要时自动构建必要的文件，我们可以通过<code>flutter packages pub run build_runner watch</code>在项目根目录下运行来启动_watcher_。只需启动一次观察器，然后它就会在后台运行，这是安全的。</p><h2 id="_11-7-2-自动化生成模板" tabindex="-1"><a class="header-anchor" href="#_11-7-2-自动化生成模板" aria-hidden="true">#</a> 11.7.2 自动化生成模板</h2><p>上面的方法有一个最大的问题就是要为每一个json写模板，这是比较枯燥的。如果有一个工具可以直接根据JSON文本生成模板，那我们就能彻底解放双手了。笔者自己用dart实现了一个脚本，它可以自动生成模板，并直接将JSON转为Model类，下面我们看看怎么做：</p><ol><li><p>定义一个&quot;模板的模板&quot;，名为&quot;template.dart&quot;：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token operator">%</span>t\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;%s.g.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token operator">%</span>s <span class="token punctuation">{</span>\n  <span class="token operator">%</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token operator">%</span>s\n  <span class="token keyword">factory</span> <span class="token operator">%</span>s<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token operator">%</span><span class="token function">sFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token operator">%</span><span class="token function">sToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板中的“%t”、“%s”为占位符，将在脚本运行时动态被替换为合适的导入头和类名。</p></li><li><p>写一个自动生成模板的脚本(mo.dart)，它可以根据指定的JSON目录，遍历生成模板，在生成时我们定义一些规则：</p><ul><li>如果JSON文件名以下划线“_”开始，则忽略此JSON文件。</li><li>复杂的JSON对象往往会出现嵌套，我们可以通过一个特殊标志来手动指定嵌套的对象（后面举例）。</li></ul><p>脚本我们通过Dart来写，源码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:path/path.dart&#39;</span></span> <span class="token operator">as</span> path<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> TAG <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\$&quot;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> SRC <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;./json&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">//JSON 目录</span>\n<span class="token keyword">const</span> DIST <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;lib/models/&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">//输出model目录</span>\n\n<span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//遍历JSON目录生成模板</span>\n  <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span>SRC<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> list <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;./template.dart&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readAsStringSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">File</span> file<span class="token punctuation">;</span>\n  list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemEntity</span><span class="token punctuation">.</span><span class="token function">isFileSync</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> paths <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">String</span> name <span class="token operator">=</span> paths<span class="token punctuation">.</span>first<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>paths<span class="token punctuation">.</span>last<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;json&quot;</span></span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token comment">//下面生成模板</span>\n      <span class="token keyword">var</span> map <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">readAsStringSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//为了避免重复导入相同的包，我们用Set来保存生成的import语句。</span>\n      <span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">StringBuffer</span> attrs <span class="token operator">=</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">(</span>map <span class="token operator">as</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token comment">//所有字段都定义为可空</span>\n        attrs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token keyword">set</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string-literal"><span class="token string">&quot;?&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attrs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attrs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attrs<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        attrs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;    &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">String</span> className <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> dist <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n        name<span class="token punctuation">,</span>\n        className<span class="token punctuation">,</span>\n        className<span class="token punctuation">,</span>\n        attrs<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        className<span class="token punctuation">,</span>\n        className<span class="token punctuation">,</span>\n        className\n      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> _import <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      _import <span class="token operator">+=</span> _import<span class="token punctuation">.</span>isEmpty <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;;&quot;</span></span><span class="token punctuation">;</span>\n      dist <span class="token operator">=</span> dist<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;%t&quot;</span></span><span class="token punctuation">,</span> _import<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//将生成的模板输出</span>\n      <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">DIST</span></span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">.dart&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAsStringSync</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">String</span> <span class="token function">changeFirstChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token punctuation">[</span>bool upper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>upper <span class="token operator">?</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n      str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//将JSON类型转为对应的dart类型</span>\n<span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">String</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  current <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">is</span> bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;bool&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">is</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;num&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">is</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Map&lt;String,dynamic&gt;&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">is</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;List&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">is</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//处理特殊标志</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">[]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> className <span class="token operator">=</span> <span class="token function">changeFirstChar</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;import &quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">className</span></span><span class="token string">.dart&quot;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;List&lt;</span><span class="token interpolation"><span class="token punctuation">${</span><span class="token expression"><span class="token function">changeFirstChar</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&gt;&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>TAG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> fileName <span class="token operator">=</span> <span class="token function">changeFirstChar</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;import &quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">fileName</span></span><span class="token string">.dart&quot;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token function">changeFirstChar</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//替换模板占位符</span>\n<span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">String</span> fmt<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  int matchIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">Match</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchIndex <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;%s&quot;</span></span><span class="token punctuation">:</span>\n          <span class="token keyword">return</span> params<span class="token punctuation">[</span>matchIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Missing parameter for string format&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Invalid format string: &quot;</span></span> <span class="token operator">+</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">replaceAllMapped</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;%s&quot;</span></span><span class="token punctuation">,</span> replace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>写一个shell(mo.sh)，将生成模板和生成model串起来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dart mo.dart\nflutter packages pub run build_runner build --delete-conflicting-outputs\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>至此，我们的脚本写好了，我们在根目录下新建一个json目录，然后把user.json移进去，然后在lib目录下创建一个models目录，用于保存最终生成的Model类。现在我们只需要一句命令即可生成Model类了:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./mo.sh  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行后，一切都将自动执行，现在好多了。但是上面脚本只是处理简单 JSON 的情况，还不能很好处理 JSON 嵌套和数组。</p><h4 id="嵌套json" tabindex="-1"><a class="header-anchor" href="#嵌套json" aria-hidden="true">#</a> 嵌套JSON</h4><p>我们定义一个person.json内容修改为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john@example.com&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;mother&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;alice@example.com&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;friends&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;Jack@example.com&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Nancy&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;Nancy@example.com&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个Person都有<code>name</code> 、<code>email</code> 、 <code>mother</code>和<code>friends</code>四个字段，由于<code>mother</code>也是一个Person，朋友是多个Person(数组)，所以我们期望生成的Model是下面这样：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;person.g.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">;</span>\n    <span class="token class-name">String</span><span class="token operator">?</span> email<span class="token punctuation">;</span>\n    <span class="token class-name">Person</span><span class="token operator">?</span> mother<span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> friends<span class="token punctuation">;</span>\n\n    <span class="token keyword">factory</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">PersonFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">PersonToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，我们只需要简单修改一下JSON，添加一些特殊标志，重新运行mo.sh即可：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john@example.com&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;mother&quot;</span><span class="token operator">:</span><span class="token string">&quot;$person&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;friends&quot;</span><span class="token operator">:</span><span class="token string">&quot;$[]person&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用美元符“$”作为特殊标志符(如果与内容冲突，可以修改mo.dart中的<code>TAG</code>常量，自定义标志符)，脚本在遇到特殊标志符后会先把相应字段转为相应的对象或对象数组，对象数组需要在标志符后面添加数组符“[]”，符号后面接具体的类型名，此例中是person。其它类型同理，加入我们给User添加一个Person类型的 <code>boss</code>字段：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;john@example.com&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;boss&quot;</span><span class="token operator">:</span><span class="token string">&quot;$person&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行mo.sh，生成的user.dart如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&quot;person.dart&quot;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;user.g.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">;</span>\n    <span class="token class-name">String</span><span class="token operator">?</span> email<span class="token punctuation">;</span>\n    <span class="token class-name">Person</span><span class="token operator">?</span> boss<span class="token punctuation">;</span>\n    \n    <span class="token keyword">factory</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>boss</code>字段已自动添加，并自动导入了“person.dart”。</p><h3 id="json-model-包" tabindex="-1"><a class="header-anchor" href="#json-model-包" aria-hidden="true">#</a> Json_model 包</h3>',42),l={href:"https://github.com/flutterchina/json_model",target:"_blank",rel:"noopener noreferrer"},i=(0,t.uE)('<p>JSON 文件如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;@meta&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// @meta 可以定制单个 json 的生成规则，默认使用全局配置</span>\n    <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;test_dir/profile.dart&quot;</span> <span class="token comment">// 导入其它文件</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;comments&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;名字&quot;</span> <span class="token comment">// 给 &quot;name&quot; 字段添加注释</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;nullable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 字段默认非可空，会生成 late </span>\n    <span class="token property">&quot;ignore&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否跳过当前 JSON 的 model 类生成</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;@JsonKey(ignore: true) Profile?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;profile&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;@JsonKey(name: &#39;+1&#39;) int?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;loved&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wendux&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;father&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$user&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;friends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$[]user&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$[]String&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;age?&quot;</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token comment">// 指定 age 字段可空</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的 Model 类如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;test_dir/profile.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;user.g.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@JsonKey</span><span class="token punctuation">(</span>ignore<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">Profile</span><span class="token operator">?</span> profile<span class="token punctuation">;</span>\n  <span class="token metadata function">@JsonKey</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;+1&#39;</span></span><span class="token punctuation">)</span> int<span class="token operator">?</span> loved<span class="token punctuation">;</span>\n  <span class="token comment">//名字</span>\n  late <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n  late <span class="token class-name">User</span> father<span class="token punctuation">;</span>\n  late <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> friends<span class="token punctuation">;</span>\n  late <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keywords<span class="token punctuation">;</span>\n  num<span class="token operator">?</span> age<span class="token punctuation">;</span>\n  \n  <span class="token keyword">factory</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用ide插件生成model" tabindex="-1"><a class="header-anchor" href="#使用ide插件生成model" aria-hidden="true">#</a> 使用IDE插件生成model</h3>',5),u={href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fflutterchina%2Fjson_model",target:"_blank",rel:"noopener noreferrer"},r={href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fflutterchina%2Fjson_model",target:"_blank",rel:"noopener noreferrer"},k={href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fflutterchina%2Fjson_model",target:"_blank",rel:"noopener noreferrer"},d={href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fflutterchina%2Fjson_model",target:"_blank",rel:"noopener noreferrer"},m=(0,t._)("h3",{id:"faq",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),(0,t.Uk)(" FAQ")],-1),v=(0,t._)("p",null,[(0,t.Uk)("很多人可能会问 Flutter 中有没有像 Java 开发中的 Gson/Jackson 一样的Json序列化类库？答案是没有！因为这样的库需要使用运行时反射，这在 Flutter 中是禁用的。运行时反射会干扰 Dart 的 "),(0,t._)("em",null,"tree shaking"),(0,t.Uk)("，使用_tree shaking_，可以在 release 版中“去除”未使用的代码，这可以显著优化应用程序的大小。由于反射会默认应用到所有代码，因此_tree shaking_ 会很难工作，因为在启用反射时很难知道哪些代码未被使用，因此冗余代码很难剥离，所以 Flutter 中禁用了 Dart 的反射功能，而正因如此也就无法实现动态转化 Model 的功能。")],-1),g={},b=(0,a(18580).Z)(g,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[(0,t.Uk)("尽管还有其他库可用，但在本书中，我们介绍一下官方推荐的"),(0,t._)("a",o,[(0,t.Uk)("json_serializable package"),(0,t.Wm)(a)]),(0,t.Uk)("包。 它是一个自动化的源代码生成器，可以在开发阶段为我们生成 JSON 序列化模板，这样一来，由于序列化代码不再由我们手写和维护，我们将运行时产生 JSON 序列化异常的风险降至最低。")]),c,(0,t._)("p",null,[(0,t.Uk)("我们上面实现的脚本只是一个乞丐版，还有很多功能不支持，比如默认生成的变量都是可空类型、不支持导入其它的dart文件、不支持生成注释等等，为此，笔者专门发布了一个功能完成的 "),(0,t._)("a",l,[(0,t.Uk)("Json_model"),(0,t.Wm)(a)]),(0,t.Uk)("包，具备灵活的的配置和自定义功能，开发者把该包加入开发依赖后，便可以用一条命令，根据Json文件生成Dart类，下面是一个简单的功能演示：")]),i,(0,t._)("p",null,[(0,t.Uk)("目前Android Studio(或IntelliJ)有几个插件，可以将json文件转成Model类，但插件质量参差不齐，甚至还有一些沾染上了抄袭风波，故笔者在此不做优先推荐，读者有兴趣可以自行了解。但是，我们还是要了解一下IDE插件和"),(0,t._)("a",u,[(0,t.Uk)("Json_model"),(0,t.Wm)(a)]),(0,t.Uk)("的优劣：")]),(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("a",r,[(0,t.Uk)("Json_model"),(0,t.Wm)(a)]),(0,t.Uk)("需要单独维护一个存放Json文件的文件夹，如果有改动，只需修改Json文件便可重新生成Model类；而IDE插件一般需要用户手动将Json内容拷贝复制到一个输入框中，这样生成之后Json文件没有存档的化，之后要改动就需要手动。")]),(0,t._)("li",null,[(0,t._)("a",k,[(0,t.Uk)("Json_model"),(0,t.Wm)(a)]),(0,t.Uk)("可以手动指定某个字段引用的其它Model类，可以避免生成重复的类；而IDE插件一般会为每一个Json文件中所有嵌套对象都单独生成一个Model类，即使这些嵌套对象可能在其它Model类中已经生成过。")]),(0,t._)("li",null,[(0,t._)("a",d,[(0,t.Uk)("Json_model"),(0,t.Wm)(a)]),(0,t.Uk)(" 提供了命令行转化方式，可以方便集成到CI等非UI环境的场景。")])]),m,v])}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);