"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[1364],{61735:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-5b4bea0d","path":"/chapter10/custom_paint.html","title":"10.4 CustomPaint 与 Canvas","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"CustomPaint","slug":"custompaint","link":"#custompaint","children":[]},{"level":3,"title":"CustomPainter","slug":"custompainter","link":"#custompainter","children":[]},{"level":3,"title":"画笔Paint","slug":"画笔paint","link":"#画笔paint","children":[]},{"level":3,"title":"示例：五子棋/盘","slug":"示例-五子棋-盘","link":"#示例-五子棋-盘","children":[]},{"level":3,"title":"性能","slug":"性能","link":"#性能","children":[]},{"level":3,"title":"防止意外重绘","slug":"防止意外重绘","link":"#防止意外重绘","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.82,"words":2045},"filePathRelative":"chapter10/custom_paint.md","localizedDate":"2022年6月6日","excerpt":""}')},81e3:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6808);const e=a.p+"assets/img/10-3.3a4261bf.png",p=a.p+"assets/img/10-4.59204387.png",c=[(0,t.uE)('<h1 id="_10-4-custompaint-与-canvas" tabindex="-1"><a class="header-anchor" href="#_10-4-custompaint-与-canvas" aria-hidden="true">#</a> 10.4 CustomPaint 与 Canvas</h1><p>对于一些复杂或不规则的UI，我们可能无法通过组合其它组件的方式来实现，比如我们需要一个正六边形、一个渐变的圆形进度条、一个棋盘等。当然，有时候我们可以使用图片来实现，但在一些需要动态交互的场景静态图片也是实现不了的，比如要实现一个手写输入面板，这时，我们就需要来自己绘制UI外观。</p><p>几乎所有的UI系统都会提供一个自绘UI的接口，这个接口通常会提供一块2D画布<code>Canvas</code>，<code>Canvas</code>内部封装了一些基本绘制的API，开发者可以通过<code>Canvas</code>绘制各种自定义图形。在Flutter中，提供了一个<code>CustomPaint</code> 组件，它可以结合画笔<code>CustomPainter</code>来实现自定义图形绘制。</p><h3 id="custompaint" tabindex="-1"><a class="header-anchor" href="#custompaint" aria-hidden="true">#</a> CustomPaint</h3><p>我们看看<code>CustomPaint</code>构造函数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">CustomPaint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Key</span> key<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>painter<span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>foregroundPainter<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>isComplex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> \n  <span class="token keyword">this</span><span class="token punctuation">.</span>willChange <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> \n  <span class="token class-name">Widget</span> child<span class="token punctuation">,</span> <span class="token comment">//子节点，可以为空</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>painter</code>: 背景画笔，会显示在子节点后面;</li><li><code>foregroundPainter</code>: 前景画笔，会显示在子节点前面</li><li><code>size</code>：当child为null时，代表默认绘制区域大小，如果有child则忽略此参数，画布尺寸则为child尺寸。如果有child但是想指定画布为特定大小，可以使用SizeBox包裹CustomPaint实现。</li><li><code>isComplex</code>：是否复杂的绘制，如果是，Flutter会应用一些缓存策略来减少重复渲染的开销。</li><li><code>willChange</code>：和<code>isComplex</code>配合使用，当启用缓存时，该属性代表在下一帧中绘制是否会改变。</li></ul><p>可以看到，绘制时我们需要提供前景或背景画笔，两者也可以同时提供。我们的画笔需要继承<code>CustomPainter</code>类，我们在画笔类中实现真正的绘制逻辑。</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><p>如果<code>CustomPaint</code>有子节点，为了避免子节点不必要的重绘并提高性能，通常情况下都会将子节点包裹在<code>RepaintBoundary </code>组件中，这样会在绘制时就会创建一个新的绘制层（Layer），其子组件将在新的Layer上绘制，而父组件将在原来Layer上绘制，也就是说<code>RepaintBoundary</code> 子组件的绘制将独立于父组件的绘制，<code>RepaintBoundary</code>会隔离其子节点和<code>CustomPaint</code>本身的绘制边界。示例如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>\n  size<span class="token punctuation">:</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//指定画布大小</span>\n  painter<span class="token punctuation">:</span> <span class="token class-name">MyPainter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">RepaintBoundary</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custompainter" tabindex="-1"><a class="header-anchor" href="#custompainter" aria-hidden="true">#</a> CustomPainter</h3><p><code>CustomPainter</code>中提定义了一个虚函数<code>paint</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void paint(Canvas canvas, Size size);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>paint</code>有两个参数:</p><ul><li><p><code>Canvas</code>：一个画布，包括各种绘制方法，我们列出一下常用的方法：</p><table><thead><tr><th>API名称</th><th>功能</th></tr></thead><tbody><tr><td>drawLine</td><td>画线</td></tr><tr><td>drawPoint</td><td>画点</td></tr><tr><td>drawPath</td><td>画路径</td></tr><tr><td>drawImage</td><td>画图像</td></tr><tr><td>drawRect</td><td>画矩形</td></tr><tr><td>drawCircle</td><td>画圆</td></tr><tr><td>drawOval</td><td>画椭圆</td></tr><tr><td>drawArc</td><td>画圆弧</td></tr></tbody></table></li><li><p><code>Size</code>：当前绘制区域大小。</p></li></ul><h3 id="画笔paint" tabindex="-1"><a class="header-anchor" href="#画笔paint" aria-hidden="true">#</a> 画笔Paint</h3><p>现在画布有了，我们最后还缺一个画笔，Flutter提供了<code>Paint</code>类来实现画笔。在<code>Paint</code>中，我们可以配置画笔的各种属性如粗细、颜色、样式等。如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建一个画笔并配置其属性</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span>isAntiAlias <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//是否抗锯齿</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>fill <span class="token comment">//画笔样式：填充</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0x77cdb175</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画笔颜色</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的配置属性读者可以参考Paint类定义。</p><h3 id="示例-五子棋-盘" tabindex="-1"><a class="header-anchor" href="#示例-五子棋-盘" aria-hidden="true">#</a> 示例：五子棋/盘</h3><p>下面我们通过一个五子棋游戏中棋盘和棋子的绘制来演示自绘UI的过程，首先我们看一下我们的目标效果，如图10-3所示：</p><p><img src="'+e+'" alt="图10-3"></p><p>代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">CustomPaintRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">CustomPaintRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>\n        size<span class="token punctuation">:</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//指定画布大小</span>\n        painter<span class="token punctuation">:</span> <span class="token class-name">MyPainter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyPainter</span> <span class="token keyword">extends</span> <span class="token class-name">CustomPainter</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;paint&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero <span class="token operator">&amp;</span> size<span class="token punctuation">;</span>\n    <span class="token comment">//画棋盘</span>\n    <span class="token function">drawChessboard</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//画棋子</span>\n    <span class="token function">drawPieces</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 返回false, 后面介绍</span>\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">shouldRepaint</span><span class="token punctuation">(</span><span class="token class-name">CustomPainter</span> oldDelegate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先实现棋盘绘制：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">drawChessboard</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Rect</span> rect<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//棋盘背景</span>\n  <span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>isAntiAlias <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>fill <span class="token comment">//填充</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFDCC48C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//画棋盘网格</span>\n  paint\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke <span class="token comment">//线</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black38\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//画横线</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    double dy <span class="token operator">=</span> rect<span class="token punctuation">.</span>top <span class="token operator">+</span> rect<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">15</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>\n    canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>right<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    double dx <span class="token operator">=</span> rect<span class="token punctuation">.</span>left <span class="token operator">+</span> rect<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">15</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>\n    canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再实现棋子绘制：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//画棋子</span>\n<span class="token keyword">void</span> <span class="token function">drawPieces</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">Rect</span> rect<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  double eWidth <span class="token operator">=</span> rect<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">15</span><span class="token punctuation">;</span>\n  double eHeight <span class="token operator">=</span> rect<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">15</span><span class="token punctuation">;</span>\n  <span class="token comment">//画一个黑子</span>\n  <span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>fill\n    <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span>\n  <span class="token comment">//画一个黑子</span>\n  canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>\n    <span class="token class-name">Offset</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>center<span class="token punctuation">.</span>dx <span class="token operator">-</span> eWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span>center<span class="token punctuation">.</span>dy <span class="token operator">-</span> eHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">min</span><span class="token punctuation">(</span>eWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> eHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    paint<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//画一个白子</span>\n  paint<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">;</span>\n  canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>\n    <span class="token class-name">Offset</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>center<span class="token punctuation">.</span>dx <span class="token operator">+</span> eWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span>center<span class="token punctuation">.</span>dy <span class="token operator">-</span> eHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">min</span><span class="token punctuation">(</span>eWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> eHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    paint<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>绘制是比较昂贵的操作，所以我们在实现自绘控件时应该考虑到性能开销，下面是两条关于性能优化的建议：</p><ul><li><p>尽可能的利用好<code>shouldRepaint</code>返回值；在UI树重新build时，控件在绘制前都会先调用该方法以确定是否有必要重绘；假如我们绘制的UI不依赖外部状态，即外部状态改变不会影响我们的UI外观，那么就应该返回<code>false</code>；如果绘制依赖外部状态，那么我们就应该在<code>shouldRepaint</code>中判断依赖的状态是否改变，如果已改变则应返回<code>true</code>来重绘，反之则应返回<code>false</code>不需要重绘。</p></li><li><p>绘制尽可能多的分层；在上面五子棋的示例中，我们将棋盘和棋子的绘制放在了一起，这样会有一个问题：由于棋盘始终是不变的，用户每次落子时变的只是棋子，但是如果按照上面的代码来实现，每次绘制棋子时都要重新绘制一次棋盘，这是没必要的。优化的方法就是将棋盘单独抽为一个组件，并设置其<code>shouldRepaint</code>回调值为<code>false</code>，然后将棋盘组件作为背景。然后将棋子的绘制放到另一个组件中，这样每次落子时只需要绘制棋子。</p></li></ul><h3 id="防止意外重绘" tabindex="-1"><a class="header-anchor" href="#防止意外重绘" aria-hidden="true">#</a> 防止意外重绘</h3><p>我们在上例的基础上添加一个 ElevatedButton，点击后什么也不做：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CustomPaintRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">CustomPaintRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n        mainAxisSize<span class="token punctuation">:</span> <span class="token class-name">MainAxisSize</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span>\n        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>\n            size<span class="token punctuation">:</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//指定画布大小</span>\n            painter<span class="token punctuation">:</span> <span class="token class-name">MyPainter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token comment">//添加一个刷新button</span>\n          <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;刷新&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后我们点击“刷新”按钮，运行后如图10-4所示：</p><p><img src="'+p+'" alt="图10-4"></p><p>发现日志面板输出了很多 “paint”，也就是说在点击按钮的时候发生了多次重绘。奇怪，<code>shouldRepaint</code> 我们返回的是false，并且点击刷新按钮也不会触发页面重新构建，那是什么导致的重绘呢？要彻底弄清楚这个问题得等到第十四章中介绍 Flutter 绘制原理时才行，现在读者可以简单认为，刷新按钮的画布和CustomPaint的画布是同一个，刷新按钮点击时会执行一个水波动画，水波动画执行过程中画布会不停的刷新，所以就导致了CustomPaint 不停的重绘。要解决这个问题的方案很简单，给刷新按钮 或 CustomPaint 任意一个添加一个 RepaintBoundary 父组件即可，现在可以先简单认为这样做可以生成一个新的画布:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">RepaintBoundary</span><span class="token punctuation">(</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>\n    size<span class="token punctuation">:</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//指定画布大小</span>\n    painter<span class="token punctuation">:</span> <span class="token class-name">MyPainter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token comment">// 或者给刷新按钮添加RepaintBoundary</span>\n<span class="token comment">// RepaintBoundary(child: ElevatedButton(onPressed: () {}, child: Text(&quot;刷新&quot;)))</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>RepaintBoundary 的具体原理我们将在第十四章中详细介绍。</p></blockquote><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>自绘控件非常强大，理论上可以实现任何2D图形外观，实际上Flutter提供的所有组件最终都是通过调用Canvas绘制出来的，只不过绘制的逻辑被封装起来了，读者有兴趣可以查看具有外观样式的组件源码，找到其对应的<code>RenderObject</code>对象，如<code>Text</code>对应的<code>RenderParagraph</code>对象最终会通过<code>Canvas</code>实现文本绘制逻辑。下一节我们会再通过一个自绘的圆形背景渐变进度条的实例来帮助读者加深印象。</p>',42)],o={},l=(0,a(18580).Z)(o,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);