"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[8398],{49531:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-1f0462b7","path":"/chapter9/intro.html","title":"9.1 Flutter动画简介","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Flutter中动画抽象","slug":"flutter中动画抽象","link":"#flutter中动画抽象","children":[]},{"level":3,"title":"Animation","slug":"animation","link":"#animation","children":[]},{"level":3,"title":"Curve","slug":"curve","link":"#curve","children":[]},{"level":3,"title":"AnimationController","slug":"animationcontroller","link":"#animationcontroller","children":[]},{"level":3,"title":"Tween","slug":"tween","link":"#tween","children":[]},{"level":3,"title":"lerp","slug":"lerp","link":"#lerp","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":9.3,"words":2791},"filePathRelative":"chapter9/intro.md","localizedDate":"2022年6月6日","excerpt":""}')},48531:(n,a,s)=>{s.r(a),s.d(a,{default:()=>h});var e=s(6808);const t=(0,e.uE)('<h1 id="_9-1-flutter动画简介" tabindex="-1"><a class="header-anchor" href="#_9-1-flutter动画简介" aria-hidden="true">#</a> 9.1 Flutter动画简介</h1><p>在任何系统的UI框架中，动画实现的原理都是相同的，即：在一段时间内，快速地多次改变UI外观；由于人眼会产生视觉暂留，所以最终看到的就是一个“连续”的动画，这和电影的原理是一样的。我们将UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），即每秒的动画帧数。很明显，帧率越高则动画就会越流畅！一般情况下，对于人眼来说，动画帧率超过16 FPS，就基本能看了，超过 32 FPS就会感觉相对平滑，而超过 32 FPS，大多数人基本上就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现 60FPS 的，这和原生应用能达到的帧率是基本是持平的。</p><h3 id="flutter中动画抽象" tabindex="-1"><a class="header-anchor" href="#flutter中动画抽象" aria-hidden="true">#</a> Flutter中动画抽象</h3><p>为了方便开发者创建动画，不同的UI系统对动画都进行了一些抽象，比如在 Android 中可以通过XML来描述一个动画然后设置给View。Flutter中也对动画进行了抽象，主要涉及 Animation、Curve、Controller、Tween这四个角色，它们一起配合来完成一个完整动画，下面我们一一来介绍它们。</p><h3 id="animation" tabindex="-1"><a class="header-anchor" href="#animation" aria-hidden="true">#</a> Animation</h3><p><code>Animation</code>是一个抽象类，它本身和UI渲染没有任何关系，而它主要的功能是保存动画的插值和状态；其中一个比较常用的<code>Animation</code>类是<code>Animation&lt;double&gt;</code>。<code>Animation</code>对象是一个在一段时间内依次生成一个区间(Tween)之间值的类。<code>Animation</code>对象在整个动画执行过程中输出的值可以是线性的、曲线的、一个步进函数或者任何其他曲线函数等等，这由<code>Curve</code>来决定。 根据<code>Animation</code>对象的控制方式，动画可以正向运行（从起始状态开始，到终止状态结束），也可以反向运行，甚至可以在中间切换方向。<code>Animation</code>还可以生成除<code>double</code>之外的其他类型值，如：<code>Animation&lt;Color&gt;</code> 或<code> Animation&lt;Size&gt;</code>。在动画的每一帧中，我们可以通过<code>Animation</code>对象的<code>value</code>属性获取动画的当前状态值。</p><h4 id="动画通知" tabindex="-1"><a class="header-anchor" href="#动画通知" aria-hidden="true">#</a> 动画通知</h4><p>我们可以通过<code>Animation</code>来监听动画每一帧以及执行状态的变化，<code>Animation</code>有如下两个方法：</p><ol><li><code>addListener()</code>；它可以用于给<code>Animation</code>添加帧监听器，在每一帧都会被调用。帧监听器中最常见的行为是改变状态后调用<code>setState()</code>来触发UI重建。</li><li><code>addStatusListener()</code>；它可以给<code>Animation</code>添加“动画状态改变”监听器；动画开始、结束、正向或反向（见<code>AnimationStatus</code>定义）时会调用状态改变的监听器。</li></ol><p>读者在此只需要知道帧监听器和状态监听器的区别，在后面的章节中我们将会举例说明。</p><h3 id="curve" tabindex="-1"><a class="header-anchor" href="#curve" aria-hidden="true">#</a> Curve</h3><p>动画过程可以是匀速的、匀加速的或者先加速后减速等。Flutter中通过<code>Curve</code>（曲线）来描述动画过程，我们把匀速动画称为线性的(Curves.linear)，而非匀速动画称为非线性的。</p><p>我们可以通过<code>CurvedAnimation</code>来指定动画的曲线，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">CurvedAnimation</span> curve <span class="token operator">=</span>\n    <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> controller<span class="token punctuation">,</span> curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>easeIn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',14),o=(0,e._)("code",null,"CurvedAnimation",-1),c=(0,e._)("code",null,"AnimationController",-1),l=(0,e._)("code",null,"Animation<double>",-1),p=(0,e._)("code",null,"CurvedAnimation",-1),i=(0,e._)("code",null,"AnimationController",-1),d=(0,e._)("code",null,"Curve",-1),r=(0,e._)("code",null," Curves.easeIn",-1),u={href:"https://docs.flutter.io/flutter/animation/Curves-class.html",target:"_blank",rel:"noopener noreferrer"},k=(0,e.uE)("<table><thead><tr><th>Curves曲线</th><th>动画过程</th></tr></thead><tbody><tr><td>linear</td><td>匀速的</td></tr><tr><td>decelerate</td><td>匀减速</td></tr><tr><td>ease</td><td>开始加速，后面减速</td></tr><tr><td>easeIn</td><td>开始慢，后面快</td></tr><tr><td>easeOut</td><td>开始快，后面慢</td></tr><tr><td>easeInOut</td><td>开始慢，然后加速，最后再减速</td></tr></tbody></table>",1),m={href:"https://docs.flutter.io/flutter/animation/Curves-class.html",target:"_blank",rel:"noopener noreferrer"},v=(0,e.uE)('<p>当然我们也可以创建自己Curve，例如我们定义一个正弦曲线：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ShakeCurve</span> <span class="token keyword">extends</span> <span class="token class-name">Curve</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  double <span class="token function">transform</span><span class="token punctuation">(</span>double t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t <span class="token operator">*</span> math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="animationcontroller" tabindex="-1"><a class="header-anchor" href="#animationcontroller" aria-hidden="true">#</a> AnimationController</h3><p><code>AnimationController</code>用于控制动画，它包含动画的启动<code>forward()</code>、停止<code>stop()</code> 、反向播放 <code>reverse()</code>等方法。<code>AnimationController</code>会在动画的每一帧，就会生成一个新的值。默认情况下，<code>AnimationController</code>在给定的时间段内线性的生成从 0.0 到1.0（默认区间）的数字。 例如，下面代码创建一个<code>Animation</code>对象（但不会启动动画）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">AnimationController</span> controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n  duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AnimationController</code>生成数字的区间可以通过<code>lowerBound</code>和<code>upperBound</code>来指定，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">AnimationController</span> controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span> \n duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n lowerBound<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>\n upperBound<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">,</span>\n vsync<span class="token punctuation">:</span> <span class="token keyword">this</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AnimationController</code>派生自<code>Animation&lt;double&gt;</code>，因此可以在需要<code>Animation</code>对象的任何地方使用。 但是，<code>AnimationController</code>具有控制动画的其他方法，例如<code>forward()</code>方法可以启动正向动画，<code>reverse()</code>可以启动反向动画。在动画开始执行后开始生成动画帧，屏幕每刷新一次就是一个动画帧，在动画的每一帧，会随着根据动画的曲线来生成当前的动画值（<code>Animation.value</code>），然后根据当前的动画值去构建UI，当所有动画帧依次触发时，动画值会依次改变，所以构建的UI也会依次变化，所以最终我们可以看到一个完成的动画。 另外在动画的每一帧，<code>Animation</code>对象会调用其帧监听器，等动画状态发生改变时（如动画结束）会调用状态改变监听器。</p><p><code>duration</code>表示动画执行的时长，通过它我们可以控制动画的速度。</p><blockquote><p><strong>注意</strong>： 在某些情况下，动画值可能会超出<code>AnimationController</code>的[0.0，1.0]的范围，这取决于具体的曲线。例如，<code>fling()</code>函数可以根据我们手指滑动（甩出）的速度(velocity)、力量(force)等来模拟一个手指甩出动画，因此它的动画值可以在[0.0，1.0]范围之外 。也就是说，根据选择的曲线，<code>CurvedAnimation</code>的输出可以具有比输入更大的范围。例如，Curves.elasticIn等弹性曲线会生成大于或小于默认范围的值。</p></blockquote><h4 id="ticker" tabindex="-1"><a class="header-anchor" href="#ticker" aria-hidden="true">#</a> Ticker</h4><p>当创建一个<code>AnimationController</code>时，需要传递一个<code>vsync</code>参数，它接收一个<code>TickerProvider</code>类型的对象，它的主要职责是创建<code>Ticker</code>，定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TickerProvider</span> <span class="token punctuation">{</span>\n  <span class="token comment">//通过一个回调创建一个Ticker</span>\n  <span class="token class-name">Ticker</span> <span class="token function">createTicker</span><span class="token punctuation">(</span><span class="token class-name">TickerCallback</span> onTick<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flutter 应用在启动时都会绑定一个<code>SchedulerBinding</code>，通过<code>SchedulerBinding</code>可以给每一次屏幕刷新添加回调，而<code>Ticker</code>就是通过<code>SchedulerBinding</code>来添加屏幕刷新回调，这样一来，每次屏幕刷新都会调用<code>TickerCallback</code>。使用<code>Ticker</code>(而不是<code>Timer</code>)来驱动动画会防止屏幕外动画（动画的UI不在当前屏幕时，如锁屏时）消耗不必要的资源，因为Flutter中屏幕刷新时会通知到绑定的<code>SchedulerBinding</code>，而<code>Ticker</code>是受<code>SchedulerBinding</code>驱动的，由于锁屏后屏幕会停止刷新，所以<code>Ticker</code>就不会再触发。</p><p>通常我们会将<code>SingleTickerProviderStateMixin</code>添加到<code>State</code>的定义中，然后将State对象作为<code>vsync</code>的值，这在后面的例子中可以见到。</p><h3 id="tween" tabindex="-1"><a class="header-anchor" href="#tween" aria-hidden="true">#</a> Tween</h3><p>默认情况下，<code>AnimationController</code>对象值的范围是[0.0，1.0]。如果我们需要构建UI的动画值在不同的范围或不同的数据类型，则可以使用<code>Tween</code>来添加映射以生成不同的范围或数据类型的值。例如，像下面示例，<code>Tween</code>生成[-200.0，0.0]的值：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">Tween</span> doubleTween <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">200.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Tween</code>构造函数需要<code>begin</code>和<code>end</code>两个参数。<code>Tween</code>的唯一职责就是定义从输入范围到输出范围的映射。输入范围通常为[0.0，1.0]，但这不是必须的，我们可以自定义需要的范围。</p><p><code>Tween</code>继承自<code>Animatable&lt;T&gt;</code>，而不是继承自<code>Animation&lt;T&gt;</code>，<code>Animatable</code>中主要定义动画值的映射规则。</p><p>下面我们看一个ColorTween将动画输入范围映射为两种颜色值之间过渡输出的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">Tween</span> colorTween <span class="token operator">=</span>\n    <span class="token class-name">ColorTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>transparent<span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black54<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Tween</code>对象不存储任何状态，相反，它提供了<code>evaluate(Animation&lt;double&gt; animation)</code>方法，它可以获取动画当前映射值。 <code>Animation</code>对象的当前值可以通过<code>value()</code>方法取到。<code>evaluate</code>函数还执行一些其它处理，例如分别确保在动画值为0.0和1.0时返回开始和结束状态。</p><h4 id="tween-animate" tabindex="-1"><a class="header-anchor" href="#tween-animate" aria-hidden="true">#</a> Tween.animate</h4><p>要使用 Tween 对象，需要调用其<code>animate()</code>方法，然后传入一个控制器对象。例如，以下代码在 500 毫秒内生成从 0 到 255 的整数值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">AnimationController</span> controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n  duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n  vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> alpha <span class="token operator">=</span> <span class="token class-name">IntTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意<code>animate()</code>返回的是一个<code>Animation</code>，而不是一个<code>Animatable</code>。</p><p>以下示例构建了一个控制器、一条曲线和一个 Tween：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">AnimationController</span> controller <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>\n  duration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>milliseconds<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n  vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> <span class="token class-name">Animation</span> curve <span class="token operator">=</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> controller<span class="token punctuation">,</span> curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>easeOut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> alpha <span class="token operator">=</span> <span class="token class-name">IntTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>curve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lerp" tabindex="-1"><a class="header-anchor" href="#lerp" aria-hidden="true">#</a> lerp</h3><p>动画的原理其实就是每一帧绘制不同的内容，一般都是指定起始和结束状态，然后在一段时间内从起始状态逐渐变为结束状态，而具体某一帧的状态值会根据动画的进度来算出，因此，Flutter 中给有可能会做动画的一些状态属性都定义了静态的 lerp 方法（线性插值），比如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//a 为起始颜色，b为终止颜色，t为当前动画的进度[0,1]</span>\n<span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">lerp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>lerp 的计算一般遵循： 返回值 = a + (b - a) * t，其它拥有 lerp 方法的类：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Size.lerp(a, b, t)</span>\n<span class="token comment">// Rect.lerp(a, b, t)</span>\n<span class="token comment">// Offset.lerp(a, b, t)</span>\n<span class="token comment">// Decoration.lerp(a, b, t)</span>\n<span class="token comment">// Tween.lerp(t) //起始状态和终止状态在构建 Tween 的时候已经指定了</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，lerp 是<strong>线性</strong>插值，意思是返回值和动画进度t是成<strong>一次函数</strong>（y = kx + b）关系，因为一次函数的图像是一条直线，所以叫线性插值。如果我们想让动画按照一个曲线来执行，我们可以对 t 进行映射，比如要实现匀加速效果，则 t&#39; = at²+bt+c，然后指定加速度 a 和 b 即可（大多数情况下需保证 t&#39; 的取值范围在[0,1]，当然也有一些情况可能会超出该取值范围，比如弹簧（bounce）效果），而不同 Curve 可以按照不同曲线执行动画的的原理本质上就是对 t 按照不同映射公式进行映射。</p>',35),b={},h=(0,s(18580).Z)(b,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[o,(0,e.Uk)("和"),c,(0,e.Uk)("（下面介绍）都是"),l,(0,e.Uk)("类型。"),p,(0,e.Uk)("可以通过包装"),i,(0,e.Uk)("和"),d,(0,e.Uk)("生成一个新的动画对象 ，我们正是通过这种方式来将动画和动画执行的曲线关联起来的。我们指定动画的曲线为"),r,(0,e.Uk)("，它表示动画开始时比较慢，结束时比较快。 "),(0,e._)("a",u,[(0,e.Uk)("Curves"),(0,e.Wm)(s)]),(0,e.Uk)(" 类是一个预置的枚举类，定义了许多常用的曲线，下面列几种常用的：")]),k,(0,e._)("p",null,[(0,e.Uk)("除了上面列举的， "),(0,e._)("a",m,[(0,e.Uk)("Curves"),(0,e.Wm)(s)]),(0,e.Uk)(" 类中还定义了许多其它的曲线，在此便不一一介绍，读者可以自行查看Curves类定义。")]),v])}]])},18580:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);