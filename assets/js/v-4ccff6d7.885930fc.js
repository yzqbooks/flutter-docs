"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[4413],{9837:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-4ccff6d7","path":"/chapter5/decoratedbox.html","title":"5.2 装饰容器DecoratedBox","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"BoxDecoration","slug":"boxdecoration","link":"#boxdecoration","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.61,"words":483},"filePathRelative":"chapter5/decoratedbox.md","localizedDate":"2022年6月6日","excerpt":""}')},44014:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var e=a(6808);const t=a.p+"assets/img/5-2.69b5c99a.png",o=[(0,e.uE)('<h1 id="_5-2-装饰容器decoratedbox" tabindex="-1"><a class="header-anchor" href="#_5-2-装饰容器decoratedbox" aria-hidden="true">#</a> 5.2 装饰容器DecoratedBox</h1><p><code>DecoratedBox</code>可以在其子组件绘制前(或后)绘制一些装饰（Decoration），如背景、边框、渐变等。<code>DecoratedBox</code>定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> <span class="token class-name">DecoratedBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Decoration</span> decoration<span class="token punctuation">,</span>\n  <span class="token class-name">DecorationPosition</span> position <span class="token operator">=</span> <span class="token class-name">DecorationPosition</span><span class="token punctuation">.</span>background<span class="token punctuation">,</span>\n  <span class="token class-name">Widget</span><span class="token operator">?</span> child\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>decoration</code>：代表将要绘制的装饰，它的类型为<code>Decoration</code>。<code>Decoration</code>是一个抽象类，它定义了一个接口 <code>createBoxPainter()</code>，子类的主要职责是需要通过实现它来创建一个画笔，该画笔用于绘制装饰。</li><li><code>position</code>：此属性决定在哪里绘制<code>Decoration</code>，它接收<code>DecorationPosition</code>的枚举类型，该枚举类有两个值： <ul><li><code>background</code>：在子组件之后绘制，即背景装饰。</li><li><code>foreground</code>：在子组件之上绘制，即前景。</li></ul></li></ul><h3 id="boxdecoration" tabindex="-1"><a class="header-anchor" href="#boxdecoration" aria-hidden="true">#</a> BoxDecoration</h3><p>我们通常会直接使用<code>BoxDecoration</code>类，它是一个Decoration的子类，实现了常用的装饰元素的绘制。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token class-name">Color</span> color<span class="token punctuation">,</span> <span class="token comment">//颜色</span>\n  <span class="token class-name">DecorationImage</span> image<span class="token punctuation">,</span><span class="token comment">//图片</span>\n  <span class="token class-name">BoxBorder</span> border<span class="token punctuation">,</span> <span class="token comment">//边框</span>\n  <span class="token class-name">BorderRadiusGeometry</span> borderRadius<span class="token punctuation">,</span> <span class="token comment">//圆角</span>\n  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BoxShadow</span><span class="token punctuation">&gt;</span></span> boxShadow<span class="token punctuation">,</span> <span class="token comment">//阴影,可以指定多个</span>\n  <span class="token class-name">Gradient</span> gradient<span class="token punctuation">,</span> <span class="token comment">//渐变</span>\n  <span class="token class-name">BlendMode</span> backgroundBlendMode<span class="token punctuation">,</span> <span class="token comment">//背景混合模式</span>\n  <span class="token class-name">BoxShape</span> shape <span class="token operator">=</span> <span class="token class-name">BoxShape</span><span class="token punctuation">.</span>rectangle<span class="token punctuation">,</span> <span class="token comment">//形状</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各个属性名都是自解释的，详情读者可以查看API文档。下面我们实现一个带阴影的背景色渐变的按钮：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">DecoratedBox</span><span class="token punctuation">(</span>\n   decoration<span class="token punctuation">:</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>\n     gradient<span class="token punctuation">:</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span><span class="token class-name">Colors</span><span class="token punctuation">.</span>orange<span class="token punctuation">.</span>shade700<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//背景渐变</span>\n     borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//3像素圆角</span>\n     boxShadow<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment">//阴影</span>\n       <span class="token class-name">BoxShadow</span><span class="token punctuation">(</span>\n         color<span class="token punctuation">:</span><span class="token class-name">Colors</span><span class="token punctuation">.</span>black54<span class="token punctuation">,</span>\n         offset<span class="token punctuation">:</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n         blurRadius<span class="token punctuation">:</span> <span class="token number">4.0</span>\n       <span class="token punctuation">)</span>\n     <span class="token punctuation">]</span>\n   <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n    padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span> vertical<span class="token punctuation">:</span> <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Login&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图5-2所示：</p><p><img src="'+t+'" alt="图5-2"></p><p>通过<code>BoxDecoration</code>我们实现了一个渐变按钮的外观，但此示例还不是一个标准的按钮，因为它还不能响应点击事件，我们将在后面“自定义组件”一章中实现一个完整功能的<code>GradientButton</code>。另外，上面的例子中使用了<code>LinearGradient</code>类，它用于定义线性渐变的类，Flutter中还提供了其它渐变配置类，如<code>RadialGradient</code>、<code>SweepGradient</code>，读者若有需要可以自行查看API文档。</p>',12)],c={},p=(0,a(18580).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,o)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);