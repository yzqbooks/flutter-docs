"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[3281],{78979:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-677e92ae","path":"/chapter6/listview.html","title":"6.3 ListView","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.3.1 默认构造函数","slug":"_6-3-1-默认构造函数","link":"#_6-3-1-默认构造函数","children":[]},{"level":2,"title":"6.3.2 ListView.builder","slug":"_6-3-2-listview-builder","link":"#_6-3-2-listview-builder","children":[]},{"level":2,"title":"6.3.3 ListView.separated","slug":"_6-3-3-listview-separated","link":"#_6-3-3-listview-separated","children":[]},{"level":2,"title":"6.3.4 固定高度列表","slug":"_6-3-4-固定高度列表","link":"#_6-3-4-固定高度列表","children":[]},{"level":2,"title":"6.3.5 ListView 原理","slug":"_6-3-5-listview-原理","link":"#_6-3-5-listview-原理","children":[]},{"level":2,"title":"6.3.6 实例：无限加载列表","slug":"_6-3-6-实例-无限加载列表","link":"#_6-3-6-实例-无限加载列表","children":[{"level":3,"title":"添加固定列表头","slug":"添加固定列表头","link":"#添加固定列表头","children":[]}]},{"level":2,"title":"6.3.7 总结","slug":"_6-3-7-总结","link":"#_6-3-7-总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":10.08,"words":3025},"filePathRelative":"chapter6/listview.md","localizedDate":"2022年6月6日","excerpt":""}')},73542:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(6808);const e=a.p+"assets/img/6-3.01dd8760.png",p=a.p+"assets/img/6-4.2be389e0.png",c=a.p+"assets/img/6-5.7da5fb59.png",o=a.p+"assets/img/6-6.42674190.png",i=a.p+"assets/img/6-7.840f17c3.png",l=a.p+"assets/img/6-8.81913425.png",u=a.p+"assets/img/6-9.840f17c3.png",d=[(0,t.uE)('<h1 id="_6-3-listview" tabindex="-1"><a class="header-anchor" href="#_6-3-listview" aria-hidden="true">#</a> 6.3 ListView</h1><p><code>ListView</code>是最常用的可滚动组件之一，它可以沿一个方向线性排布所有子组件，并且它也支持列表项懒加载（在需要时才会创建）。我们看看ListView的默认构造函数定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  \n  <span class="token comment">//可滚动widget公共参数</span>\n  <span class="token class-name">Axis</span> scrollDirection <span class="token operator">=</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span>\n  bool reverse <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token class-name">ScrollController</span><span class="token operator">?</span> controller<span class="token punctuation">,</span>\n  bool<span class="token operator">?</span> primary<span class="token punctuation">,</span>\n  <span class="token class-name">ScrollPhysics</span><span class="token operator">?</span> physics<span class="token punctuation">,</span>\n  <span class="token class-name">EdgeInsetsGeometry</span><span class="token operator">?</span> padding<span class="token punctuation">,</span>\n  \n  <span class="token comment">//ListView各个构造函数的共同参数  </span>\n  double<span class="token operator">?</span> itemExtent<span class="token punctuation">,</span>\n  <span class="token class-name">Widget</span><span class="token operator">?</span> prototypeItem<span class="token punctuation">,</span> <span class="token comment">//列表项原型，后面解释</span>\n  bool shrinkWrap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  bool addAutomaticKeepAlives <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  bool addRepaintBoundaries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  double<span class="token operator">?</span> cacheExtent<span class="token punctuation">,</span> <span class="token comment">// 预渲染区域长度</span>\n    \n  <span class="token comment">//子widget列表</span>\n  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面参数分为两组：第一组是可滚动组件的公共参数，本章第一节中已经介绍过，不再赘述；第二组是<code>ListView</code>各个构造函数（<code>ListView</code>有多个构造函数）的共同参数，我们重点来看看这些参数，：</p><ul><li><code>itemExtent</code>：该参数如果不为<code>null</code>，则会强制<code>children</code>的“长度”为<code>itemExtent</code>的值；这里的“长度”是指滚动方向上子组件的长度，也就是说如果滚动方向是垂直方向，则<code>itemExtent</code>代表子组件的高度；如果滚动方向为水平方向，则<code>itemExtent</code>就代表子组件的宽度。在<code>ListView</code>中，指定<code>itemExtent</code>比让子组件自己决定自身长度会有更好的性能，这是因为指定<code>itemExtent</code>后，滚动系统可以提前知道列表的长度，而无需每次构建子组件时都去再计算一下，尤其是在滚动位置频繁变化时（滚动系统需要频繁去计算列表高度）。</li><li><code>prototypeItem</code>：如果我们知道列表中的所有列表项长度都相同但不知道具体是多少，这时我们可以指定一个列表项，该列表项被称为 <code>prototypeItem</code>（列表项原型）。指定 <code>prototypeItem</code> 后，可滚动组件会在 layout 时计算一次它延主轴方向的长度，这样也就预先知道了所有列表项的延主轴方向的长度，所以和指定 <code>itemExtent</code> 一样，指定 <code>prototypeItem</code> 会有更好的性能。注意，<code>itemExtent</code> 和<code>prototypeItem</code> 互斥，不能同时指定它们。</li><li><code>shrinkWrap</code>：该属性表示是否根据子组件的总长度来设置<code>ListView</code>的长度，默认值为<code>false</code> 。默认情况下，<code>ListView</code>会在滚动方向尽可能多的占用空间。当<code>ListView</code>在一个无边界(滚动方向上)的容器中时，<code>shrinkWrap</code>必须为<code>true</code>。</li><li><code>addAutomaticKeepAlives</code>：该属性我们将在介绍 PageView 组件时详细解释。</li><li><code>addRepaintBoundaries</code>：该属性表示是否将列表项（子组件）包裹在<code>RepaintBoundary</code>组件中。<code>RepaintBoundary</code> 读者可以先简单理解为它是一个”绘制边界“，将列表项包裹在<code>RepaintBoundary</code>中可以避免列表项不必要的重绘，但是当列表项重绘的开销非常小（如一个颜色块，或者一个较短的文本）时，不添加<code>RepaintBoundary</code>反而会更高效（具体原因会在本书后面 Flutter 绘制原理相关章节中介绍）。如果列表项自身来维护是否需要添加绘制边界组件，则此参数应该指定为 false。</li></ul><blockquote><p>注意：上面这些参数并非<code>ListView</code>特有，在本章后面介绍的其它可滚动组件也可能会拥有这些参数，它们的含义是相同的。</p></blockquote><h2 id="_6-3-1-默认构造函数" tabindex="-1"><a class="header-anchor" href="#_6-3-1-默认构造函数" aria-hidden="true">#</a> 6.3.1 默认构造函数</h2><p>默认构造函数有一个<code>children</code>参数，它接受一个Widget列表（List&lt;Widget&gt;）。这种方式适合只有少量的子组件数量已知且比较少的情况，反之则应该使用<code>ListView.builder</code> 按需动态构建列表项。</p><blockquote><p>注意，虽然这种方式将所有<code>children</code>一次性传递给 ListView，但子组件）仍然是在需要时才会加载（build（如有）、布局、绘制），也就是说通过默认构造函数构建的 ListView 也是基于 Sliver 的列表懒加载模型。</p></blockquote><p>下面是一个例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">(</span>\n  shrinkWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> \n  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;I\\&#39;m dedicating every day to you&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Domestic life was never quite my style&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;When you smile, you knock me out, I fall apart&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">const</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;And I thought I was so smart&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，虽然使用默认构造函数创建的列表也是懒加载的，但我们还是需要提前将 Widget 创建好，等到真正需要加载的时候才会对 Widget 进行布局和绘制。</p><h2 id="_6-3-2-listview-builder" tabindex="-1"><a class="header-anchor" href="#_6-3-2-listview-builder" aria-hidden="true">#</a> 6.3.2 ListView.builder</h2><p><code>ListView.builder</code>适合列表项比较多或者列表项不确定的情况，下面看一下<code>ListView.builder</code>的核心参数列表：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ListView公共参数已省略  </span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  required <span class="token class-name">IndexedWidgetBuilder</span> itemBuilder<span class="token punctuation">,</span>\n  int itemCount<span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>itemBuilder</code>：它是列表项的构建器，类型为<code>IndexedWidgetBuilder</code>，返回值为一个widget。当列表滚动到具体的<code>index</code>位置时，会调用该构建器构建列表项。</li><li><code>itemCount</code>：列表项的数量，如果为<code>null</code>，则为无限列表。</li></ul><p>下面看一个例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n  itemCount<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  itemExtent<span class="token punctuation">:</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token comment">//强制高度为50.0</span>\n  itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-3所示：</p><p><img src="'+e+'" alt="图6-3"></p><h2 id="_6-3-3-listview-separated" tabindex="-1"><a class="header-anchor" href="#_6-3-3-listview-separated" aria-hidden="true">#</a> 6.3.3 ListView.separated</h2><p><code>ListView.separated</code>可以在生成的列表项之间添加一个分割组件，它比<code>ListView.builder</code>多了一个<code>separatorBuilder</code>参数，该参数是一个分割组件生成器。</p><p>下面我们看一个例子：奇数行添加一条蓝色下划线，偶数行添加一条绿色下划线。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ListView3</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//下划线widget预定义以供复用。  </span>\n    <span class="token class-name">Widget</span> divider1<span class="token operator">=</span><span class="token class-name">Divider</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Widget</span> divider2<span class="token operator">=</span><span class="token class-name">Divider</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>\n      itemCount<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n      <span class="token comment">//列表项构造器</span>\n      itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">//分割器构造器</span>\n      separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> index<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>divider1<span class="token punctuation">:</span>divider2<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-4所示：</p><p><img src="'+p+'" alt="图6-4"></p><h2 id="_6-3-4-固定高度列表" tabindex="-1"><a class="header-anchor" href="#_6-3-4-固定高度列表" aria-hidden="true">#</a> 6.3.4 固定高度列表</h2><p>前面说过，给列表指定 <code>itemExtent</code> 或 <code>prototypeItem</code> 会有更高的性能，<strong>所以当我们知道列表项的高度都相同时，强烈建议指定 <code>itemExtent</code> 或 <code>prototypeItem</code></strong> 。下面看一个示例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">FixedExtentList</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">FixedExtentList</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n   \t\tprototypeItem<span class="token punctuation">:</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">//itemExtent: 56,</span>\n      itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//LayoutLogPrint是一个自定义组件，在布局时可以打印当前上下文中父组件给子组件的约束信息</span>\n        <span class="token keyword">return</span> <span class="token class-name">LayoutLogPrint</span><span class="token punctuation">(</span>\n          tag<span class="token punctuation">:</span> index<span class="token punctuation">,</span> \n          child<span class="token punctuation">:</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为列表项都是一个 ListTile，高度相同，但是我们不知道 ListTile 的高度是多少，所以指定了<code>prototypeItem</code> ，运行后，控制台打印：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter: 0: BoxConstraints(w=428.0, h=56.0)\nflutter: 1: BoxConstraints(w=428.0, h=56.0)\nflutter: 2: BoxConstraints(w=428.0, h=56.0)\n...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见 ListTile 的高度是 56 ，所以我们指定 <code>itemExtent</code> 为 56也是可以的。但是笔者还是建议优先指定原型，这样的话在列表项布局修改后，仍然可以正常工作（前提是每个列表项的高度相同）。</p><p>如果本例中不指定 <code>itemExtent</code> 或 <code>prototypeItem</code> ，我们看看控制台日志信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter: 0: BoxConstraints(w=428.0, 0.0&lt;=h&lt;=Infinity)\nflutter: 1: BoxConstraints(w=428.0, 0.0&lt;=h&lt;=Infinity)\nflutter: 2: BoxConstraints(w=428.0, 0.0&lt;=h&lt;=Infinity)\n...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，列表不知道列表项的具体高度，高度约束变为 0.0 到 Infinity。</p><h2 id="_6-3-5-listview-原理" tabindex="-1"><a class="header-anchor" href="#_6-3-5-listview-原理" aria-hidden="true">#</a> 6.3.5 ListView 原理</h2><p>ListView 内部组合了 Scrollable、Viewport 和 Sliver，需要注意：</p><ol><li>ListView 中的列表项组件都是 RenderBox，<strong>并不是 Sliver</strong>， 这个一定要注意。</li><li>一个 ListView 中只有一个Sliver，对列表项进行按需加载的逻辑是 Sliver 中实现的。</li><li>ListView 的 Sliver 默认是 SliverList，如果指定了 <code>itemExtent</code> ，则会使用 SliverFixedExtentList；如果 <code>prototypeItem </code> 属性不为空，则会使用 SliverPrototypeExtentList，无论是是哪个，都实现了子组件的按需加载模型。</li></ol><h2 id="_6-3-6-实例-无限加载列表" tabindex="-1"><a class="header-anchor" href="#_6-3-6-实例-无限加载列表" aria-hidden="true">#</a> 6.3.6 实例：无限加载列表</h2><p>假设我们要从数据源异步分批拉取一些数据，然后用<code>ListView</code>展示，当我们滑动到列表末尾时，判断是否需要再去拉取数据，如果是，则去拉取，拉取过程中在表尾显示一个loading，拉取成功后将数据插入列表；如果不需要再去拉取，则在表尾提示&quot;没有更多&quot;。代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:english_words/english_words.dart&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/rendering.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">InfiniteListView</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _InfiniteListViewState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_InfiniteListViewState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _InfiniteListViewState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InfiniteListView</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">const</span> loadingTag <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;##loading##&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">//表尾标记</span>\n  <span class="token keyword">var</span> _words <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>loadingTag<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">_retrieveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">separated</span><span class="token punctuation">(</span>\n      itemCount<span class="token punctuation">:</span> _words<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n      itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//如果到了表尾</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_words<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> loadingTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">//不足100条，继续获取数据</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>_words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//获取数据</span>\n            <span class="token function">_retrieveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//加载时显示loading</span>\n            <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n                width<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>\n                height<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">,</span>\n                child<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span>strokeWidth<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">//已经加载了100条数据，不再获取数据。</span>\n            <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>\n              alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>\n              padding<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>\n                <span class="token string-literal"><span class="token string">&quot;没有更多了&quot;</span></span><span class="token punctuation">,</span>\n                style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>grey<span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//显示单词列表项</span>\n        <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>_words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      separatorBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">_retrieveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//重新构建列表</span>\n        _words<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>\n          _words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token comment">//每次生成20个单词</span>\n          <span class="token function">generateWordPairs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> e<span class="token punctuation">.</span>asPascalCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后效果如图6-5、6-6所示：</p><p><img src="'+c+'" alt="图6-5"> <img src="'+o+'" alt="图6-6"></p><p>代码比较简单，读者可以参照代码中的注释理解，故不再赘述。需要说明的是，<code>_retrieveData()</code>的功能是模拟从数据源异步获取数据，我们使用english_words包的<code>generateWordPairs()</code>方法每次生成20个单词。</p><h3 id="添加固定列表头" tabindex="-1"><a class="header-anchor" href="#添加固定列表头" aria-hidden="true">#</a> 添加固定列表头</h3><p>很多时候我们需要给列表添加一个固定表头，比如我们想实现一个商品列表，需要在列表顶部添加一个“商品列表”标题，期望的效果如图 6-7 所示：</p><p><img src="'+i+'" alt="图6-7"></p><p>我们按照之前经验，写出如下代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;商品列表&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行，发现并没有出现我们期望的效果，相反触发了一个异常；</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error caught by rendering library, thrown during performResize()。\nVertical viewport was given unbounded height ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从异常信息中我们可以看到是因为<code>ListView</code>高度边界无法确定引起，所以解决的办法也很明显，我们需要给<code>ListView</code>指定边界，我们通过<code>SizedBox</code>指定一个列表高度看看是否生效：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n<span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n  height<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token comment">//指定列表高度为400</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>\n    itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图6-8所示：</p><p><img src="'+l+'" alt="图6-8"></p><p>可以看到，现在没有触发异常并且列表已经显示出来了，但是我们的手机屏幕高度要大于 400，所以底部会有一些空白。那如果我们要实现列表铺满除表头以外的屏幕空间应该怎么做？直观的方法是我们去动态计算，用屏幕高度减去状态栏、导航栏、表头的高度即为剩余屏幕高度，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略无关代码</span>\n<span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n  <span class="token comment">//Material设计规范中状态栏、导航栏、ListTile高度分别为24、56、56 </span>\n  height<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token operator">-</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">56</span><span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span>\n  child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如下图6-9所示：</p><p><img src="'+u+'" alt="图6-9"></p><p>可以看到，我们期望的效果实现了，但是这种方法并不优雅，如果页面布局发生变化，比如表头布局调整导致表头高度改变，那么剩余空间的高度就得重新计算。那么有什么方法可以自动拉伸<code>ListView</code>以填充屏幕剩余空间的方法吗？当然有！答案就是<code>Flex</code>。前面已经介绍过在弹性布局中，可以使用<code>Expanded</code>自动拉伸组件大小，并且我们也说过<code>Column</code>是继承自<code>Flex</code>的，所以我们可以直接使用<code>Column</code> + <code>Expanded</code>来实现，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n    <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;商品列表&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Expanded</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> int index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，和上图一样，完美实现了！</p><h2 id="_6-3-7-总结" tabindex="-1"><a class="header-anchor" href="#_6-3-7-总结" aria-hidden="true">#</a> 6.3.7 总结</h2><p>本节主要介绍了<code>ListView</code> 常用的的使用方式和要点，但并没有介绍<code>ListView.custom</code>方法，它需要实现一个<code>SliverChildDelegate</code> 用来给 ListView 生成列表项组件，更多详情请参考 API 文档。</p>',64)],k={},r=(0,a(18580).Z)(k,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,d)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);