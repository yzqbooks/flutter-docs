"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[8844],{85499:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-b6f89d54","path":"/chapter11/http.html","title":"11.2 通过HttpClient发起HTTP请求","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":8.56,"words":2568},"filePathRelative":"chapter11/http.md","localizedDate":"2022年6月6日","excerpt":""}')},62208:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6808);const e=a.p+"assets/img/11-1.9063be3e.png",p=a.p+"assets/img/11-2.4e2650e3.png",c=[(0,t.uE)('<h1 id="_11-2-通过httpclient发起http请求" tabindex="-1"><a class="header-anchor" href="#_11-2-通过httpclient发起http请求" aria-hidden="true">#</a> 11.2 通过HttpClient发起HTTP请求</h1><p>Dart IO库中提供了用于发起Http请求的一些类，我们可以直接使用<code>HttpClient</code>来发起请求。使用<code>HttpClient</code>发起请求分为五步：</p><ol><li><p>创建一个<code>HttpClient</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>打开Http连接，设置请求头：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">HttpClientRequest</span> request <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一步可以使用任意Http Method，如<code>httpClient.post(...)</code>、<code>httpClient.delete(...)</code>等。如果包含Query参数，可以在构建uri时添加，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span>scheme<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https&quot;</span></span><span class="token punctuation">,</span> host<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;flutterchina.club&quot;</span></span><span class="token punctuation">,</span> queryParameters<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string-literal"><span class="token string">&quot;xx&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;xx&quot;</span></span><span class="token punctuation">,</span>\n    <span class="token string-literal"><span class="token string">&quot;yy&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;dd&quot;</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>HttpClientRequest</code>可以设置请求header，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;user-agent&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是post或put等可以携带请求体方法，可以通过HttpClientRequest对象发送request body，如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> payload<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;...&quot;</span></span><span class="token punctuation">;</span>\nrequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">//request.addStream(_inputStream); //可以直接添加输入流</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>等待连接服务器：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">HttpClientResponse</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一步完成后，请求信息就已经发送给服务器了，返回一个<code>HttpClientResponse</code>对象，它包含响应头（header）和响应流(响应体的Stream)，接下来就可以通过读取响应流来获取响应内容。</p></li><li><p>读取响应内容：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> responseBody <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span>decoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们通过读取响应流来获取服务器返回的数据，在读取时我们可以设置编码格式，这里是utf8。</p></li><li><p>请求结束，关闭<code>HttpClient</code>：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭client后，通过该client发起的所有请求都会中止。</p></li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><p>我们实现一个获取百度首页html的例子，示例效果如图11-1所示：</p><p>​ <img src="'+e+'" alt="图11-1"></p><p>点击“获取百度首页”按钮后，会请求百度首页，请求成功后，我们将返回内容显示出来并在控制台打印响应header，代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">HttpTestRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>\n  <span class="token metadata function">@override</span>\n  _HttpTestRouteState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_HttpTestRouteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> _HttpTestRouteState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpTestRoute</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n  bool _loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span> _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">SingleChildScrollView</span><span class="token punctuation">(</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>\n        children<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n          <span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;获取百度首页&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            onPressed<span class="token punctuation">:</span> _loading <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> request<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">Container</span><span class="token punctuation">(</span>\n            width<span class="token punctuation">:</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">50.0</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>_text<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&quot;\\s&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _loading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;正在请求...&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">//创建一个HttpClient</span>\n      <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//打开Http连接</span>\n      <span class="token class-name">HttpClientRequest</span> request <span class="token operator">=</span>\n          <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;https://www.baidu.com&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//使用iPhone的UA</span>\n      request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n        <span class="token string-literal"><span class="token string">&quot;user-agent&quot;</span></span><span class="token punctuation">,</span>\n        <span class="token string-literal"><span class="token string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1&quot;</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//等待连接服务器（会将请求信息发送给服务器）</span>\n      <span class="token class-name">HttpClientResponse</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//读取响应内容</span>\n      _text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span>decoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//输出响应头</span>\n      <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">//关闭client后，通过该client发起的所有请求都会中止。</span>\n      httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;请求失败：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I/flutter (18545): connection: Keep-Alive\nI/flutter (18545): cache-control: no-cache\nI/flutter (18545): set-cookie: ....  //有多个，省略...\nI/flutter (18545): transfer-encoding: chunked\nI/flutter (18545): date: Tue, 30 Oct 2018 10:00:52 GMT\nI/flutter (18545): content-encoding: gzip\nI/flutter (18545): vary: Accept-Encoding\nI/flutter (18545): strict-transport-security: max-age=172800\nI/flutter (18545): content-type: text/html;charset=utf-8\nI/flutter (18545): tracecode: 00525262401065761290103018, 00522983\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="httpclient配置" tabindex="-1"><a class="header-anchor" href="#httpclient配置" aria-hidden="true">#</a> HttpClient配置</h4><p><code>HttpClient</code>有很多属性可以配置，常用的属性列表如下：</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>idleTimeout</td><td>对应请求头中的keep-alive字段值，为了避免频繁建立连接，httpClient在请求结束后会保持连接一段时间，超过这个阈值后才会关闭连接。</td></tr><tr><td>connectionTimeout</td><td>和服务器建立连接的超时，如果超过这个值则会抛出SocketException异常。</td></tr><tr><td>maxConnectionsPerHost</td><td>同一个host，同时允许建立连接的最大数量。</td></tr><tr><td>autoUncompress</td><td>对应请求头中的Content-Encoding，如果设置为true，则请求头中Content-Encoding的值为当前HttpClient支持的压缩算法列表，目前只有&quot;gzip&quot;</td></tr><tr><td>userAgent</td><td>对应请求头中的User-Agent字段。</td></tr></tbody></table><p>可以发现，有些属性只是为了更方便的设置请求头，对于这些属性，你完全可以通过<code>HttpClientRequest</code>直接设置header，不同的是通过<code>HttpClient</code>设置的对整个<code>httpClient</code>都生效，而通过<code>HttpClientRequest</code>设置的只对当前请求生效。</p><h4 id="http请求认证" tabindex="-1"><a class="header-anchor" href="#http请求认证" aria-hidden="true">#</a> HTTP请求认证</h4><p>Http协议的认证（Authentication）机制可以用于保护非公开资源。如果Http服务器开启了认证，那么用户在发起请求时就需要携带用户凭据，如果你在浏览器中访问了启用Basic认证的资源时，浏览就会弹出一个登录框，如图11-2：</p><p><img src="'+p+'" alt="图11-2"></p><p>我们先看看Basic认证的基本过程：</p><ol><li><p>客户端发送http请求给服务器，服务器验证该用户是否已经登录验证过了，如果没有的话，  服务器会返回一个401 Unauthozied给客户端，并且在响应header中添加一个 “WWW-Authenticate” 字段，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WWW-Authenticate: Basic realm=&quot;admin&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中&quot;Basic&quot;为认证方式，realm为用户角色的分组，可以在后台添加分组。</p></li><li><p>客户端得到响应码后，将用户名和密码进行base64编码（格式为用户名:密码），设置请求头Authorization，继续访问 :</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization: Basic YXXFISDJFISJFGIJIJG\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器验证用户凭据，如果通过就返回资源内容。</p></li></ol><p>注意，Http 的方式除了 Basic 认证之外还有：Digest 认证、Client 认证、Form Based 认证等，目前Flutter 的 HttpClient 只支持 Basic 和 Digest 两种认证方式，这两种认证方式最大的区别是发送用户凭据时，对于用户凭据的内容，前者只是简单的通过 Base64 编码（可逆），而后者会进行哈希运算，相对来说安全一点点，但是为了安全起见，<strong>无论是采用Basic认证还是Digest认证，都应该在Https协议下</strong>，这样可以防止抓包和中间人攻击。</p><p><code>HttpClient</code>关于Http认证的方法和属性：</p><ol><li><p><code>addCredentials(Uri url, String realm, HttpClientCredentials credentials)</code></p><p>该方法用于添加用户凭据,如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>httpClient<span class="token punctuation">.</span><span class="token function">addCredentials</span><span class="token punctuation">(</span>_uri<span class="token punctuation">,</span>\n <span class="token string-literal"><span class="token string">&quot;admin&quot;</span></span><span class="token punctuation">,</span> \n  <span class="token class-name">HttpClientBasicCredentials</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//Basic认证凭据</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是Digest认证，可以创建Digest认证凭据：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">HttpClientDigestCredentials</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code> authenticate(Future&lt;bool&gt; f(Uri url, String scheme, String realm))</code></p><p>这是一个setter，类型是一个回调，当服务器需要用户凭据且该用户凭据未被添加时，httpClient会调用此回调，在这个回调当中，一般会调用<code>addCredential()</code>来动态添加用户凭证，例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>httpClient<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> scheme<span class="token punctuation">,</span> <span class="token class-name">String</span> realm<span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>host<span class="token operator">==</span><span class="token string-literal"><span class="token string">&quot;xx.com&quot;</span></span> <span class="token operator">&amp;&amp;</span> realm<span class="token operator">==</span><span class="token string-literal"><span class="token string">&quot;admin&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    httpClient<span class="token punctuation">.</span><span class="token function">addCredentials</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>\n      <span class="token string-literal"><span class="token string">&quot;admin&quot;</span></span><span class="token punctuation">,</span>\n      <span class="token class-name">HttpClientBasicCredentials</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;username&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;pwd&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个建议是，如果所有请求都需要认证，那么应该在HttpClient初始化时就调用<code>addCredentials()</code>来添加全局凭证，而不是去动态添加。</p></li></ol><h4 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h4><p>可以通过<code>findProxy</code>来设置代理策略，例如，我们要将所有请求通过代理服务器（192.168.1.2:8888）发送出去：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  client<span class="token punctuation">.</span>findProxy <span class="token operator">=</span> <span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果需要过滤uri，可以手动判断</span>\n    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;PROXY 192.168.1.2:8888&quot;</span></span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>findProxy</code> 回调返回值是一个遵循浏览器PAC脚本格式的字符串，详情可以查看API文档，如果不需要代理，返回&quot;DIRECT&quot;即可。</p><p>在APP开发中，很多时候我们需要抓包来调试，而抓包软件(如charles)就是一个代理，这时我们就可以将请求发送到我们的抓包软件，我们就可以在抓包软件中看到请求的数据了。</p><p>有时代理服务器也启用了身份验证，这和http协议的认证是相似的，HttpClient提供了对应的Proxy认证方法和属性：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">set</span> <span class="token function">authenticateProxy</span><span class="token punctuation">(</span>\n    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> int port<span class="token punctuation">,</span> <span class="token class-name">String</span> scheme<span class="token punctuation">,</span> <span class="token class-name">String</span> realm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">addProxyCredentials</span><span class="token punctuation">(</span>\n    <span class="token class-name">String</span> host<span class="token punctuation">,</span> int port<span class="token punctuation">,</span> <span class="token class-name">String</span> realm<span class="token punctuation">,</span> <span class="token class-name">HttpClientCredentials</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他们的使用方法和上面“HTTP请求认证”一节中介绍的<code>addCredentials</code>和<code>authenticate</code> 相同，故不再赘述。</p><h4 id="证书校验" tabindex="-1"><a class="header-anchor" href="#证书校验" aria-hidden="true">#</a> 证书校验</h4><p>Https中为了防止通过伪造证书而发起的中间人攻击，客户端应该对自签名或非CA颁发的证书进行校验。<code>HttpClient</code>对证书校验的逻辑如下：</p><ol><li>如果请求的Https证书是可信CA颁发的，并且访问host包含在证书的domain列表中(或者符合通配规则)并且证书未过期，则验证通过。</li><li>如果第一步验证失败，但在创建HttpClient时，已经通过 SecurityContext 将证书添加到证书信任链中，那么当服务器返回的证书在信任链中的话，则验证通过。</li><li>如果1、2验证都失败了，如果用户提供了<code>badCertificateCallback</code>回调，则会调用它，如果回调返回<code>true</code>，则允许继续链接，如果返回<code>false</code>，则终止链接。</li></ol><p>综上所述，我们的证书校验其实就是提供一个<code>badCertificateCallback</code>回调，下面通过一个示例来说明。</p><h5 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例</h5><p>假设我们的后台服务使用的是自签名证书，证书格式是PEM格式，我们将证书的内容保存在本地字符串中，那么我们的校验逻辑如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> PEM<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;XXXXX&quot;</span></span><span class="token punctuation">;</span><span class="token comment">//可以从文件读取</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nhttpClient<span class="token punctuation">.</span>badCertificateCallback<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">X509Certificate</span> cert<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> int port<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span>pem<span class="token operator">==</span>PEM<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//证书一致，则允许发送数据</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>X509Certificate</code>是证书的标准格式，包含了证书除私钥外所有信息，读者可以自行查阅文档。另外，上面的示例没有校验host，是因为只要服务器返回的证书内容和本地的保存一致就已经能证明是我们的服务器了（而不是中间人），host 验证通常是为了防止证书和域名不匹配。</p><p>对于自签名的证书，我们也可以将其添加到本地证书信任链中，这样证书验证时就会自动通过，而不会再走到<code>badCertificateCallback</code>回调中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">SecurityContext</span> sc <span class="token operator">=</span> <span class="token class-name">SecurityContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//file为证书路径</span>\nsc<span class="token punctuation">.</span><span class="token function">setTrustedCertificates</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//创建一个HttpClient</span>\n<span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，通过<code>setTrustedCertificates()</code>设置的证书格式必须为 PEM 或 PKCS12，如果证书格式为PKCS12，则需将证书密码传入，这样则会在代码中暴露证书密码，所以客户端证书校验不建议使用 PKCS12 格式的证书。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>值得注意的是，<code>HttpClient</code>提供的这些属性和方法最终都会作用在请求header里，我们完全可以通过手动去设置header来实现，之所以提供这些方法，只是为了方便开发者而已。另外，Http协议是一个非常重要的、使用最多的网络协议，每一个开发者都应该对 http 协议非常熟悉。</p>',43)],o={},i=(0,a(18580).Z)(o,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,c)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);