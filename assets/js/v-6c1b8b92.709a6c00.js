"use strict";(self.webpackChunkflutter_docs=self.webpackChunkflutter_docs||[]).push([[4525],{65232:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-6c1b8b92","path":"/chapter14/layout.html","title":"14.4 布局（Layout）过程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"14.4.1 单子组件布局示例（CustomCenter）","slug":"_14-4-1-单子组件布局示例-customcenter","link":"#_14-4-1-单子组件布局示例-customcenter","children":[{"level":3,"title":"performLayout 流程","slug":"performlayout-流程","link":"#performlayout-流程","children":[]}]},{"level":2,"title":"14.4.2 多子组件布局示例（LeftRightBox）","slug":"_14-4-2-多子组件布局示例-leftrightbox","link":"#_14-4-2-多子组件布局示例-leftrightbox","children":[]},{"level":2,"title":"14.4.3 关于ParentData","slug":"_14-4-3-关于parentdata","link":"#_14-4-3-关于parentdata","children":[]},{"level":2,"title":"14.4.4 布局更新","slug":"_14-4-4-布局更新","link":"#_14-4-4-布局更新","children":[{"level":3,"title":"布局边界（relayoutBoundary）","slug":"布局边界-relayoutboundary","link":"#布局边界-relayoutboundary","children":[]},{"level":3,"title":"markNeedsLayout","slug":"markneedslayout","link":"#markneedslayout","children":[]},{"level":3,"title":"flushLayout()","slug":"flushlayout","link":"#flushlayout","children":[]},{"level":3,"title":"Layout流程","slug":"layout流程","link":"#layout流程","children":[]}]},{"level":2,"title":"14.4.5 sizedByParent","slug":"_14-4-5-sizedbyparent","link":"#_14-4-5-sizedbyparent","children":[{"level":3,"title":"AccurateSizedBox","slug":"accuratesizedbox","link":"#accuratesizedbox","children":[]}]},{"level":2,"title":"14.4.6 AfterLayout","slug":"_14-4-6-afterlayout","link":"#_14-4-6-afterlayout","children":[]},{"level":2,"title":"14.4.7 再论 Constraints","slug":"_14-4-7-再论-constraints","link":"#_14-4-7-再论-constraints","children":[]},{"level":2,"title":"14.4.8 总结","slug":"_14-4-8-总结","link":"#_14-4-8-总结","children":[]}],"git":{"createdTime":1654491188000,"updatedTime":1654491188000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":21.23,"words":6370},"filePathRelative":"chapter14/layout.md","localizedDate":"2022年6月6日","excerpt":""}')},59636:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var t=a(6808);const e=a.p+"assets/img/14-5.ff0285e3.png",p=a.p+"assets/img/14-6.8f657fb3.png",o=a.p+"assets/img/14-7.ef9619ce.png",c=a.p+"assets/img/14-8.09a350b4.png",i=[(0,t.uE)('<h1 id="_14-4-布局-layout-过程" tabindex="-1"><a class="header-anchor" href="#_14-4-布局-layout-过程" aria-hidden="true">#</a> 14.4 布局（Layout）过程</h1><p>Layout（布局）过程主要是确定每一个组件的布局信息（大小和位置），Flutter 的布局过程如下：</p><ol><li>父节点向子节点传递约束（constraints）信息，限制子节点的最大和最小宽高。</li><li>子节点根据约束信息确定自己的大小（size）。</li><li>父节点根据特定布局规则（不同布局组件会有不同的布局算法）确定每一个子节点在父节点布局空间中的位置，用偏移 offset 表示。</li><li>递归整个过程，确定出每一个节点的大小和位置。</li></ol><p>可以看到，组件的大小是由自身决定的，而组件的位置是由父组件决定的。</p><p>Flutter 中的布局类组件很多，根据孩子数量可以分为单子组件和多子组件，下面我们先通过分别自定义一个单子组件和多子组件来直观理解一下Flutter的布局过程，之后会介绍一下布局更新过程和 Flutter 中的 Constraints（约束）。</p><h2 id="_14-4-1-单子组件布局示例-customcenter" tabindex="-1"><a class="header-anchor" href="#_14-4-1-单子组件布局示例-customcenter" aria-hidden="true">#</a> 14.4.1 单子组件布局示例（CustomCenter）</h2><p>我们实现一个单子组件 CustomCenter，功能基本和 Center 组件对齐，通过这个实例我们演示一下布局的主要流程。</p><p>首先，我们定义组件，为了介绍布局原理，我们不采用组合的方式来实现组件，而是直接通过定制 RenderObject 的方式来实现。因为居中组件需要包含一个子节点，所以我们直接继承 SingleChildRenderObjectWidget。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CustomCenter</span> <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">CustomCenter2</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span> required <span class="token class-name">Widget</span> child<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">RenderObject</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RenderCustomCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着实现 RenderCustomCenter。这里直接继承 RenderObject 会更接近底层一点，但这需要我们自己手动实现一些和布局无关的东西，比如事件分发等逻辑。为了更聚焦布局本身，我们选择继承自RenderShiftedBox，它会帮我们实现布局之外的一些功能，这样我们只需要重写<code>performLayout</code>，在该函数中实现子节点居中算法即可。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">RenderCustomCenter</span> <span class="token keyword">extends</span> <span class="token class-name">RenderShiftedBox</span> <span class="token punctuation">{</span>\n  <span class="token class-name">RenderCustomCenter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RenderBox</span><span class="token operator">?</span> child<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//1. 先对子组件进行layout，随后获取它的size</span>\n    child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n      constraints<span class="token punctuation">.</span><span class="token function">loosen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//将约束传递给子节点</span>\n      parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 因为我们接下来要使用child的size,所以不能为false</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//2.根据子组件的大小确定自身的大小</span>\n    size <span class="token operator">=</span> constraints<span class="token punctuation">.</span><span class="token function">constrain</span><span class="token punctuation">(</span><span class="token class-name">Size</span><span class="token punctuation">(</span>\n      constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">==</span> double<span class="token punctuation">.</span>infinity\n          <span class="token operator">?</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width\n          <span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>\n      constraints<span class="token punctuation">.</span>maxHeight <span class="token operator">==</span> double<span class="token punctuation">.</span>infinity\n          <span class="token operator">?</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height\n          <span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 3. 根据父节点子节点的大小，算出子节点在父节点中居中之后的偏移，然后将这个偏移保存在</span>\n    <span class="token comment">// 子节点的parentData中，在后续的绘制阶段，会用到。</span>\n    <span class="token class-name">BoxParentData</span> parentData <span class="token operator">=</span> child<span class="token operator">!</span><span class="token punctuation">.</span>parentData <span class="token operator">as</span> <span class="token class-name">BoxParentData</span><span class="token punctuation">;</span>\n    parentData<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">-</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">Offset</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布局过程请参考注释，在此需要额外说明有3点：</p><ol><li><p>在对子节点进行布局时， <code>constraints </code> 是 CustomCenter 的父组件传递给自己的约束信息，我们传递给子节点的约束信息是<code>constraints.loosen()</code>，下面看一下loosen的实现源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">BoxConstraints</span> <span class="token function">loosen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">(</span>\n    minWidth<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n    maxWidth<span class="token punctuation">:</span> maxWidth<span class="token punctuation">,</span>\n    minHeight<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n    maxHeight<span class="token punctuation">:</span> maxHeight<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，CustomCenter 约束子节点最大宽高不超过自身的最大宽高。</p></li><li><p>子节点在父节点（CustomCenter）的约束下，确定自己的宽高；此时CustomCenter会根据子节点的宽高确定自己的宽高，上面代码的逻辑是，如果CustomCenter父节点传递给它最大宽高约束是无限大时，它的宽高会设置为它子节点的宽高。注意，如果这时将CustomCenter的宽高也设置为无限大就会有问题，因为在一个无限大的范围内自己的宽高也是无限大的话，那么实际上的宽高到底是多大，它的父节点会懵逼的！屏幕的大小是固定的，这显然不合理。如果CustomCenter父节点传递给它的最大宽高约束不是无限大，那么是可以指定自己的宽高为无限大的，因为在一个有限的空间内，子节点如果说自己无限大，那么最大也就是父节点的大小。所以，简而言之，CustomCenter 会尽可能让自己填满父元素的空间。</p></li><li><p>CustomCenter 确定了自己的大小和子节点大小之后就可以确定子节点的位置了，根据居中算法，将子节点的原点坐标算出后保存在子节点的 parentData 中，在后续的绘制阶段会用到，具体怎么用，我们看一下RenderShiftedBox中默认的 paint 实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">BoxParentData</span> childParentData <span class="token operator">=</span> child<span class="token operator">!</span><span class="token punctuation">.</span>parentData<span class="token operator">!</span> <span class="token operator">as</span> <span class="token class-name">BoxParentData</span><span class="token punctuation">;</span>\n    <span class="token comment">//从child.parentData中取出子节点相对当前节点的偏移，加上当前节点在屏幕中的偏移，</span>\n    <span class="token comment">//便是子节点在屏幕中的偏移。</span>\n    context<span class="token punctuation">.</span><span class="token function">paintChild</span><span class="token punctuation">(</span>child<span class="token operator">!</span><span class="token punctuation">,</span> childParentData<span class="token punctuation">.</span>offset <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="performlayout-流程" tabindex="-1"><a class="header-anchor" href="#performlayout-流程" aria-hidden="true">#</a> performLayout 流程</h3><p>可以看到，布局的逻辑是在 performLayout 方法中实现的。我们梳理一下 performLayout 中具体做的事：</p><ol><li>如果有子组件，则对子组件进行递归布局。</li><li>确定当前组件的大小（size），通常会依赖子组件的大小。</li><li>确定子组件在当前组件中的起始偏移。</li></ol><p>在Flutter组件库中，有一些常用的单子组件比如Align、SizedBox、DecoratedBox等，都可以打开源码去看看其实现。</p><p>下面我们看一个多子组件的例子。</p><h2 id="_14-4-2-多子组件布局示例-leftrightbox" tabindex="-1"><a class="header-anchor" href="#_14-4-2-多子组件布局示例-leftrightbox" aria-hidden="true">#</a> 14.4.2 多子组件布局示例（LeftRightBox）</h2><p>实际开发中我们会经常用到贴边左-右布局，现在我们就来实现一个 LeftRightBox 组件来实现左-右布局，因为LeftRightBox 有两个孩子，用一个 Widget 数组来保存子组件。</p><p>首先我们定义组件，与单子组件不同的是多子组件需要继承自 MultiChildRenderObjectWidget：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">LeftRightBox</span> <span class="token keyword">extends</span> <span class="token class-name">MultiChildRenderObjectWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">LeftRightBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;只能传两个children&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> children<span class="token punctuation">:</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">RenderObject</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RenderLeftRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要实现 RenderLeftRight，在其 performLayout 中我们实现实现左-右布局算法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">LeftRightParentData</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBoxParentData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">RenderLeftRight</span> <span class="token keyword">extends</span> <span class="token class-name">RenderBox</span>\n    <span class="token keyword">with</span>\n        <span class="token class-name">ContainerRenderObjectMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">,</span> <span class="token class-name">LeftRightParentData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n        <span class="token class-name">RenderBoxContainerDefaultsMixin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderBox</span><span class="token punctuation">,</span> <span class="token class-name">LeftRightParentData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n \n  <span class="token comment">// 初始化每一个child的parentData        </span>\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">setupParentData</span><span class="token punctuation">(</span><span class="token class-name">RenderBox</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>parentData <span class="token operator">is!</span> <span class="token class-name">LeftRightParentData</span><span class="token punctuation">)</span>\n      child<span class="token punctuation">.</span>parentData <span class="token operator">=</span> <span class="token class-name">LeftRightParentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">BoxConstraints</span> constraints <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constraints<span class="token punctuation">;</span>\n    <span class="token class-name">RenderBox</span> leftChild <span class="token operator">=</span> firstChild<span class="token operator">!</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">LeftRightParentData</span> childParentData <span class="token operator">=</span>\n        leftChild<span class="token punctuation">.</span>parentData<span class="token operator">!</span> <span class="token operator">as</span> <span class="token class-name">LeftRightParentData</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">RenderBox</span> rightChild <span class="token operator">=</span> childParentData<span class="token punctuation">.</span>nextSibling<span class="token operator">!</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//我们限制右孩子宽度不超过总宽度一半</span>\n    rightChild<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n      constraints<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//调整右子节点的offset</span>\n    childParentData <span class="token operator">=</span> rightChild<span class="token punctuation">.</span>parentData<span class="token operator">!</span> <span class="token operator">as</span> <span class="token class-name">LeftRightParentData</span><span class="token punctuation">;</span>\n    childParentData<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token class-name">Offset</span><span class="token punctuation">(</span>\n      constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">-</span> rightChild<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n      <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// layout left child</span>\n    <span class="token comment">// 左子节点的offset默认为（0，0），为了确保左子节点始终能显示，我们不修改它的offset</span>\n    leftChild<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n      <span class="token comment">//左侧剩余的最大宽度</span>\n      constraints<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>\n        maxWidth<span class="token punctuation">:</span> constraints<span class="token punctuation">.</span>maxWidth <span class="token operator">-</span> rightChild<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//设置LeftRight自身的size</span>\n    size <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">(</span>\n      constraints<span class="token punctuation">.</span>maxWidth<span class="token punctuation">,</span>\n      <span class="token function">max</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightChild<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">PaintingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Offset</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">defaultPaint</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  bool <span class="token function">hitTestChildren</span><span class="token punctuation">(</span><span class="token class-name">BoxHitTestResult</span> result<span class="token punctuation">,</span> <span class="token punctuation">{</span>required <span class="token class-name">Offset</span> position<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">defaultHitTestChildren</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> position<span class="token punctuation">:</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，实际布局流程和单子节点并没有太大区别，只不过多子组件需要同时对多个子节点进行布局。另外和RenderCustomCenter 不同的是，RenderLeftRight是直接继承自 RenderBox，同时混入了ContainerRenderObjectMixin 和 RenderBoxContainerDefaultsMixin 两个 mixin，这两个 mixin 实现了通用的绘制和事件处理相关逻辑（现在先不用关注，后面章节会讲）。</p><h2 id="_14-4-3-关于parentdata" tabindex="-1"><a class="header-anchor" href="#_14-4-3-关于parentdata" aria-hidden="true">#</a> 14.4.3 关于ParentData</h2><p>上面两个例子中我们在实现相应的 RenderObject 时都用到了子节点的 parentData 对象(将子节点的offset信息保存其中)，可以看到 parentData 虽然属于child的属性，但它从设置（包括初始化）到使用都在父节点中，这也是为什么起名叫“parentData”。实际上Flutter框架中，parentData 这个属性主要就是为了在 layout 阶段保存组件布局信息而设计的。</p><p>需要注意：“parentData 用于保存节点的布局信息” 只是一个约定，我们定义组件时完全可以将子节点的布局信息保存在任意地方，也可以保存非布局信息。但是，还是强烈建议大家遵循Flutter的规范，这样我们的代码会更容易被他人看懂，也会更容易维护。</p><h2 id="_14-4-4-布局更新" tabindex="-1"><a class="header-anchor" href="#_14-4-4-布局更新" aria-hidden="true">#</a> 14.4.4 布局更新</h2><p>理论上，某个组件的布局变化后，就可能会影响其它组件的布局，所以当有组件布局发生变化后，最笨的办法是对整棵组件树 relayout（重新布局）！但是对所有组件进行 relayout 的成本还是太大，所以我们需要探索一下降低 relayout 成本的方案。实际上，在一些特定场景下，组件发生变化后我们只需要对部分组件进行重新布局即可（而无需对整棵树 relayout ）。</p><h3 id="布局边界-relayoutboundary" tabindex="-1"><a class="header-anchor" href="#布局边界-relayoutboundary" aria-hidden="true">#</a> 布局边界（relayoutBoundary）</h3><p>假如有一个页面的组件树结构如图14-5所示：</p><p><img src="'+e+'" alt="图14-5"></p><p>假如 Text3 的文本长度发生变化，则会导致 Text4 的位置和 Column2 的大小也会变化；又因为 Column2 的父组件 SizedBox 已经限定了大小，所以 SizedBox 的大小和位置都不会变化。所以最终我们需要进行 relayout 的组件是：Text3、Column2，这里需要注意：</p><ol><li>Text4 是不需要重新布局的，因为 Text4 的大小没有发生变化，只是位置发生变化，而它的位置是在父组件 Column2 布局时确定的。</li><li>很容易发现：假如 Text3 和 Column2 之间还有其它组件，则这些组件也都是需要 relayout 的。</li></ol><p>在本例中，Column2 就是 Text3 的 relayoutBoundary （重新布局的边界节点）。每个组件的 renderObject 中都有一个 <code>_relayoutBoundary</code> 属性指向自身的布局边界节点，如果当前节点布局发生变化后，自身到其布局边界节点路径上的所有的节点都需要 relayout。</p><p>那么，一个组件是否是 relayoutBoundary 的条件是什么呢？这里有一个原则和四个场景，原则是“组件自身的大小变化不会影响父组件”，如果一个组件满足以下四种情况之一，则它便是 relayoutBoundary ：</p><ol><li><p>当前组件父组件的大小不依赖当前组件大小时；这种情况下父组件在布局时会调用子组件布局函数时并会给子组件传递一个 parentUsesSize 参数，该参数为 false 时表示父组件的布局算法不会依赖子组件的大小。</p></li><li><p>组件的大小只取决于父组件传递的约束，而不会依赖后代组件的大小。这样的话后代组件的大小变化就不会影响自身的大小了，这种情况组件的 sizedByParent 属性必须为 true（具体我们后面会讲）。</p></li><li><p>父组件传递给自身的约束是一个严格约束（固定宽高，下面会讲）；这种情况下即使自身的大小依赖后代元素，但也不会影响父组件。</p></li><li><p>组件为根组件；Flutter 应用的根组件是 RenderView，它的默认大小是当前设备屏幕大小。</p></li></ol><p>对应的代码实现是：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// parent is! RenderObject 为 true 时则表示当前组件是根组件，因为只有根组件没有父组件。</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentUsesSize <span class="token operator">||</span> sizedByParent <span class="token operator">||</span> constraints<span class="token punctuation">.</span>isTight <span class="token operator">||</span> parent <span class="token operator">is!</span> <span class="token class-name">RenderObject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  _relayoutBoundary <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  _relayoutBoundary <span class="token operator">=</span> <span class="token punctuation">(</span>parent<span class="token operator">!</span> <span class="token operator">as</span> <span class="token class-name">RenderObject</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_relayoutBoundary<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中 if 里的判断条件和上面的 4 条 一一对应，其中除了第二个条件之外（ sizedByParent 为 true ），其它的都很直观，我们会在后面专门介绍一下第二个条件。</p><h3 id="markneedslayout" tabindex="-1"><a class="header-anchor" href="#markneedslayout" aria-hidden="true">#</a> markNeedsLayout</h3><p>当组件布局发生变化时，它需要调用 <code>markNeedsLayout</code> 方法来更新布局，它的功能主要有两个：</p><ol><li>将自身到其 relayoutBoundary 路径上的所有节点标记为 “需要布局” 。</li><li>请求新的 frame；在新的 frame 中会对标记为“需要布局”的节点重新布局。</li></ol><p>我们看看其核心源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">markNeedsLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   _needsLayout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>_relayoutBoundary <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果不是布局边界节点</span>\n    <span class="token function">markParentNeedsLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归调用前节点到其布局边界节点路径上所有节点的方法 markNeedsLayout</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 如果是布局边界节点 </span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>owner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 将布局边界节点加入到 pipelineOwner._nodesNeedingLayout 列表中</span>\n      owner<span class="token operator">!</span><span class="token punctuation">.</span>_nodesNeedingLayout<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      owner<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">requestVisualUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该函数最终会请求新的 frame</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flushlayout" tabindex="-1"><a class="header-anchor" href="#flushlayout" aria-hidden="true">#</a> flushLayout()</h3><p>markNeedsLayout 执行完毕后，就会将其 relayoutBoundary 节点添加到 <code>pipelineOwner._nodesNeedingLayout</code> 列表中，然后请求新的 frame，新的 frame 到来时就会执行 <code>drawFrame</code> 方法（可以参考上一节）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新布局</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushCompositingBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  pipelineOwner<span class="token punctuation">.</span><span class="token function">flushPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flushLayout() 中会对之前添加到 <code>_nodesNeedingLayout</code> 中的节点重新布局，我们看一下其核心源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">flushLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>_nodesNeedingLayout<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span> dirtyNodes <span class="token operator">=</span> _nodesNeedingLayout<span class="token punctuation">;</span>\n    _nodesNeedingLayout <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderObject</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n    <span class="token comment">//按照节点在树中的深度从小到大排序后再重新layout</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">RenderObject</span> node <span class="token keyword">in</span> dirtyNodes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>depth <span class="token operator">-</span> b<span class="token punctuation">.</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>_needsLayout <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>owner <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n        node<span class="token punctuation">.</span><span class="token function">_layoutWithoutResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新布局</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下 <code>_layoutWithoutResize</code> 实现</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">_layoutWithoutResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新布局；会递归布局后代节点</span>\n  _needsLayout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//布局更新后，UI也是需要更新的</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很简单，不再赘述。</p><blockquote><p>思考题：为什么 flushLayout() 中刷新布局时要先对dirtyNodes 根据在树中的深度按照从小到大排序？从大到小不行吗？</p></blockquote><h3 id="layout流程" tabindex="-1"><a class="header-anchor" href="#layout流程" aria-hidden="true">#</a> Layout流程</h3><p>如果组件有子组件，则在 performLayout 中需要调用子组件的 layout 方法先对子组件进行布局，我们看一下 layout 的核心流程：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token class-name">Constraints</span> constraints<span class="token punctuation">,</span> <span class="token punctuation">{</span> bool parentUsesSize <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">RenderObject</span><span class="token operator">?</span> relayoutBoundary<span class="token punctuation">;</span>\n  <span class="token comment">// 先确定当前组件的布局边界</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentUsesSize <span class="token operator">||</span> sizedByParent <span class="token operator">||</span> constraints<span class="token punctuation">.</span>isTight <span class="token operator">||</span> parent <span class="token operator">is!</span> <span class="token class-name">RenderObject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    relayoutBoundary <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    relayoutBoundary <span class="token operator">=</span> <span class="token punctuation">(</span>parent<span class="token operator">!</span> <span class="token operator">as</span> <span class="token class-name">RenderObject</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_relayoutBoundary<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// _needsLayout 表示当前组件是否被标记为需要布局</span>\n  <span class="token comment">// _constraints 是上次布局时父组件传递给当前组件的约束</span>\n  <span class="token comment">// _relayoutBoundary 为上次布局时当前组件的布局边界</span>\n  <span class="token comment">// 所以，当当前组件没有被标记为需要重新布局，且父组件传递的约束没有发生变化，</span>\n  <span class="token comment">// 且布局边界也没有发生变化时则不需要重新布局，直接返回即可。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_needsLayout <span class="token operator">&amp;&amp;</span> constraints <span class="token operator">==</span> _constraints <span class="token operator">&amp;&amp;</span> relayoutBoundary <span class="token operator">==</span> _relayoutBoundary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果需要布局，缓存约束和布局边界</span>\n  _constraints <span class="token operator">=</span> constraints<span class="token punctuation">;</span>\n  _relayoutBoundary <span class="token operator">=</span> relayoutBoundary<span class="token punctuation">;</span>\n\n  <span class="token comment">// 后面解释</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>sizedByParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">performResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 执行布局</span>\n  <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 布局结束后将 _needsLayout 置为 false</span>\n  _needsLayout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将当前组件标记为需要重绘（因为布局发生变化后，需要重新绘制）</span>\n  <span class="token function">markNeedsPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来讲布局过程分以下几步：</p><ol><li><p>确定当前组件的布局边界。</p></li><li><p>判断是否需要重新布局，如果没必要会直接返回，反之才需要重新布局。不需要布局时需要同时满足三个条件：</p><ul><li><p>当前组件没有被标记为需要重新布局。</p></li><li><p>父组件传递的约束没有发生变化。</p></li><li><p>当前组件的布局边界也没有发生变化时。</p></li></ul></li><li><p>调用 performLayout() 进行布局，因为 performLayout() 中又会调用子组件的 layout 方法，所以这时一个递归的过程，递归结束后整个组件树的布局也就完成了。</p></li><li><p>请求重绘。</p></li></ol><h2 id="_14-4-5-sizedbyparent" tabindex="-1"><a class="header-anchor" href="#_14-4-5-sizedbyparent" aria-hidden="true">#</a> 14.4.5 sizedByParent</h2><p>在 layout 方法中，有如下逻辑：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>sizedByParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">performResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新确定组件大小</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们说过 sizedByParent 为 true 时表示：当前组件的大小只取决于父组件传递的约束，而不会依赖后代组件的大小。前面我们说过，performLayout 中确定当前组件的大小时通常会依赖子组件的大小，如果 sizedByParent 为 true，则当前组件的大小就不依赖子组件大小了，为了逻辑清晰，Flutter 框架中约定，当sizedByParent 为 true 时，确定当前组件大小的逻辑应抽离到 performResize() 中，这种情况下 performLayout 主要的任务便只有两个：对子组件进行布局和确定子组件在当前组件中的布局起始位置偏移。</p><p>下面我们通过一个 AccurateSizedBox 示例来演示一下 sizedByParent 为 true 时我们应该如何布局：</p><h3 id="accuratesizedbox" tabindex="-1"><a class="header-anchor" href="#accuratesizedbox" aria-hidden="true">#</a> AccurateSizedBox</h3><p>Flutter 中的 SizedBox 组件会将其父组件的约束传递给其子组件，这也就意味着，如果父组件限制了最小宽度为100，即使我们通过 SizedBox 指定宽度为50，那也是没用的，<strong>因为 SizedBox的实现中会让 SizedBox 的子组件先满足 SizedBox 父组件的约束</strong>。还记得之前我们想在 AppBar 中限制 loading 组件大小的例子吗：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>\n    title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    actions<span class="token punctuation">:</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Widget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>\n      <span class="token class-name">SizedBox</span><span class="token punctuation">(</span> <span class="token comment">// 尝试使用SizedBox定制loading 宽高</span>\n        width<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> \n        height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span>\n          strokeWidth<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n          valueColor<span class="token punctuation">:</span> <span class="token class-name">AlwaysStoppedAnimation</span><span class="token punctuation">(</span><span class="token class-name">Colors</span><span class="token punctuation">.</span>white70<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际结果如图14-6：</p><p><img src="'+p+'" alt="图14-6"></p><p>之所以不生效，是因为父组件限制了最小高度，当然我们也可以使用 UnconstrainedBox + SizedBox 来实现我们想要的效果，但是这里我们希望通过一个组件就能搞定，为此我们自定义一个 AccurateSizedBox 组件，它和 SizedBox 的主要区别是 AccurateSizedBox 自身会遵守其父组件传递的约束<strong>而不是让其子组件去满足AccurateSizedBox 父组件的约束</strong>，具体：</p><ol><li>AccurateSizedBox 自身大小只取决于父组件的约束和用户指定的宽高。</li><li>AccurateSizedBox 确定自身大小后，限制其子组件大小。</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AccurateSizedBox</span> <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">AccurateSizedBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">final</span> double width<span class="token punctuation">;</span>\n  <span class="token keyword">final</span> double height<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">RenderObject</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RenderAccurateSizedBox</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">updateRenderObject</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">RenderAccurateSizedBox</span> renderObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    renderObject\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width\n      <span class="token punctuation">.</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">RenderAccurateSizedBox</span> <span class="token keyword">extends</span> <span class="token class-name">RenderProxyBoxWithHitTestBehavior</span> <span class="token punctuation">{</span>\n  <span class="token class-name">RenderAccurateSizedBox</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  double width<span class="token punctuation">;</span>\n  double height<span class="token punctuation">;</span>\n\n  <span class="token comment">// 当前组件的大小只取决于父组件传递的约束</span>\n  <span class="token metadata function">@override</span>\n  bool <span class="token keyword">get</span> sizedByParent <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n\n  <span class="token comment">// performResize 中会调用</span>\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Size</span> <span class="token function">computeDryLayout</span><span class="token punctuation">(</span><span class="token class-name">BoxConstraints</span> constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//设置当前元素宽高，遵守父组件的约束</span>\n    <span class="token keyword">return</span> constraints<span class="token punctuation">.</span><span class="token function">constrain</span><span class="token punctuation">(</span><span class="token class-name">Size</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// @override</span>\n  <span class="token comment">// void performResize() {</span>\n  <span class="token comment">//   // default behavior for subclasses that have sizedByParent = true</span>\n  <span class="token comment">//   size = computeDryLayout(constraints);</span>\n  <span class="token comment">//   assert(size.isFinite);</span>\n  <span class="token comment">// }</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>\n      <span class="token class-name">BoxConstraints</span><span class="token punctuation">.</span><span class="token function">tight</span><span class="token punctuation">(</span>\n          <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>height<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// 父容器是固定大小，子元素大小改变时不影响父元素</span>\n      <span class="token comment">// parentUseSize为false时，子组件的布局边界会是它自身，子组件布局发生变化后不会影响当前组件</span>\n      parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有三点需要注意：</p><ol><li>我们的 RenderAccurateSizedBox 不再直接继承自 RenderBox，而是继承自 RenderProxyBoxWithHitTestBehavior，RenderProxyBoxWithHitTestBehavior 是间接继承自 RenderBox的，它里面包含了默认的命中测试和绘制相关逻辑，继承自它后就不用我们再手动实现了。</li><li>我们将确定当前组件大小的逻辑挪到了computeDryLayout 方法中，因为RenderBox 的 performResize 方法会调用 computeDryLayout ，并将返回结果作为当前组件的大小。按照Flutter 框架约定，我们应该重写computeDryLayout 方法而不是 performResize 方法，就像在布局时我们应该重写 performLayout 方法而不是 layout 方法；不过，这只是一个约定，并非强制，但我们应该尽可能遵守这个约定，除非你清楚的知道自己在干什么并且能确保之后维护你代码的人也清楚。</li><li>RenderAccurateSizedBox 在调用子组件 layout 时，将 <code>parentUsesSize</code> 置为 <code>false</code>，这样的话子组件就会变成一个布局边界。</li></ol><p>下面我们测试一下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AccurateSizedBoxRoute</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token class-name">AccurateSizedBoxRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> child <span class="token operator">=</span> <span class="token class-name">GestureDetector</span><span class="token punctuation">(</span>\n      onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;tap&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>\n      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>\n          constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">.</span><span class="token function">tight</span><span class="token punctuation">(</span><span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>\n            width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n            height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Padding</span><span class="token punctuation">(</span>\n          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          child<span class="token punctuation">:</span> <span class="token class-name">ConstrainedBox</span><span class="token punctuation">(</span>\n            constraints<span class="token punctuation">:</span> <span class="token class-name">BoxConstraints</span><span class="token punctuation">.</span><span class="token function">tight</span><span class="token punctuation">(</span><span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            child<span class="token punctuation">:</span> <span class="token class-name">AccurateSizedBox</span><span class="token punctuation">(</span>\n              width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n              height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n              child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果如图14-7：</p><p><img src="'+o+'" alt="图14-7"></p><p>可以发现，当父组件约束子组件大小宽高是100时，我们通过 SizedBox 指定 Container 大小是为 50×50 是不能成功的， 而通过 AccurateSized 时成功了。</p><p>这里需要提醒一下读者，如果一个组件的的 sizedByParent 为 true，那它在布局子组件时也是能将 <code>parentUsesSize</code> 置为 true 的，sizedByParent 为 true 表示自己是布局边界，而将 <code>parentUsesSize</code> 置为 true 或 false 决定的是子组件是否是布局边界，两者并不矛盾，这个不要混淆了。顺便提一点 Flutter 自带的 OverflowBox 组件的实现中，它的 sizedByParent 为 true，在调用子组件layout 方法时，<code>parentUsesSize</code> 传的是 true，详情读者可以查看 OverflowBox 的实现源码。</p><h2 id="_14-4-6-afterlayout" tabindex="-1"><a class="header-anchor" href="#_14-4-6-afterlayout" aria-hidden="true">#</a> 14.4.6 AfterLayout</h2><p>我们在第四章中介绍过 AfterLayout （在 9.4节 - Hero 动画 一节中也使用过它），现在我们就来看看它的实现原理。</p><p>AfterLayout 可以在布局结束后拿到子组件的代理渲染对象 （RenderAfterLayout）， RenderAfterLayout 对象会代理子组件渲染对象 ，因此，通过RenderAfterLayout 对象也就可以获取到子组件渲染对象上的属性，比如件大小、位置等。</p><p>AfterLayout 的实现代码如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AfterLayout</span> <span class="token keyword">extends</span> <span class="token class-name">SingleChildRenderObjectWidget</span> <span class="token punctuation">{</span>\n  <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>\n    required <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token punctuation">,</span>\n    <span class="token class-name">Widget</span><span class="token operator">?</span> child<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token class-name">RenderObject</span> <span class="token function">createRenderObject</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RenderAfterLayout</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">updateRenderObject</span><span class="token punctuation">(</span>\n      <span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RenderAfterLayout</span> renderObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    renderObject<span class="token punctuation">.</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">///组件树布局结束后会被触发，注意，并不是当前组件布局结束后触发</span>\n  <span class="token keyword">final</span> <span class="token class-name">ValueSetter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderAfterLayout</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">RenderAfterLayout</span> <span class="token keyword">extends</span> <span class="token class-name">RenderProxyBox</span> <span class="token punctuation">{</span>\n  <span class="token class-name">RenderAfterLayout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">ValueSetter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RenderAfterLayout</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">;</span>\n\n  <span class="token metadata function">@override</span>\n  <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 不能直接回调callback，原因是当前组件布局完成后可能还有其它组件未完成布局</span>\n    <span class="token comment">// 如果callback中又触发了UI更新（比如调用了 setState）则会报错。因此，我们</span>\n    <span class="token comment">// 在 frame 结束的时候再去触发回调。</span>\n    <span class="token class-name">SchedulerBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span>\n        <span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>timeStamp<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/// 组件在屏幕坐标中的起始点坐标（偏移）</span>\n  <span class="token class-name">Offset</span> <span class="token keyword">get</span> offset <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">localToGlobal</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">/// 组件在屏幕上占有的矩形空间区域</span>\n  <span class="token class-name">Rect</span> <span class="token keyword">get</span> rect <span class="token operator">=</span><span class="token operator">&gt;</span> offset <span class="token operator">&amp;</span> size<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有三点需要注意：</p><ol><li><p>callback 调用时机不是在子组件完成布局后就立即调用，原因是子组件布局完成后可能还有其它组件未完成布局，如果此时调用callback，一旦 callback 中存在触发更新的代码（比如调用了 setState）则会报错。因此我们在 frame 结束的时候再去触发回调。</p></li><li><p>RenderAfterLayout 的布局调用的父类 RenderProxyBox 的 performLayout()：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>constraints<span class="token punctuation">,</span> parentUsesSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    size <span class="token operator">=</span> child<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    size <span class="token operator">=</span> <span class="token function">computeSizeForNoChild</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到是直接将父组件传给自身的约束传递给子组件，并将子组件的大小设置为自身大小。也就是说 RenderAfterLayout 的大小和其子组件大小是相同的</p></li><li><p>我们定义了 offset 和 rect 两个属性，它们是组件相对于屏幕的的位置偏移和占用的矩形空间范围。但是实战中，我们经常需要获取的是子组件相对于某个父级组件的坐标和矩形空间范围，这时候我们可以调用 RenderObject 的<code>localToGlobal</code> 方法，比如下面的的代码展示了Stack中某个子组件获取相对于Stack 的矩形空间范围：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>\n    alignment<span class="token punctuation">:</span> <span class="token class-name">AlignmentDirectional</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token class-name">AfterLayout</span><span class="token punctuation">(</span>\n        callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>renderAfterLayout<span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token comment">//我们需要获取的是AfterLayout子组件相对于Stack的Rect</span>\n         _rect <span class="token operator">=</span> renderAfterLayout<span class="token punctuation">.</span><span class="token function">localToGlobal</span><span class="token punctuation">(</span>\n            <span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span>\n            <span class="token comment">//找到 Stack 对应的 RenderObject 对象</span>\n            ancestor<span class="token punctuation">:</span> context<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">)</span> <span class="token operator">&amp;</span> renderAfterLayout<span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Flutter@wendux&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_14-4-7-再论-constraints" tabindex="-1"><a class="header-anchor" href="#_14-4-7-再论-constraints" aria-hidden="true">#</a> 14.4.7 再论 Constraints</h2><p>Constraints（约束）主要描述了最小和最大宽高的限制，理解组件在布局过程中如何根据约束确定自身或子节点的大小对我们理解组件的布局行为有很大帮助，现在我们就通过一个实现 200*200 的红色 Container 的例子来说明。为了排除干扰，我们让根节点（RenderView）作为 Container 的父组件，我们的代码是：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但实际运行之后，你会发现整个屏幕都变成了红色！为什么呢？我们看看 RenderView 的布局实现：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//configuration.size 为当前设备屏幕</span>\n  _size <span class="token operator">=</span> configuration<span class="token punctuation">.</span>size<span class="token punctuation">;</span> \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    child<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token class-name">BoxConstraints</span><span class="token punctuation">.</span><span class="token function">tight</span><span class="token punctuation">(</span>_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//强制子组件和屏幕一样大</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要介绍一下两种常用的约束：</p><ol><li>宽松约束：不限制最小宽高（为0），只限制最大宽高，可以通过 <code>BoxConstraints.loose(Size size)</code> 来快速创建。</li><li>严格约束：限制为固定大小；即最小宽度等于最大宽度，最小高度等于最大高度，可以通过 <code>BoxConstraints.tight(Size size)</code> 来快速创建。</li></ol><p>可以发现，RenderView 中给子组件传递的是一个严格约束，即强制子组件大小等于屏幕大小，所以 Container 便撑满了屏幕。那我们怎么才能让指定的大小生效呢？标准答案就是<strong>引入一个中间组件，让这个中间组件遵守父组件的约束，然后对子组件传递新的约束</strong>。对于这个例子来讲，最简单的方式是用一个 Align 组件来包裹 Container：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>\n<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token class-name">Align</span><span class="token punctuation">(</span>\n    child<span class="token punctuation">:</span> container<span class="token punctuation">,</span>\n    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topLeft<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Align 会遵守 RenderView 的约束，让自身撑满屏幕，然后会给子组件传递一个宽松约束（最小宽高为0，最大宽高为200），这样 Container 就可以变成 200 * 200 了。</p><p>当然我们还可以使用其它组件来代替 Align，比如 UnconstrainedBox，但原理是相同的，读者可以查看源码验证。</p><h2 id="_14-4-8-总结" tabindex="-1"><a class="header-anchor" href="#_14-4-8-总结" aria-hidden="true">#</a> 14.4.8 总结</h2><p>通过本节，相信你已经对 flutter 的布局流程熟悉了，现在我们看一张 flutter 官网的图（图14-8）：</p><p><img src="'+c+'" alt="图14-8"></p><p>现在我们再来看一下官网关于Flutter布局的解释：</p><blockquote><p>“ 在进行布局的时候，Flutter 会以 DFS（深度优先遍历）方式遍历渲染树，并 <strong>将限制以自上而下的方式</strong> 从父节点传递给子节点。子节点若要确定自己的大小，则 <strong>必须</strong> 遵循父节点传递的限制。子节点的响应方式是在父节点建立的约束内 <strong>将大小以自下而上的方式</strong> 传递给父节点。”</p></blockquote><p>是不是理解的更透彻了一些！</p>',105)],l={},u=(0,a(18580).Z)(l,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,i)}]])},18580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);